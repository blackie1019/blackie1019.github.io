<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HttpWebRequest Timeout and ReadWriteTimeout]]></title>
      <url>http://blackie1019.github.io/2016/08/22/HttpWebRequest-Timeout-and-ReadWriteTimeout/</url>
      <content type="html"><![CDATA[<p>分享如何正確的使用在Asp.Net中的HttpWebRequest兩個Timeout，Timeout與ReadWriteTimeout。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在開始前要先談一下TCP datagrams 與 Chunked transfer encoding。</p>
<h3 id="TCP-datagrams"><a href="#TCP-datagrams" class="headerlink" title="TCP datagrams"></a>TCP datagrams</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/tcp.png" alt="tcp"></p>
<p>使用TCP協議來傳輸數據的HTTP是Web服務器和客戶端使用的特殊協議。而TCP在傳輸中會將封包拆成一份IP header與多份TCP segment(TCP header + TCP data)。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/TCP_segment.png" alt="TCP+IPData"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/TCP_IPData.png" alt="TCP+IPData"></p>
<p>簡單來看就是一個header來告訴你連線位置與請求狀況後，會切分成多份封包依序傳輸，當封包都接收完才算完成傳輸，並將傳輸內容整理成真實的檔案。</p>
<h3 id="Chunked-transfer-encoding"><a href="#Chunked-transfer-encoding" class="headerlink" title="Chunked transfer encoding"></a>Chunked transfer encoding</h3><p>分塊傳輸編碼（Chunked transfer encoding）是HTTP中的一種數據傳輸機制，允許HTTP由網頁伺服器發送給客戶端應用的數據可以分成多個部分。分塊傳輸編碼只在HTTP協議1.1版本（HTTP/1.1）中提供。</p>
<p>通常，HTTP應答消息中發送的數據是整個發送的，Content-Length消息頭欄位表示數據的長度。數據的長度很重要，因為客戶端需要知道哪裡是應答消息的結束，以及後續應答消息的開始。</p>
<p>也因為有此機制導致我們在寫程式時需要用一個stream來當緩衝接收所收到資料並把他讀出。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/chunk_transfer.png" alt="Chunked flow"></p>
<h3 id="HttpWebRequest-Timeout"><a href="#HttpWebRequest-Timeout" class="headerlink" title="HttpWebRequest.Timeout"></a>HttpWebRequest.Timeout</h3><p>The time before which the server has to accept the client’s request. Note that this doesn’t include the DNS resolution time, which is managed by the ServicePointManager.</p>
<h3 id="HttpWebRequest-ReadWriteTimeout"><a href="#HttpWebRequest-ReadWriteTimeout" class="headerlink" title="HttpWebRequest.ReadWriteTimeout"></a>HttpWebRequest.ReadWriteTimeout</h3><p>The time before which the client has to receive the entire body of the response from the server. Note that this timeout starts only after the server accepts the request.</p>
<p><strong><em>Default value is 300,000 milliseconds (5 minutes).</em></strong></p>
<p>而無論TCP datagrams或是分塊傳輸編碼的機制將導致我們需要ReadWriteTimeout來判斷是否寫入每一個chunk資料流讀寫都在時間內。</p>
<h2 id="Use-Scenario"><a href="#Use-Scenario" class="headerlink" title="Use Scenario"></a>Use Scenario</h2><h3 id="使用HttpWebRequest-Timeout"><a href="#使用HttpWebRequest-Timeout" class="headerlink" title="使用HttpWebRequest.Timeout"></a>使用HttpWebRequest.Timeout</h3><ul>
<li>判斷Connection是否在指定時間內建立連線</li>
<li>每段封包建立連線限定時間</li>
</ul>
<h3 id="使用HttpWebRequest-ReadWriteTimeout"><a href="#使用HttpWebRequest-ReadWriteTimeout" class="headerlink" title="使用HttpWebRequest.ReadWriteTimeout"></a>使用HttpWebRequest.ReadWriteTimeout</h3><ul>
<li>指定時間內做完single chunk資料流(data streaming)的讀寫</li>
</ul>
<p>簡單來講當我們需要強制在一段時間內做完一個使用HttpWebRequest的回應用TimeoutStream會較佳。</p>
<h2 id="Misconceptions"><a href="#Misconceptions" class="headerlink" title="Misconceptions"></a>Misconceptions</h2><p>但這邊要聲明如果用HttpWebRequest.ReadWriteTimeout則是錯誤的觀念。要達到在限制的下載時間內完成下載否則就拋出例外錯誤的話是需要自己去實作該功能的。 這邊提供一個範例來說明該如何實作:</p>
<p>請求遠端的一個檔案，這邊用<a href="http://engineerhammad.blogspot.tw/2015/04/Download-Test-Files.html" target="_blank" rel="external"><br>DOWNLOAD<br>Download Test Files | 100Kb, 1Mb, 10Mb, 100Mb, 1Gb, 5Gb and 10 Gb.</a>的10MB檔案做範例:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/speed.png" alt="speed"></p>
<p>這邊建置一個MVC空的Action來測試，而執行的範例程式碼如下:</p>
<ul>
<li>設定HttpWebRequest.Timeout 確認連線建立不超過3秒</li>
<li>設定HttpWebRequest.ReadWriteTimeout 確認3秒內做完每一個chunk的讀寫</li>
<li>使用自行建置的TimeoutStream來控制整個下載的過程不超過10秒</li>
</ul>
<pre><code>public ActionResult Test2Speed()
{
    var result = new JObject();
    var request = (HttpWebRequest)WebRequest.Create(&quot;http://speedtest.ftp.otenet.gr/files/test10Mb.db&quot;);
    request.Timeout = 3 * 1000;
    request.ReadWriteTimeout = 3 * 1000;
    try
    {

        using (var pageResponse = request.GetResponse())
        {
            var stream = pageResponse.GetResponseStream();
            using (var myStreamReader = new StreamReader(new TimeOutStream(stream, 10 * 1000), Encoding.GetEncoding(&quot;UTF-8&quot;)))
            {
                var data = myStreamReader.ReadToEnd();
                result.Add(&quot;content&quot;, &quot;success&quot;);
            }
        }
    }
    catch (TimeOutException e)
    {
        result.Add(&quot;content&quot;, e.Message);
    }
    catch (Exception e)
    {
        result.Add(&quot;content&quot;, e.Message);
        result.Add(&quot;stack&quot;, e.StackTrace);
    }
    return this.Content(JsonConvert.SerializeObject(result), &quot;application/json&quot;);
}
</code></pre><p>這邊建置一個TimeOutStream繼承Stream，並設定一個計時器，在逾時時會丟出例外(TimeOutException)</p>
<pre><code>public class TimeOutStream : Stream
{
    private Stream inner;
    private System.Timers.Timer timer;

    private Exception ex;

    public TimeOutStream(Stream inner, int fetchTimeoutInMs)
    {
        this.timer = new System.Timers.Timer();
        this.timer.Enabled = true;
        this.timer.AutoReset = false;
        this.timer.Interval = fetchTimeoutInMs;
        this.timer.Elapsed += this.TimeOutEvent;
        this.inner = inner;
        this.timer.Start();
    }

    public override void Flush()
    {
        this.inner.Flush();
    }

    public override long Seek(long offset, SeekOrigin origin)
    {
        this.ThrowException();
        return this.inner.Seek(offset, origin);
    }

    public override void SetLength(long value)
    {
        this.inner.SetLength(value);
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        this.ThrowException();
        var result = inner.Read(buffer, offset, count);

        /* HERE I COULD CALL A CUSTOM EVENT */
        return result;
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
        this.ThrowException();
        this.inner.Write(buffer,offset,count);
    }

    public override bool CanRead {
        get
        {
            return this.inner.CanRead;
        }
    }

    public override bool CanSeek
    {
        get
        {
            return this.inner.CanSeek;
        }
    }

    public override bool CanWrite
    {
        get
        {
            return this.inner.CanWrite;
        }
    }

    public override long Length
    {
        get
        {
            return this.inner.Length;
        }
    }

    public override long Position
    {
        get
        {
            return this.inner.Position;
        }

        set
        {
            this.inner.Position = value;
        }
    }

    private void TimeOutEvent(object sender, ElapsedEventArgs eArgs)
    {
        this.ex = new TimeOutException(&quot;Timeout exception&quot;);
        this.timer.Stop();
    }

    private void ThrowException()
    {
        if (this.ex!=null)
        {
            throw this.ex;
        }
    }
}
</code></pre><p>這邊自行定義TimeOutException</p>
<pre><code>public class TimeOutException : Exception
{
    public TimeOutException()
    {
    }

    public TimeOutException(string message)
        : base(message)
    {
    }

    public TimeOutException(string message, Exception inner)
        : base(message, inner)
    {
    }
}
</code></pre><p>結果如下:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/Exception.png" alt="exception"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.google.com.tw/search?q=TCP/IP+HTTP&amp;espv=2&amp;biw=1745&amp;bih=828&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjno9vGkdXOAhUBu5QKHckZDO0Q_AUIBigB&amp;dpr=1.1#imgrc=3zlIHfpxOE1UGM%3A" target="_blank" rel="external">TCP/IP, Winsock, and WinInet</a></li>
<li><a href="http://stackoverflow.com/questions/7250983/httpwebrequests-timeout-and-readwritetimeout-what-do-these-mean-for-the-unde" target="_blank" rel="external">HttpWebRequest’s Timeout and ReadWriteTimeout — What do these mean for the underlying TCP connection?</a></li>
<li><a href="http://stackoverflow.com/questions/1410602/how-do-set-a-timeout-for-a-method/1533975#1533975" target="_blank" rel="external">how do set a timeout for a method</a></li>
<li><a href="http://lnbogen.com/2008/10/14/httpwebrequest-avoiding-the-pitfalls/" target="_blank" rel="external">HttpWebRequest, avoiding the pitfalls</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/SSPREK_6.1.0/com.ibm.itame.doc_6.1/am61_webseal_admin91.htm" target="_blank" rel="external">HTTP Fragment</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank" rel="external">分塊傳輸編碼</a></li>
<li><a href="https://doc.micrium.com/display/httpref/Chunked+Transfer+Encoding" target="_blank" rel="external">Chunked Transfer Encoding</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[reCAPTCHA for .NET]]></title>
      <url>http://blackie1019.github.io/2016/08/22/reCAPTCHA-for-NET/</url>
      <content type="html"><![CDATA[<p>reCAPTCHA計畫原本是由卡內基美濃大學所發展的系統，後來普遍被發展到防止非人為行為的自動程式上，包含Facebook與Twitter都有使用。此篇跟大家分享如何在Asp.Net上使用<br>reCAPTCHA for .NET來實現該功能。</p>
<a id="more"></a>
<h2 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h2><blockquote>
<p>為了驗證人類所輸入的文字是正確的，而不是隨意輸入，有兩個字會被顯示出來；一個是光學文字辨識軟體無法辨別的字，另一個是一個已經知道正確答案的字。如果使用者正確的回答出已知正確答案的字，那麼就假設所輸入的另一個光學辨識軟體無法辨識的字是認真的檢視後被輸入而非隨便輸入。</p>
</blockquote>
<p>官方解說可以參考這部影片:</p>
<iframe width="560" height="315" src="http://www.youtube.com/embed/jwslDn3ImM0" frameborder="0" allowfullscreen></iframe>

<p>架構流程:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/Recaptcha-api-diagram.gif" alt="流程"></p>
<h2 id="Google-reCAPTCHA-演進"><a href="#Google-reCAPTCHA-演進" class="headerlink" title="Google reCAPTCHA 演進"></a>Google reCAPTCHA 演進</h2><p>其實目前Google的reCAPTCHA已經經過三次的演進，改變的目的都是降低人為辨識失敗率跟加速過程，避免在防止機器人的時候讓真的操作者使用者經驗更差。</p>
<h3 id="第一代"><a href="#第一代" class="headerlink" title="第一代"></a>第一代</h3><p>reCAPTCHA問題的所需的文字圖片，首先會由reCAPTCHA計畫網站利用Javascript API取得[6]，在終端使用者回答問題後，伺服器再連回reCAPTCHA計畫的主機驗證使用者的輸入是否正確。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_1_o.jpg" alt="g1_ori"></p>
<p>2012年起，reCAPTCHA除了原來的文字掃描圖片外，也採用Google街景拍攝的門牌號碼相片</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_1.jpg" alt="g1"></p>
<h3 id="第二代"><a href="#第二代" class="headerlink" title="第二代"></a>第二代</h3><p>更新後的版本改用圖片來取代文字辨識率較差的問題，但有時圖片也不是真的很容易辨識..因為常常會有模擬兩可的答案…(畢竟不是自己拍的圖片呀)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_2.jpg" alt="g2"></p>
<h3 id="第三代"><a href="#第三代" class="headerlink" title="第三代"></a>第三代</h3><p>最新的版本在2014年底推出，這版只要勾選I’m not a rebot即可!是不是更簡單了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_3.png" alt="g3"></p>
<h2 id="reCAPTCHA-for-NET"><a href="#reCAPTCHA-for-NET" class="headerlink" title="reCAPTCHA for .NET"></a>reCAPTCHA for .NET</h2><p><a href="https://github.com/tanveery/recaptcha-net" target="_blank" rel="external">recaptcha-net</a>，這是Nuget上面的一個專案可讓.Net 同時支援Google reCAPTCHA Version 1與Version 2。設定與使用都相當簡單</p>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul>
<li>Render recaptcha control (HTML) with appropriate options for pre-defined themes and culture (language).</li>
<li>Verify user’s answer to recaptcha’s challenge.</li>
<li>Supports ASP.NET Web Forms and ASP.NET MVC.</li>
<li>Supprts reCAPTCHA version 1 and version 2 in a seamless fashion.</li>
<li>One of the most well-documented reCAPTCHA libraries in the open source community.</li>
</ul>
<h3 id="Creating-a-reCAPTCHA-API-Key"><a href="#Creating-a-reCAPTCHA-API-Key" class="headerlink" title="Creating a reCAPTCHA API Key"></a>Creating a reCAPTCHA API Key</h3><ul>
<li>前往<a href="https://www.google.com/recaptcha" target="_blank" rel="external">Google’s reCAPTCHA</a></li>
<li>點選Get reCAPTCHA. 此時會需要你登入Google帳號綁定該服務.</li>
<li>選擇註冊一個新網站(domain)並輸入一個識別名稱(tag/label)給該網站.</li>
<li>新增成功後會獲得一組 <em>Site Key</em> 與 <em>Secret Key</em>，這部分等等要被我們放進網站的 web.config 中設定.</li>
</ul>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ol>
<li><p>安裝reCAPTCHA Nuget Package</p>
<pre><code>Install-Package RecaptchaNet
</code></pre></li>
<li><p>將 reCAPTCHA Key 放入 Web.config File</p>
<p> 這邊範例放的是Version 2，如果要改成Version 1只需改成1就好</p>
<pre><code>&lt;appSettings&gt;
    &lt;add key=&quot;recaptchaPublicKey&quot; value=&quot;Your site key&quot; /&gt;
    &lt;add key=&quot;recaptchaPrivateKey&quot; value=&quot;Your secret key&quot; /&gt;
    &lt;add key=&quot;recaptchaApiVersion&quot; value=&quot;2&quot; /&gt;
&lt;/appSettings&gt;
</code></pre></li>
</ol>
<h3 id="Added-Code"><a href="#Added-Code" class="headerlink" title="Added Code"></a>Added Code</h3><p>這邊官方提供兩個版本:WebForm與Web MVC(目前無WebAPI版本)。這邊因為不推廣WebForm了所以只講Web MVC的使用，如下:</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>這邊簡單定義一個Model作為稍後傳入的資料結構，這邊設定為[Required]則表示稍後後段會驗證該參數是否有值，如果沒有給值則會視同表單驗證失敗</p>
<pre><code>namespace BKPlatform.App.MemberSite.Site.Models
{
    using System.ComponentModel.DataAnnotations;

    public class MemberRegistrationModel
    {
        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        public string MemberCode { get; set; }

    }
}
</code></pre><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>使用上需載入Namespace</p>
<pre><code>using Recaptcha.Web;
using Recaptcha.Web.Mvc;
</code></pre><p>然後加入新的Routing Action - RegisterMember</p>
<pre><code>public ActionResult RegisterMember([FromBody] MemberRegistrationModel model)
{
    var recaptchaHelper = this.GetRecaptchaVerificationHelper();
    if (String.IsNullOrEmpty(recaptchaHelper.Response))
    {
        this.ModelState.AddModelError(&quot;&quot;, &quot;Captcha answer cannot be empty.&quot;);
        return View(model);
    }

    var recaptchaResult = recaptchaHelper.VerifyRecaptchaResponse();

    if (recaptchaResult != RecaptchaVerificationResult.Success)
    {
        this.ModelState.AddModelError(&quot;&quot;, &quot;Incorrect captcha answer.&quot;);
        return View(model);
    }

    if (this.ModelState.IsValid)
    {
        return RedirectToAction(&quot;Index&quot;);
    }

    return View(model);
}
</code></pre><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>這邊在頁面只要透過官方寫好的Helper簡單的載入即可，記得要先載入google recaptcha的JavaScript API(這邊使用Layout客製的headScripts區域在head載入)</p>
<pre><code>@model BKPlatform.App.MemberSite.Site.Models.MemberRegistrationModel
@using Recaptcha.Web.Mvc
@{
    Layout = &quot;~/Views/Shared/_Layout.cshtml&quot;;
}

@section headScripts{
    &lt;script src=&apos;https://www.google.com/recaptcha/api.js&apos;&gt;&lt;/script&gt;
}

&lt;h2&gt;User Registration Form&lt;/h2&gt;

@using (Html.BeginForm())
{
    @Html.ValidationSummary()
    &lt;p&gt;
        &lt;label&gt;Member Code:&lt;/label&gt;
        @Html.PasswordFor(m =&gt; m.MemberCode)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;First name:&lt;/label&gt;
        @Html.TextBoxFor(m =&gt; m.FirstName)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;Last name:&lt;/label&gt;
        @Html.TextBoxFor(m =&gt; m.LastName)
    &lt;/p&gt;

    @Html.Recaptcha(theme: Recaptcha.Web.RecaptchaTheme.Clean);

    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
}
</code></pre><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p>這邊就是我們完成的畫面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/result.gif" alt="result"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/ReCAPTCHA" target="_blank" rel="external">ReCAPTCHA</a></li>
<li><a href="http://www.ithome.com.tw/news/92757" target="_blank" rel="external">Google釋出新版reCAPTCHA機制，只要點「我不是機器人」！</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SignalR tuning experience]]></title>
      <url>http://blackie1019.github.io/2016/08/20/signalr-tuning-experience/</url>
      <content type="html"><![CDATA[<p>整理使用SignalR的一些經驗與調校內容</p>
<a id="more"></a>
<p>使用SignalR作為公司處理client-server的訊息傳遞的功能已經好一陣子，這邊整理一下相關知識。</p>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="Web-Browser-Support"><a href="#Web-Browser-Support" class="headerlink" title="Web Browser Support"></a>Web Browser Support</h3><p>Applications that use SignalR in browsers must use jQuery version 1.6.4 or major later versions (such as 1.7.2, 1.8.2, or 1.9.1).</p>
<p>SignalR can be used in the following browsers:</p>
<ul>
<li>Microsoft Internet Explorer versions 8, 9, 10, and 11. Modern, Desktop, and Mobile versions are supported.</li>
<li>Mozilla Firefox: current version - 1, both Windows and Mac versions.</li>
<li>Google Chrome: current version - 1, both Windows and Mac versions.</li>
<li>Safari: current version - 1, both Mac and iOS versions.</li>
<li>Opera: current version - 1, Windows only.</li>
<li>Android browser</li>
</ul>
<h3 id="Application-Support"><a href="#Application-Support" class="headerlink" title="Application Support"></a>Application Support</h3><p>SignalR can be hosted in standalone Windows client or Silverlight applications. Windows Desktop and Silverlight SignalR applications</p>
<ul>
<li>Applications using .NET 4 are supported on Windows XP SP3 or later.</li>
<li>Applications using .NET Framework 4.5 are supported on Windows Vista or later.</li>
</ul>
<h3 id="Transport-Medium"><a href="#Transport-Medium" class="headerlink" title="Transport Medium"></a>Transport Medium</h3><p>SignalR提供四種傳輸方式，依據瀏覽器的支援你可以自行設定(預設四種都支援，但會有先後順序的使用，Websocket最優先!)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/signalr-tuning-experience/type.png" alt="type"></p>
<ul>
<li><p>HTML 5 transports</p>
<ul>
<li>WebSocket</li>
<li>Server-Sent Events</li>
</ul>
</li>
<li><p>Comet transports</p>
<ul>
<li>Forever Frame</li>
<li>Long Polling</li>
</ul>
</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/signalr-tuning-experience/support.png" alt="support"></p>
<h3 id="Config-Transport"><a href="#Config-Transport" class="headerlink" title="Config Transport"></a>Config Transport</h3><p>我們可以手動設定自己要的Transport</p>
<pre><code>$.connection.hub.start({ transport: [&apos;longPolling&apos;] });
</code></pre><h3 id="Logging-and-Monitoring-Transports-in-SignalR"><a href="#Logging-and-Monitoring-Transports-in-SignalR" class="headerlink" title="Logging and Monitoring Transports in SignalR"></a>Logging and Monitoring Transports in SignalR</h3><p>SignlaR本身可以開啟Logging機制，只要透過簡單的設定打開即可</p>
<pre><code>$.connection.hub.logging = true;
</code></pre><h2 id="Tuning-Experience"><a href="#Tuning-Experience" class="headerlink" title="Tuning Experience"></a>Tuning Experience</h2><p>以下是正式環境上遇到的問題跟處理的方式:</p>
<ul>
<li>Reducing message size. All messaging solution concern size, smaller is better.</li>
<li><p>Use latest SignalR to solved connection increase issue.</p>
<p>  To fix known knowing issue of early version, suggest to upgrade signalR to latest stable version. *SignalR 2 is only supported on .NET Famework 4.5 or higher version.</p>
<ul>
<li><a href="https://github.com/SignalR/SignalR/issues/1790" target="_blank" rel="external">https://github.com/SignalR/SignalR/issues/1790</a></li>
<li><a href="https://github.com/SignalR/SignalR/issues/2950" target="_blank" rel="external">https://github.com/SignalR/SignalR/issues/2950</a></li>
</ul>
</li>
<li><p>Update windows service pack for SinglaR connection issue(Window Server 2012 以上不需要特別安裝)</p>
<p>  <a href="https://support.microsoft.com/en-us/kb/980368" target="_blank" rel="external">Update for Windows Server 2008/2008 R2 with IIS 7/7.5 endless connection with a period</a></p>
</li>
<li><p>Web request optimized</p>
<ul>
<li>Move static file to CDN(JS, CSS, png, audio file and etc…)</li>
<li>Concatenate request to less request(only one request to retrieve data is best)</li>
</ul>
</li>
<li><p>SignalR web socket issue, caused Network setting limitation.</p>
<p>  Found SignalR using unsupported transport type and create a lot of connection.</p>
<ul>
<li><p>Short-term: To turn off web socket from SignalR, pass the transport type(longPolling, foreverFrame, serverSentEvents, webSocket) you want.</p>
<pre><code>$.connection.hub.start({ transport: [&apos;longPolling&apos;] });
</code></pre></li>
<li><p>Long-term: Using sub-domain and update system architecture to support SignalR with Web Socket Issue.</p>
</li>
</ul>
</li>
<li><p>Avoid unobserved exceptions stop application due to too many connection from SignalR in global.asax.cs</p>
<pre><code>protected void Application_Start()
{

    this.RegisterUnobservedTaskException();
}

private void RegisterUnobservedTaskException()
{
    TaskScheduler.UnobservedTaskException += (s, e) =&gt;
    {
        e.SetObserved();
        e.Exception.Handle(
            t =&gt;
            {
                this.log.Exception(string.Format(&quot;UnobservedTaskException happen on Message={0}&quot;, e.Exception.Message));
                return true;
            });
    };
}
</code></pre></li>
</ul>
<h2 id="SignalR-ScaleOut-Design"><a href="#SignalR-ScaleOut-Design" class="headerlink" title="SignalR ScaleOut Design"></a>SignalR ScaleOut Design</h2><p>If still have connection issue, review web application design for SignalR scaleout design.</p>
<p><a href="http://www.asp.net/signalr/overview/performance/scaleout-in-signalr" target="_blank" rel="external">ScaleOut In SignalR</a></p>
<h2 id="Performance-Tuning-with-IIS-and-net-framework"><a href="#Performance-Tuning-with-IIS-and-net-framework" class="headerlink" title="Performance Tuning with IIS and .net framework"></a>Performance Tuning with IIS and .net framework</h2><p>Sharing the tuning guide of official post.</p>
<p><a href="https://github.com/SignalR/SignalR/wiki/Performance" target="_blank" rel="external">Performance Tuning SignalR</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr" target="_blank" rel="external">Introduction to SignalR</a></li>
<li><a href="http://dailydotnettips.com/2014/03/20/identifying-the-signalr-transport-medium/" target="_blank" rel="external">Identifying the SignalR Transport Medium</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/supported-platforms" target="_blank" rel="external">SignalR Supported Platforms</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Travis CI build daily with nightli.es]]></title>
      <url>http://blackie1019.github.io/2016/08/19/Travis-CI-build-daily-with-nightli-es/</url>
      <content type="html"><![CDATA[<p>協助Travis CI建立每24小時至少建置一次的行為，確保外部套件或內部程序可正常被建置</p>
<a id="more"></a>
<p>在開發時難免會有用到別人套件的情況，而使用Travis CI雖然可以幫我們在push code到remote repository時，即時建立專案編譯與發佈至對應的位置，但如果我們有遇到使用的Library會不定時建置同一版本時你就需要<a href="https://nightli.es/" target="_blank" rel="external">nightli.es</a>協助，可以每天至少建置一次的Travis CI排程。</p>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>使用上很簡單只要上<a href="https://nightli.es/" target="_blank" rel="external">nightli.es</a>後登入你的github帳號並設定要建立daily build的專案，將他turn on即可。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Travis-CI-build-daily-with-nightli-es/1.png" alt="turn on"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本部落格是用Hexo來建立的，而Hexo在建立文章時可以加入date來指定該文章的時間。但卻點是如果要將該篇文章正常的被建置至首頁節錄顯示或是新增至routing則一定要經過編譯與重新發佈。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Travis-CI-build-daily-with-nightli-es/2.png" alt="date"></p>
<p>此時，就是需要nightli.es協助我們建立每天執行一次daily build來確保每天的文章都正常地顯示在首頁上。</p>
<p>而此篇文章也是前一天預先寫好跟透過daily build來發佈的歐! 有需求的朋友快點來嘗試看看吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gulp run-sequence - Run a Series of Dependent Gulp Tasks in Order]]></title>
      <url>http://blackie1019.github.io/2016/08/19/gulp-run-sequence/</url>
      <content type="html"><![CDATA[<p>讓Gulp可以建立有相依性的系列工作，協助我們解決在有必要依序執行的工作上做更彈性的設置</p>
<a id="more"></a>
<p>當我們在使用Gulp預設的相依性是單一且十分單純的。當我們今天有較為複雜的使用情形就會不堪使用。 </p>
<blockquote>
<p>Runs a sequence of gulp tasks in the specified order. This function is designed to solve the situation where you have defined run-order, but choose not to or cannot use dependencies.</p>
</blockquote>
<p>而<a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="external">run-sequence</a>則是專門解決這樣情形的gulp套件</p>
<h2 id="run-sequence-基本操作"><a href="#run-sequence-基本操作" class="headerlink" title="run-sequence 基本操作"></a>run-sequence 基本操作</h2><p>開始正式使用前先來看一下基本配置</p>
<h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><pre><code>npm install --save-dev run-sequence
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>以下是官方簡單的介紹與載入方式</p>
<p>This will run in this order: </p>
<ol>
<li>build-clean </li>
<li>build-scripts and build-styles in parallel </li>
<li>build-html </li>
<li>Finally call the callback function </li>
</ol>
<p>代碼:</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var runSequence = require(&apos;run-sequence&apos;);
var del = require(&apos;del&apos;);
var fs = require(&apos;fs&apos;);

gulp.task(&apos;build&apos;, function(callback) {
  runSequence(&apos;build-clean&apos;,
              [&apos;build-scripts&apos;, &apos;build-styles&apos;],
              &apos;build-html&apos;,
              callback);
});

gulp.task(&apos;build-clean&apos;, function() {
    // Return the Promise from del() 
    return del([BUILD_DIRECTORY]);
//  ^^^^^^ 
//   This is the key here, to make sure asynchronous tasks are done! 
});

gulp.task(&apos;build-scripts&apos;, function() {
    // Return the stream from gulp 
    return gulp.src(SCRIPTS_SRC).pipe(...)...
//  ^^^^^^ 
//   This is the key here, to make sure tasks run to completion! 
});

gulp.task(&apos;callback-example&apos;, function(callback) {
    // Use the callback in the async function 
    fs.readFile(&apos;...&apos;, function(err, file) {
        console.log(file);
        callback();
//      ^^^^^^^^^^ 
//       This is what lets gulp know this task is complete! 
    });
});
</code></pre><h2 id="Web-development-工作情境"><a href="#Web-development-工作情境" class="headerlink" title="Web development 工作情境"></a>Web development 工作情境</h2><p>接者我們以常見的前端開發來做配置，工作情境需求如下(工作順序如號碼從小到大):</p>
<ol>
<li>清空發布的資料夾</li>
<li>搬移js,css檔案(一起做)</li>
<li>合併js,css檔案(一起做)</li>
<li>最小化js,css檔案(一起做)</li>
<li>清除所有暫存目錄與檔案</li>
</ol>
<h2 id="使用run-sequence建立工作"><a href="#使用run-sequence建立工作" class="headerlink" title="使用run-sequence建立工作"></a>使用run-sequence建立工作</h2><p>直接來看gulpfile.js的設定</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var uglify = require(&apos;gulp-uglify&apos;); // JS最佳化
var cleanCSS = require(&apos;gulp-clean-css&apos;); // CSS最佳化
var concat = require(&apos;gulp-concat&apos;); // 檔案合併
var del = require(&apos;del&apos;); // 清空資料夾
var runSequence = require(&apos;run-sequence&apos;); 

var public_dir = __dirname + &apos;/public&apos;;
var bundle_dir = public_dir + &apos;/bundle&apos;;
var bundle_js = bundle_dir + &apos;/js&apos;
var bundle_css = bundle_dir + &apos;/css&apos;;

gulp.task(&apos;clean&apos;, function() {
    return del([bundle_dir + &apos;/*&apos;]);
});

gulp.task(&apos;copy-js&apos;, function() {
    return gulp.src([
             public_dir + &apos;/vendors/jquery/index.js&apos;,
             public_dir + &apos;/vendors/fastclick/lib/fastclick.min.js&apos;,
             public_dir + &apos;/vendors/jquery_lazyload/jquery.lazyload.js&apos;,
             public_dir + &apos;/vendors/velocity/velocity.min.js&apos;,
             public_dir + &apos;/vendors/velocity/velocity.ui.min.js&apos;,
             public_dir + &apos;/vendors/fancybox/source/jquery.fancybox.pack.js&apos;,
             public_dir + &apos;/js/src/utils.js&apos;,
             public_dir + &apos;/js/src/motion.js&apos;,
             public_dir + &apos;/js/src/bootstrap.js&apos;,
             public_dir + &apos;/js/src/scrollspy.js&apos;,
             public_dir + &apos;/js/src/post-details.js&apos;,
             public_dir + &apos;/js/src/swig/localsearch.js&apos;,
             public_dir + &apos;/js/src/swig/achive-year.js&apos;

        ])
        .pipe(gulp.dest(bundle_js));
})

gulp.task(&apos;minify-js&apos;, function() {
    return gulp.src(bundle_js)
        .pipe(uglify())
        .pipe(gulp.dest(bundle_js));
})

gulp.task(&apos;concat-js&apos;, function() {
    return gulp.src([
             bundle_js + &apos;/index.js&apos;,
             bundle_js + &apos;/fastclick.min.js&apos;,
             bundle_js + &apos;/jquery.lazyload.js&apos;,
             bundle_js + &apos;/velocity.min.js&apos;,
             bundle_js + &apos;/velocity.ui.min.js&apos;,
             bundle_js + &apos;/jquery.fancybox.pack.js&apos;,
             bundle_js + &apos;/utils.js&apos;,
             bundle_js + &apos;/motion.js&apos;,
             bundle_js + &apos;/bootstrap.js&apos;,
             bundle_js + &apos;/scrollspy.js&apos;,
             bundle_js + &apos;/post-details.js&apos;,
             bundle_js + &apos;/localsearch.js&apos;,
             bundle_js + &apos;/achive-year.js&apos;

        ])
        .pipe(concat(&apos;all.min.js&apos;))
        .pipe(gulp.dest(bundle_dir));
});

gulp.task(&apos;copy-css&apos;, function() {
    return gulp.src([
            public_dir + &apos;/vendors/fancybox/source/jquery.fancybox.css&apos;,
            public_dir + &apos;/vendors/font-awesome/css/font-awesome.min.css&apos;,
            public_dir + &apos;/css/main.css&apos;
        ])
        .pipe(gulp.dest(bundle_css));
})

gulp.task(&apos;minify-css&apos;, function() {
    return gulp.src(bundle_css)
        .pipe(cleanCSS({
            debug: true
        }, function(details) {
            console.log(`${details.name}:[${Math.round(details.stats.efficiency *100)}%]${details.stats.originalSize}=&gt;${details.stats.minifiedSize}`);
        }))
        .pipe(gulp.dest(bundle_css));
})

gulp.task(&apos;concat-css&apos;, function() {
    return gulp.src([
            bundle_css + &apos;/jquery.fancybox.css&apos;,
            bundle_css + &apos;/font-awesome.min.css&apos;,
            bundle_css + &apos;/main.css&apos;
        ])
        .pipe(concat(&apos;advance.css&apos;))
        .pipe(gulp.dest(bundle_dir));
});

gulp.task(&apos;finish-task&apos;, function() {
    return del([bundle_js, bundle_css]);
});

gulp.task(&apos;default&apos;, function() {
    runSequence(
        &apos;clean&apos;, 
        [&apos;copy-js&apos;, &apos;copy-css&apos;], 
        [&apos;minify-js&apos;, &apos;minify-css&apos;], 
        [&apos;concat-js&apos;, &apos;concat-css&apos;],
    &apos;finish-task&apos;);
});
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/gulp-run-sequence/1.png" alt="gulp-run-sequence"></p>
<p>以上是不是很簡單就可以建立出複雜的工作事項，並且可以讓他們同步或是依序執行，彈性相當高呢!</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>官方其實有特別註明以下一段話:</p>
<blockquote>
<p>This is intended to be a temporary solution until the release of gulp 4.0 which has support for defining task dependencies in series or in parallel.</p>
</blockquote>
<p>Gulp自身也知道大家都有需要使用相依性工作的情境，而在即將推出的Gulp 4.0裡面其實已經包含了這樣的特性跟解決方法，而這也是大家非常期待的一個新功能。在還沒有正式發布前大家就先用這個套件來解決問題吧。</p>
<p>對Gulp 4.0 其他特性有興趣的朋友可以參考官方發布的<a href="https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md" target="_blank" rel="external">CHANGELOG</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NodeJS del - sDelete Files and Folder]]></title>
      <url>http://blackie1019.github.io/2016/08/17/gulp-node-del/</url>
      <content type="html"><![CDATA[<p>使用NodeJS的<a href="https://www.npmjs.com/package/del" target="_blank" rel="external">del</a>模組來協助Gulp快速地設定需清理的檔案與目錄夾</p>
<a id="more"></a>
<p>在使用Gulp時最常見的需求就是先清空目標目錄內的檔案或是將暫存檔案移除，這邊分享給大家使用del來取代fs module。</p>
<h2 id="del-基本操作"><a href="#del-基本操作" class="headerlink" title="del 基本操作"></a>del 基本操作</h2><h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><pre><code>$ npm install --save del
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>這邊示範的內容為:</p>
<ul>
<li>刪除tmp目錄下的所有.js檔案</li>
<li>但須保留unicorn.js</li>
</ul>
<p>代碼:</p>
<pre><code>var del = require(&apos;del&apos;);

del([&apos;tmp/*.js&apos;, &apos;!tmp/unicorn.js&apos;]).then(paths =&gt; {
    console.log(&apos;Deleted files and folders:\n&apos;, paths.join(&apos;\n&apos;));
});
</code></pre><h3 id="del-cli"><a href="#del-cli" class="headerlink" title="del-cli"></a>del-cli</h3><p>如果有需要透過指令來加速開發或日常使用的，可以參考<a href="https://github.com/sindresorhus/del-cli" target="_blank" rel="external">del-cli</a></p>
<p>但因為del的刪除是永久性的刪除，如果是還有可能會需要還原的可能要參考<a href="https://github.com/sindresorhus/trash-cli" target="_blank" rel="external">trash-cli</a>。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在目前的使用上我是最常拿del來幫我做gulp建置前的清除與建置後的暫存檔案清楚，確保發布的專案沒有帶到不必要的內容。</p>
<p>不同於Grunt，因為Gulp是以JavaScript為主的Task manager，所以在使用上我們就能借用NodeJS已經有的模組來開發而無須重複製造輪子。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript Object and compare with == and ===]]></title>
      <url>http://blackie1019.github.io/2016/08/16/javascript-object-compare-equal-with-value-and-reference/</url>
      <content type="html"><![CDATA[<p>在JavaScript的世界裡面應該用===來比對真實的值是否相等，而非使用==。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>會想寫這篇是因從去年看了兩本JavaScript必讀聖經後，在昨天又購入了<a href="http://www.tenlong.com.tw/items/9863470120?item_id=887445" target="_blank" rel="external">JavaScript深入精要</a>第三本聖經，第一章開宗明義地讓我了解了這些觀念，這些以前一直讓我感到困惑或是不甚理解的地方(此文章原撰寫在2014/1/4)。</p>
<h2 id="and"><a href="#and" class="headerlink" title="== and ==="></a>== and ===</h2><p>這邊參考<a href="http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm" target="_blank" rel="external">JavaScript tutorial:<br>Comparison operators
</a></p>
<h3 id=""><a href="#" class="headerlink" title="=="></a>==</h3><blockquote>
<p>The == operator will compare for equality after doing any necessary type conversions.</p>
</blockquote>
<p>寬鬆的相等性(lenient equality)，會先嘗試轉換不同型(type)的值，然後再以嚴格相等性的方式來比較它們。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h3><blockquote>
<p>The === operator will not do the conversion, so if two values are not the same type === will simply return false</p>
</blockquote>
<p>嚴格的相等性(strict equality)，只考量具有同樣型別的值是否相等。</p>
<h2 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h2><p>這邊簡單來看JS個別的判斷後就可以知道差異了</p>
<pre><code>&apos;&apos; == &apos;0&apos;           // false
0 == &apos;&apos;             // true
0 == &apos;0&apos;            // true

false == &apos;false&apos;    // false
false == &apos;0&apos;        // true

false == undefined  // false
false == null       // false
null == undefined   // true

&apos; \t\r\n &apos; == 0     // true
</code></pre><p>簡單來講 === 會測試兩個 values 的類型 (object type)，而==則是會將兩邊轉型成可以判斷的判別式後才進行比對，這會導致我們真的在做比對時容易有誤差。而我們長久以來有部分開發習慣可能是利用這個誤差來做一些判斷如:</p>
<pre><code>if(testObject){
    // do something if testObject != null
}
</code></pre><p>這邊就是用 testObject != null 這樣的判斷來進行。但常見的陷阱卻有下面這些:</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><pre><code>NaN == NaN;        // false
</code></pre><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><pre><code>2 == true;        // 2 === 1, false
2 == false;        // 2 === 0, false

1 == true;        // 1 === 1, true
0 == false;        // 0 === 0, true

&apos;&apos; == false;    // 0 === 0, true
&apos;1&apos; == true ;    // 1 === 1, true
&apos;0&apos; == false;    // 0 === 0, true
&apos;test&apos; == true    // NaN === 1, false 
</code></pre><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><pre><code>{} ==&apos;[object Objec]&apos;;    // true
[&apos;123&apos;] == 123;            // true
[] == 0;                // true
</code></pre><p>看完上面的反例相信你已經吐血了，簡單來講==根本沒有令人信服的案例。有的只是因為轉型帶來比較簡化的判斷而已。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>曾經有一派宣稱如果==能滿足需求，則使用===較為麻煩與不必要。但在某些情況你實在無法去思考到底寫這段判別式的人如果用==是已經預測到他會轉型還是根本沒料想到這樣會發生問題。當在用了比較嚴格的XXLint(ESLint, jsLint, jshint and etc…)工具後習慣用===則是大家的通識。</p>
<h2 id="JS學習推薦"><a href="#JS學習推薦" class="headerlink" title="JS學習推薦"></a>JS學習推薦</h2><p>對於JavaScript學習推薦的書籍三本書分別如下:</p>
<ul>
<li><p>JavaScript設計模式</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/A180.png" alt="JavaScript設計模式"></p>
</li>
<li><p>JavaScript優良部分</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/A302.gif" alt="JavaScript優良部分"></p>
</li>
<li><p>JavaScript深入精要</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/A367.jpg" alt="JavaScript深入精要"></p>
</li>
</ul>
<p>如果看三本沒時間或太麻煩的話，建議直接看下面這本</p>
<ul>
<li><p>Speaking JavaScript｜簡明完整的 JS 精要指南 (Speaking JavaScript)</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/22.jpg" alt="Speaking JavaScript"></p>
</li>
</ul>
<p>除此之外必讀就是Mozilla的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank" rel="external">Core JavaScript 1.5 Guide</a></p>
<p>也另外推薦兩本書可以參考:</p>
<ul>
<li><p>JavaScript高性能</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/s4538004.jpg" alt="JavaScript高性能"></p>
</li>
<li><p>Object-Oriented JavaScript - Second Edition</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/3127OT_Object%20Oriented%20JavaScript.jpg" alt="Object-Oriented JavaScript - Second Edition"></p>
</li>
</ul>
<p>最後強力推薦<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Don’t Know JS</a> 這系列的線上書籍(實體書本也有，英文已經出版，中文要等2017才會出完)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/JS_you_dont_know.png" alt="You Don&#39;t Know JS"></p>
<p>如果對JavaScript有興趣，且願意把手弄髒去了解它實際原理的非常推薦你看完這些書籍。</p>
<p>很多人知道台灣的這些學習書籍不算少但大多都入門書，扣除沒能力寫之外也沒幾個出版社願意讓這些大師們出進階的書籍(入門書的銷量就不是很好了，出進階書籍還得了…)，請用行動支持這些願意花人生短短沒幾年的時間來寫書並分享給你經驗的大師，有他們的付出我們才能站在巨人的肩上看得更高更遠。</p>
<p>P.S. 大師包含國外與國內這些願意寫書分喜的作家們</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Isomorphic Javascript with React and NodeJS]]></title>
      <url>http://blackie1019.github.io/2016/08/15/isomorphic-javascript-with-react-and-nodejs/</url>
      <content type="html"><![CDATA[<p>Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/building-isomorphic-javascript-apps-ndc-2015-12-638.jpg" alt="header-img"></p>
<blockquote>
<p>Isomorphic JavaScript apps are JavaScript applications that can run both client-side and server-side.<br>The backend and frontend share the same code.</p>
</blockquote>
<p>Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構。 此外，Isomorphism的好處有:</p>
<ol>
<li>Faster Perceived Load Times + Better Global UX</li>
<li>Search Engine Indexability</li>
<li>Easier Code Maintenance</li>
</ol>
<p>使用這樣架構最有名的案例則是<a href="http://www.slideshare.net/spikebrehm/the-evolution-of-airbnbs-frontend/56" target="_blank" rel="external">Airbnb</a>本身的產品。</p>
<h2 id="How-to-make-a-web-application"><a href="#How-to-make-a-web-application" class="headerlink" title="How to make a web application"></a>How to make a web application</h2><p>在看開始新的架構時我們先回頭看一下一個網頁應用程式不能或缺的三元素為:</p>
<ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
</ul>
<p>如果是動態網頁需要一些資料處理的能力大就需要再結合後端的程式來幫我們，所以原本的架構就會疊加一個後端的語言(C# or Java or PHP or Ruby or Python or Go..etc)。但如果稍微大型的網頁應用程式在開發上多少都會使用網頁框架來加速與統一開發，如Xuenn使用的.Net MVC或Web form，而這樣又帶入了一個頁面語言Razer或是Web page, 結果則是變成下面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/Front-end.png" alt="front-end"></p>
<p>如先前說的Reuse實務上太難達到了，但如果能透過JavaScript幫忙統一後端開發與頁面使用的開發語言，這樣就可以幫我們重新使用我們已經會的技術與經驗來替換掉C#與Razer/Web pages，可以讓開發少點重複但不同語言的學習，多花時間用同一語言與經驗處理實際且進階的應用。 而架構也會變成如此:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/front-end2.png" alt="front-end2"></p>
<p>我們有了可以Shared的Library，縮減Frontend與Backend開發重複功能的時間也避免了重複犯錯的機會，而Back-end這邊則是可以沿用JavaScript這個語言，用同一個開發語言除了減少學習上的分歧也代表我們能沿用這個語言大部分的解決方案(如最佳化, 測試與部屬等等)，而這也讓我們回歸到最基本的網頁應用程式的三個基礎元素。</p>
<p>接下來我們就從架構到實作一步一步的應用NodeJS與ReactJS來幫我們做出第一個Isomorphic web application.</p>
<h2 id="Technical-Overview"><a href="#Technical-Overview" class="headerlink" title="Technical Overview"></a>Technical Overview</h2><h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h3><p>ReactJS是Facebook打造的framework，專注於解決view的問題，透過Virtual DOM 與單一流向的方式來加速與減少前端開發的問題。以往我們所知用更改一個DOM的Element來呈現畫面改變的這個方法在大型頻繁更新的網站上面是非常可怕的效能瓶頸。可以看到的是ReactJS要解決的是Web開發上面UI呈現的問題，隨者網頁功能越多與越多人互相使用與交流，FB遇到越來越多需要在同一個頁面即時更新的情況，ReactJS就是因此而誕生的一個Framework．</p>
<p>整理以下有幾個的優點:</p>
<ul>
<li>模組化的設計：提高了程式碼的複用性、並且很好地隔離了不同組件的程式碼</li>
<li>提倡單向資料流：無論是Flux或Redux都可將資料與業務邏輯很好的分離</li>
<li>聲明式風格：可讀性高，可以很直覺地透過 Render() 函數的內容來想像頁面是如何被組成的</li>
<li>讓 Server-Side Rendering 這件事變成可能：Isomorphic Web Design, SEO</li>
<li>React Native 統一了行動開發，同時保有原生 APP 的體驗</li>
</ul>
<p>React是一個以JavaScript為主打照的語言，而這也產生一種為JSX的開發語言。當然有人對JavaScript裡面包含HTML這種寫法是非常感冒的，這邊就是要稍微遷就一下了。</p>
<p><em>提醒一下JSX只是一種選項，並非開發ReactJS一定要用JSX。</em></p>
<h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><p>NodeJS本身透過HTTP模組已經可以簡單地去做網頁相關處理，但對於一個較為複雜的網站還是會建議額外加裝網頁應用程式模組，減少重複的開發。這邊我們使用NodeJS上面最常使用的Express作為我們的開發的框架，幫我們架設起第一個NodeJS網站。 如果考慮使用ES6/7，也推薦KOA這個框架。</p>
<h3 id="Express-react-views"><a href="#Express-react-views" class="headerlink" title="Express-react-views"></a>Express-react-views</h3><p>Jade模組是Express.js預設的模版引擎(Template Engine)。Jade最大的特點是語法非常的優雅，這是優點同時也是缺點。因為學習曲線較陡（跟HTML差挺多的），而且難以與其他人（像只懂HTML的設計人員）溝通。所以很多人喜歡把Jade換成更接近HTML的模版引擎，這邊我們會改用React來統一所有跟View相關的使用。</p>
<p>這邊我們使用<a href="https://github.com/reactjs/express-react-views" target="_blank" rel="external">Express-react-views</a> 作為範例。</p>
<p>沒錯，減少Server Side還要學習Jade語言而直接使用React，這也我們其中一個Isomorphic的地方。</p>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/webpack-module-bundler.png" alt="webpack"></p>
<p><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a> 是一個模組打包工具（module bundler），主要功能： </p>
<ul>
<li>將 CSS、圖片與其他資源打包 </li>
<li>打包之前預處理（Less、CoffeeScript、JSX、ES6 等）的檔案 </li>
<li>依 entry 文件不同，把 .js 分拆為多個 .js 檔案</li>
<li>支援熱模組(Hot Module)做即時動態更新，減少開發時繁複的建置時間與步驟 </li>
<li>整合豐富的 loader 可以使用</li>
<li>整合grunt, gulp, bower, karma等前端套件工具</li>
</ul>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/babel.png" alt="babel"></p>
<blockquote>
<p>The compiler for writing next generation JavaScript</p>
</blockquote>
<p>這就是Babel主要的使命，而這邊我們使用它來幫我們達到前端開發模組化的功能，因為NodeJS本身已經有模組化的架構了，但ReactJS則需要透過外部套件來幫助它做到這點。而它所帶來的ECMA6的語言特性與其他好處不在此篇多做說明。</p>
<h2 id="Play-by-Steps"><a href="#Play-by-Steps" class="headerlink" title="Play by Steps"></a>Play by Steps</h2><p>在開始前我們先簡單的描述一下我們要做出來的成品所需要符合的需求,</p>
<ul>
<li>後端:網頁title需顯示該網站建立的時間</li>
<li>前端:頁面顯示時間變化</li>
<li>兩者時間格式必須相同</li>
</ul>
<h3 id="懶人DEMO"><a href="#懶人DEMO" class="headerlink" title="懶人DEMO"></a>懶人DEMO</h3><ol>
<li><ul>
<li>複製程式庫 :<strong> <em><a href="https://github.com/blackie1019/Isomorphic-JavaScript-Example.git" target="_blank" rel="external">https://github.com/blackie1019/Isomorphic-JavaScript-Example.git</a></em></strong></li>
</ul>
</li>
<li><ul>
<li>安裝套件 : <strong><em>npm install</em></strong></li>
</ul>
</li>
<li><ul>
<li>啟動node : <strong><em>npm start</em></strong></li>
</ul>
</li>
<li><ul>
<li>打開瀏覽器瀏覽 : <strong><em><a href="http://localhost:9527" target="_blank" rel="external">http://localhost:9527</a></em></strong></li>
</ul>
</li>
</ol>
<h3 id="Setup教學"><a href="#Setup教學" class="headerlink" title="Setup教學"></a>Setup教學</h3><p><strong><em>以下指令如果在Windows環境下操作，建議執行在Git BASH上面，避免Windows不支援</em></strong></p>
<p>首先先到NodeJS官網下載並安裝，安裝完後在Command Line確認一下版本</p>
<pre><code>$ node -v
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/node%20version.png" alt="node-v"></p>
<p>如果看到有正確的回應版本即代表安裝成功。 接者我們就透過指令並依序輸入資訊(或按enter帶入預設即可)後建立我們的package.json檔案</p>
<pre><code>$ npm init
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/packagejson.png" alt="package.json"></p>
<h4 id="一鍵安裝指令如下"><a href="#一鍵安裝指令如下" class="headerlink" title="一鍵安裝指令如下"></a>一鍵安裝指令如下</h4><pre><code>$ npm install --save express-react-views react react-dom express
</code></pre><h4 id="或是我們一步步解說"><a href="#或是我們一步步解說" class="headerlink" title="或是我們一步步解說:"></a>或是我們一步步解說:</h4><p>接著用NPM來安裝Express模組(安裝 Node 模組時，如果指定了 –save 選項，則會將這些模組新增至 package.json 檔中的 dependencies 清單。之後，當您在該目錄中執行 npm install 時，就會自動安裝相依關係清單中的模組)。</p>
<pre><code>$ npm install express --save
</code></pre><p>我們這邊要修改一下scripts裡面的test，讓我們執行test指令的時候可以幫我們成功運行NodeJS指定的主程式</p>
<pre><code>&quot;test&quot;: &quot;node app.js&quot;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/addexpress.png" alt="addexpress"></p>
<p>接著我們新增一個app.js的檔案作為我們預設的主程式，在這邊我們先簡單用3000 port來起一個Express網頁程式並顯示Hello World!</p>
<pre><code>var express = require(&apos;express&apos;);
var app = express();

app.get(&apos;/&apos;, function (req, res) {
  res.send(&apos;Hello World!&apos;);
});

app.listen(3000, function () {
  console.log(&apos;Example app listening on port 3000!&apos;);
});
</code></pre><p>然後我們回到Command Line輸入透過前面設定好的test指令將我們的Express運行起來</p>
<pre><code>$ npm test
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/helloworld.png" alt="helloworld"></p>
<p>最後我們安裝ReactJS套件，這邊要安裝react與react-dom</p>
<pre><code>$ npm install --save react react-dom
</code></pre><p>然後我們新增一個index.html並放入以下內容後儲存，這邊我們可以直接透過瀏覽器先檢視一下呈現是否如預期</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;React Test&lt;/title&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
    &lt;script&gt;
        var Demo = React.createClass({
                displayName: &quot;HelloMessage&quot;,
                render: function() {
                    return React.createElement(&quot;div&quot;, null, &quot;Hello, world!I am a React App &quot;, null);
                }
            }),
            mountNode = document.getElementById(&apos;app&apos;);

        React.render(React.createElement(Demo, null), mountNode);
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/reacthelloworld.png" alt="helloworld"></p>
<p>目前我們已經成功的把Express與ReactJS分別成功執行了，接下我們就來調整一下把他們合為一體吧。</p>
<p>首先我們稍微調整一下我們目錄結構，讓它們可以分別註冊在不同的資料夾內自動繫結到我們的專案中，請直接參考Express的<a href="http://expressjs.com/en/starter/generator.html" target="_blank" rel="external">Express application generator</a>，以下為建立出來的結構。</p>
<p>接著安裝Express-react-views套件並修改一下原本的app.js，將Express設定ReactJS當作加入的view engines修改內容如下:</p>
<pre><code>$ npm install --save Express-react-views
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/reactappjs.png" alt="expressreactview"></p>
<p>在原本的app.js中移除Jade並加入react為預設View Engine</p>
<pre><code>app.set(&apos;view engine&apos;, &apos;jsx&apos;);
app.engine(&apos;jsx&apos;, require(&apos;express-react-views&apos;).createEngine());
</code></pre><p>將我們剛剛寫的index.html寫成jsx放到views下面</p>
<pre><code>var React = require(&apos;react&apos;);

var AppComponent = React.createClass({
    render: function() {
        return (
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                        &lt;title&gt;React Test&lt;/title&gt;
                        &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
                        &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
                        &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
                        &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                        &lt;div id=&quot;app&quot;&gt;
                        &lt;/div&gt;
                        &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/demo.jsx&quot;&gt;&lt;/script&gt;   
                    &lt;/body&gt;
                &lt;/html&gt;
            );
    }
});

module.exports = AppComponent;
</code></pre><p>接著我們再來組合先前的HelloMessage component轉換成jsx格式，並將原本的內容貼入後做下面修改後存至demo.jsx:</p>
<pre><code>var Demo = React.createClass({
    render: function() {
        return (
               &lt;div&gt;
                    Hello, world!I am a React App.
                &lt;/div&gt;
            );
    }
});

ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&apos;app&apos;));
</code></pre><p>檢視一下我們的Package.json最後的樣子</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/packagejson2.png" alt="package2.json"></p>
<p>開發需求前我們重新檢視一下目前的專案結構</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/Folder.png" alt="folder"></p>
<p>到這邊，我們已經從無到有的建立了專案的底層，接下來就讓我們來開發這次的需求吧</p>
<h3 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h3><p>這邊只有一個需求是將目前的時間顯示到html的title裡面，這邊我們會使用javascripts目錄裡面的date-helper.js來幫我們。</p>
<pre><code>&apos;use strict&apos;;
var helper = {};
helper.getShortDatetime = function() {
    var datetime = new Date();
    return [datetime.getFullYear(),
        (datetime.getMonth() + 1),
        datetime.getDate()
    ].join(&apos;/&apos;) + &apos; &apos; + [
        datetime.getHours(),
        datetime.getMinutes(),
        datetime.getSeconds()
    ].join(&apos;:&apos;);
}

module.exports = helper;
</code></pre><p>將寫的元件引入直接使用<strong>getShortDatetime</strong>來顯示在title後面，修改index.jsx內容如下:</p>
<pre><code>var React = require(&apos;react&apos;);
var dateHelper = require(&apos;../public/javascripts/date-helper&apos;);

var IndexView = React.createClass({
       render: function() {
           return (
                   &lt;html&gt;
                       &lt;head&gt;
                           &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                           &lt;title&gt;{dateHelper.getShortDatetime()} &lt;/title&gt;
                           &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
                           &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
                           &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
                           &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                       &lt;/head&gt;
                       &lt;body&gt;
                           &lt;div id=&quot;app&quot;&gt;
                           &lt;/div&gt;
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/date-helper.js&quot;&gt;&lt;/script&gt;  
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/demo.jsx&quot;&gt;&lt;/script&gt;   
                       &lt;/body&gt;
                   &lt;/html&gt;
               );
       }
   });

module.exports = IndexView;
</code></pre><p>接著再次將網站運行就可以發現title已經被置換了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/title.png" alt="title"></p>
<h3 id="Frontend"><a href="#Frontend" class="headerlink" title="Frontend"></a>Frontend</h3><p>這邊我們同樣將date-helper.js載入後在demo.jsx頁面上顯示我們的時間，內容如下:</p>
<pre><code>var dateHelper = require(&apos;./date-helper.js&apos;);
var Demo = React.createClass({

    getInitialState: function() {
        return {
            dateTime : dateHelper.getShortDatetime()
        };
    },

    render: function() {
        return (
                &lt;div&gt;
                    &lt;p&gt;
                        Hello, world!I am a React App.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Time : {this.state.dateTime}
                    &lt;/p&gt;
                &lt;/div&gt;
            );
    }
});

ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&apos;app&apos;));
</code></pre><p>這次卻出現了JS Error</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/module%20error.png" alt="error"></p>
<p>主要是因為模組化是NodeJS預先就有支援的架構，但ReactJS如果要支援這樣的架構需要透過其他方式達成。這邊示範用Webpack來達成。</p>
<h3 id="加入Webpack與Babel"><a href="#加入Webpack與Babel" class="headerlink" title="加入Webpack與Babel"></a>加入Webpack與Babel</h3><p>安装 Webpack：</p>
<pre><code>npm install -g webpack
</code></pre><p>Webpack 會載入 webpack.config.js 的設定文件來執行。 如果要編譯 JSX，則需安装對應的 loader，這邊我們使用babel-loader與react-hot-loader:     </p>
<pre><code>npm install babel-core babel-loader babel-preset-es2015 babel-preset-stage-0 babel-preset-react react-hot-loader --save-dev
</code></pre><p>新增一份 webpack.config.js ，並將 loaders 指定 babel-loader 編譯副檔名為 .js 或者 .jsx 的檔案，這樣你就可以在這兩種類型的文件中自由使用 JSX 和 ES6 了(這邊避免脫離主題暫時先不講ES6)。</p>
<pre><code>var path = require(&apos;path&apos;);

module.exports = {
    entry: &apos;./src/entry.js&apos;,
    output: {
        path: path.join(__dirname, &apos;/public/javascripts&apos;),
        filename: &apos;bundle.js&apos;
    },
    resolve: {
        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]
    },
    module: {
        loaders: [
            { 
                test: /\.js|jsx$/, 
                exclude: /(node_modules)/, 
                loaders: [
                        &apos;react-hot&apos;,
                        &apos;babel?presets[]=stage-0,presets[]=react,presets[]=es2015&apos;
                    ]
            }
        ]
    }
}
</code></pre><p>接者我們調整一下我們的demo.jsx與date-help.js的路徑，並修改一下載入的位置</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/Folder2.png" alt="folder2"></p>
<p>entry.js則是我們希望webpack載入的入口，這邊我們可以開始加入我們的套件讓他做載入</p>
<pre><code>require(&apos;react&apos;);
require(&apos;react-dom&apos;);
require(&apos;./components/demo.jsx&apos;);
require(&apos;./helper/date-helper.js&apos;);
</code></pre><p>設定完成後可以執行webpack看一下是否正確產出bundle.js到指定目錄</p>
<pre><code>webpack 
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/webpack%20success.png" alt="webpack"></p>
<p>或是監聽編譯指令，動態載入編譯來加速開發</p>
<pre><code>webpack -d --watch
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/webpack%20watch%20success.png" alt="webpack watch"></p>
<p>當編譯成功後我們在使用npm start來啟動我們的網頁看一下畫面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/react%20using%20helper.png" alt="page"></p>
<p>因為我們這邊已經將frontend所有js/jsx打包成一個bundle.js，所以我們也可以將原本index.jsx所載入的套件移除了</p>
<pre><code>var React = require(&apos;react&apos;);
var dateHelper = require(&apos;../src/helper/date-helper&apos;);

var IndexView = React.createClass({
       render: function() {
           return (
                   &lt;html&gt;
                       &lt;head&gt;
                           &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                           &lt;title&gt;{dateHelper.getShortDatetime()} &lt;/title&gt;
                           &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                       &lt;/head&gt;
                       &lt;body&gt;
                           &lt;div id=&quot;app&quot;&gt;
                           &lt;/div&gt;
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/bundle.js&quot;&gt;&lt;/script&gt;   
                       &lt;/body&gt;
                   &lt;/html&gt;
               );
       }
   });

module.exports = IndexView;
</code></pre><h3 id="Updated-On-The-Fly"><a href="#Updated-On-The-Fly" class="headerlink" title="Updated On The Fly"></a>Updated On The Fly</h3><p>這次我們要加入ReactJs的更新事件，讓時間動態在頁面更新。內容如下:</p>
<pre><code>var React = require(&apos;react&apos;);
var ReactDOM = require(&apos;react-dom&apos;);
var dateHelper = require(&apos;../helper/date-helper.js&apos;);

var Demo = React.createClass({

    getInitialState: function() {
        return {
            dateTime : dateHelper.getShortDatetime()
        };
    },

    tick: function() {
        console.log(&apos;test&apos;);
        this.setState({dateTime : dateHelper.getShortDatetime()});
    },

    componentDidMount: function() {
        this.interval = setInterval(this.tick, 1000);
    },

    componentWillUnmount: function() {
        clearInterval(this.interval);
    },

    render: function() {
        return (
                &lt;div&gt;
                    &lt;p&gt;
                        Hello, world!I am a React App.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Time : {this.state.dateTime}
                    &lt;/p&gt;
                &lt;/div&gt;
            );
    }
});
</code></pre><p>ReactDOM.render(<demo>, document.getElementById(‘app’));</demo></p>
<p>最後我們把我們的webpack整合到npm start指令裡面，稍微修改一下package.json如下:</p>
<pre><code>&quot;scripts&quot;: {
    &quot;start&quot;: &quot;webpack &amp;&amp; node ./bin/www&quot;
 }
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/packagejson3.png" alt="update start"></p>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>過程當中我們只運用了兩種語言HTML+JavaScript幫我們完成所有的功能，而其中我們學習如何使用Express與ReactJS這兩個框架以及運用統一的模組化方法Webpack+Babel協助我們開發，而這些都只專注在使用一種語言 - JavaScript。</p>
<h2 id="Isomorphic-JavaScript-VS-Universal-JavaScript"><a href="#Isomorphic-JavaScript-VS-Universal-JavaScript" class="headerlink" title="Isomorphic JavaScript VS Universal JavaScript"></a>Isomorphic JavaScript VS Universal JavaScript</h2><p>使用同一個開發語言做到跨類型的應用程式開發也是Universal JavaScript的核心精神。</p>
<p>不同於Isomorphic JavaScript所強調網頁開發前後端的<em>共構部分</em>可以抽出來被重複使用，Universal JavaScript希望除了網頁應用程式之外，手機或是桌面應用程式是否也可以應用同一個語言做開發，減少跨語言的障礙並且加速開發。</p>
<p>而JavaScript也同時能達到這兩個架構與精神，有興趣的朋友除了瞭解本篇的NodeJS與ReactJS外以下提供不同情境的整理了幾個Framework可以參考:</p>
<h3 id="For-Mobile-Application-Android-iOS"><a href="#For-Mobile-Application-Android-iOS" class="headerlink" title="For Mobile Application(Android, iOS)"></a>For Mobile Application(Android, iOS)</h3><ul>
<li><a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a><ul>
<li>Learn once, write Web and mobile apps with React</li>
<li>Built on React Native: Facebook(iOS, Android), Facebook Ads Manager(iOS, Android), QQ(Android), CBS Sports Franchise Football(Android)…etc</li>
</ul>
</li>
</ul>
<h3 id="For-Disktop-Application-Windows-Mac-Linux"><a href="#For-Disktop-Application-Windows-Mac-Linux" class="headerlink" title="For Disktop Application(Windows, Mac, Linux)"></a>For Disktop Application(Windows, Mac, Linux)</h3><ul>
<li><a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a><ul>
<li>Ship more with less code, Build apps for any device, Integrate technologies you already use</li>
<li>Built on Electron: Atom, Slack, VS Code, Kitematic, Postman…etc </li>
</ul>
</li>
</ul>
<p>是的，跟其他同類型的framework相比，從上面幾個開發出來的Application看來這些技術不是只用在demo或是POC而已!</p>
<p>如果對於React Native有興趣可以參考最近網友分享的這篇文章</p>
<ul>
<li><a href="http://blog.blackbing.net/post/2016/07/24/we-developed-cnyes-app-with-react-native" target="_blank" rel="external">我們用 react-native 開發鉅亨網 app</a></li>
</ul>
<p>想一步步把ReactJS學好的朋友可以關注<a href="https://kdchang.gitbooks.io/react101/" target="_blank" rel="external">從零開始學 ReactJS（ReactJS 101）</a>，作者群之後會陸續從開發環境到開發流程都一步步地帶你學習。</p>
<h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/go%20home.jpg" alt="gohome"></p>
<p>Isomorphic JavaScript的架構則沿用了這樣的精神幫我們整合前後端開發把可以共用的程式重用來達到Do less but get more(=&gt;多點穩定+少點線上支援+早點回家).</p>
<p>這邊也推薦一個台灣Nodejs好手自己寫的isomorphic框架給大家，<a href="http://fred-zone.blogspot.tw/2015/11/lantern-isomorphic.html" target="_blank" rel="external">Lantern 專案：快速打造屬於自己的 Isomorphic 網站服務</a></p>
<p>如果你的專案是用Angular2開發的也別擔心，這邊也有一個官方結合NodeJS或Asp.net Core的類Isomophic框架可以參考，<a href="https://github.com/angular/universal" target="_blank" rel="external">Universal Angular 2</a>.</p>
<p>在現代網頁應用程式開發裡，JavaScript的重要性越來越高了。從一開始的腳本語言讓外人搞不清楚與Java的差別，而後幫我們處理簡單的網頁呈現的邏輯與簡單的操作跑馬燈效果或是畫面驗證等邏輯，經過了jQuery的興起讓我們知道原來光靠JavaScript我們就能幫網頁做到這麼多效果與彈性，而到2009年NodeJS的出現後有不少的企業將他們的網站的後端服務改用JavaScript來取代PHP, Python, Ruby等Interpreted language為了達到同一個開發語言來加速應用，加上Angular與React等front-end framework的出現讓我們更有方法的在開發應用程式。</p>
<p>Isomorphic 一直是 Node.js 開發者的夢想，如果有一個全新的專案需要做網頁應用程式且希望用JavaScript當作主要的開發語言的話不妨就試試看這樣的架構吧!</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/" target="_blank" rel="external">Airbnb: Isomorphic JavaScript: The Future of Web Apps</a></li>
<li><a href="https://strongloop.com/strongblog/node-js-react-isomorphic-javascript-why-it-matters/" target="_blank" rel="external">How to Implement Node + React Isomorphic JavaScript &amp; Why it Matters</a></li>
<li><a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js" target="_blank" rel="external">Build A Real-Time Twitter Stream with Node and React.js</a></li>
<li><a href="https://medium.com/@ghengeveld/isomorphism-vs-universal-javascript-4b47fb481beb#.igikqp97e" target="_blank" rel="external">Isomorphism vs Universal JavaScript</a></li>
<li><a href="http://jmfurlott.com/tutorial-setting-up-a-simple-isomorphic-react-app/" target="_blank" rel="external">Tutorial: Setting Up a Simple Isomorphic React app</a></li>
<li><a href="https://bensmithett.github.io/going-isomorphic-with-react/" target="_blank" rel="external">Going isomorphic with react</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitLab Build up]]></title>
      <url>http://blackie1019.github.io/2015/11/05/gitlab-setup/</url>
      <content type="html"><![CDATA[<p>This is a step by step tourist for how to build up a GitLab from Bitnami VM</p>
<a id="more"></a>
<h2 id="GitLab-from-Bitnami"><a href="#GitLab-from-Bitnami" class="headerlink" title="GitLab from Bitnami"></a>GitLab from Bitnami</h2><p><a href="https://bitnami.com/stack/gitlab/virtual-machine" target="_blank" rel="external">Download</a></p>
<p><a href="https://wiki.bitnami.com/Applications/BitNami_GitLab?highlight=gitlab" target="_blank" rel="external">Wiki - BitNami GitLab</a></p>
<h2 id="General-Setup"><a href="#General-Setup" class="headerlink" title="General Setup"></a>General Setup</h2><ol>
<li><p>Update your apache for GitLab host to example.com</p>
<pre><code>$ sudo /opt/bitnami/apps/gitlab/bnconfig --machine_hostname example.com
</code></pre></li>
<li><p>Add example.com to host</p>
<pre><code>127.0.0.1    example.com
</code></pre></li>
<li><p>Update GitLab setting to correct host display</p>
<pre><code>$ sudo vi /opt/bitnami/apps/gitlab/htdocs/config/gitlab.yml
host: example.com
</code></pre></li>
<li><p>restart(need do this action once configuration change)</p>
<pre><code>$ sudo /opt/bitnami/ctlscript.sh restart
</code></pre></li>
</ol>
<h2 id="SSH-Setup"><a href="#SSH-Setup" class="headerlink" title="SSH Setup"></a>SSH Setup</h2><ol>
<li><p>Server open SSH setting</p>
<pre><code>$ sudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf
$ sudo start ssh
</code></pre></li>
<li><p>VM open port forwarding</p>
<p> Setting&gt;Network&gt;Port Forwarding</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Git%26GitLab/Port%20Forwarding.png" alt="port"></p>
</li>
<li><p>Client generate Key-pairs</p>
<ul>
<li><p>Linux &amp; Mac</p>
<pre><code>$ sudo ssh-keygen
</code></pre></li>
<li><p>Windows</p>
<p>  <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">PuTTY</a></p>
</li>
</ul>
</li>
<li><p>Bidning Public key to GitLab account</p>
<p> SSH Keys&gt;Add</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Git%26GitLab/ssh%20public.png" alt="SSH public"></p>
</li>
<li><p>Open SourceTree and clone with SSH protocal</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Git%26GitLab/Clone%20with%20ssh.png" alt="Clone wih SSH"></p>
<p> <em>Windows need add private key to computer first, can use <a href="http://the.earth.li/~sgtatham/putty/latest/x86/pageant.exe" target="_blank" rel="external">Pageant</a></em></p>
</li>
</ol>
<h2 id="Get-file-from-Host-to-Client-VM-using-SSH-protocal"><a href="#Get-file-from-Host-to-Client-VM-using-SSH-protocal" class="headerlink" title="Get file from Host to Client VM using SSH protocal"></a>Get file from Host to Client VM using SSH protocal</h2><ul>
<li>Mac &amp; Windows<br>  <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwiN5OSiz_nIAhUGXqYKHZMABNQ&amp;url=https%3A%2F%2Ffilezilla-project.org%2Fdownload.php&amp;usg=AFQjCNEVBwvn5iTFmb5JyjzLrD0yKQsMGg&amp;sig2=dep538VPLoemq1TctetF6g" target="_blank" rel="external">FileZilla - Client</a></li>
<li>Windows<br>  <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwjv1vHDz_nIAhXlJKYKHRzKCFs&amp;url=https%3A%2F%2Fwinscp.net%2Feng%2Fdownload.php&amp;usg=AFQjCNFGy0DbS4A__xFv8ToHgJYyYD3BOw&amp;sig2=HHP95wNoiU9FmIfyCVCzww" target="_blank" rel="external">WinSCP</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FLUX架構介紹]]></title>
      <url>http://blackie1019.github.io/2015/04/13/flux-intro/</url>
      <content type="html"><![CDATA[<p>FLUX是一個由Facebook提出來的開發架構(FLUX 是一個 Pattern 而不是一個正式的框架)，目的是在解決所謂的MVC在大型商業網站所存在的問題，把沒有條理跟亂七八糟的架構做一個流程規範的定義。</p>
<a id="more"></a>
<h2 id="About-FLUX"><a href="#About-FLUX" class="headerlink" title="About FLUX"></a>About FLUX</h2><p>以下內容參考<a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">What is Flux?</a> 這篇的介紹很多，有興趣請先到原文出處學習與感謝分享。</p>
<p>這邊先提到一下兩個主軸:</p>
<h3 id="FLUX希望作到的事情"><a href="#FLUX希望作到的事情" class="headerlink" title="FLUX希望作到的事情"></a>FLUX希望作到的事情</h3><ul>
<li>Use explicit data instead of derived data</li>
<li>Separate data from view state</li>
</ul>
<h3 id="FLUX希望帶來的好處"><a href="#FLUX希望帶來的好處" class="headerlink" title="FLUX希望帶來的好處"></a>FLUX希望帶來的好處</h3><ul>
<li>Improved data consistency</li>
<li>Easier to pinpoint root of a bug</li>
<li>More meaingful unit tests</li>
</ul>
<p>解說可以看一下這部影片Facebook官方用自己的網站解說FLUX的起源與MVC在FB遇到的問題(24分前是FLUX, 24後是ReactJS)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nYkdrAPrdcw?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v" frameborder="0" allowfullscreen></iframe>

<h2 id="MVC與遇到的問題"><a href="#MVC與遇到的問題" class="headerlink" title="MVC與遇到的問題"></a>MVC與遇到的問題</h2><p>在介紹FLUX前，先讓大家了解一下目前普遍在使用的MVC架構</p>
<p><img src="http://fluxxor.com/images/mvc-simple.png" alt="A simple MVC flow"></p>
<p>上面這是一個MVC架構所定義的流程與各流程的內容, 我們將一個網頁程式分為三項組成的要素:</p>
<ul>
<li>Controller</li>
<li>Model</li>
<li>View</li>
</ul>
<p>MVC普遍被大家用在目前的網站開發專案當中，因為它簡單方便的幫我們分別定義了各層需要異動的地方，把關注點隔離開來(separation of concerns，SOC)。但隨這著專案的Controller,Model與View變多沒有限制的流程也讓他產生了一些問題。</p>
<p><img src="http://fluxxor.com/images/mvc-complex.png" alt="A more complex MVC flow"></p>
<p>而上面是一個複雜的MVC流程，這也是比較貼近我們實務上大家遇到的架構</p>
<p>比較起來很快就發現了一點，當我們功能越多，提供的Controller, Model, View關聯愈複雜時，往往會忘了哪一個連去哪一個，這會讓我們的架構定義的越來越發散，久了就不知道什麼才是正確的架構，而這也會讓我們難以維護跟修改，甚至擴大了測試範圍…。</p>
<p>傳統的雙向資料綁定會造成連鎖更新，不容易去預測一個單一互動所造成的改變結果，這也是為什麼擴大了測試範圍的原因。<br>原文如下:</p>
<blockquote>
<p>We found that two-way data bindings led to cascading updates, where changing one object led to another object changing, which could also trigger more updates. As applications grew, these cascading updates made it very difficult to predict what would change as the result of one user interaction. When updates can only change data within a single round, the system as a whole becomes more predictable.</p>
</blockquote>
<h2 id="FLUX介紹"><a href="#FLUX介紹" class="headerlink" title="FLUX介紹"></a>FLUX介紹</h2><p>接著我們先來介紹FLUX的中心思想打造單一的資料流進行方式(one-way data flow)，相對於MVC只定義了三個角色的功能與關係，FLUX更明確的定義了一個資料進行的方式，使得大家更容易遵守規則。</p>
<ul>
<li>####Actions<ul>
<li>Helper methods that facilitate passing data to the Dispatcher</li>
</ul>
</li>
<li>####Dispatcher<ul>
<li>Receives actions and broadcasts payloads to registered callbacks</li>
</ul>
</li>
<li>####Stores<ul>
<li>Containers for application state &amp; logic that have callbacks registered to the dispatcher</li>
</ul>
</li>
<li>####Controller Views&amp;View  <ul>
<li>React Components that grab the state from Stores and pass it down via props to child components.</li>
</ul>
</li>
</ul>
<p>這邊FLUX使用了Dispatcher這樣的一個唯一物件(singleton)來管理一到多個Store，而每個Store可對應一個View的概念來提供呈現所需資料，而當需要增加view的互動功能時，則透過向Dispatcher註冊Action的方式來達到事件的觸發。 整個資料的處理流程就改變為下面的樣貌：</p>
<p><img src="http://fluxxor.com/images/flux-simple.png" alt="A simple flux flow"></p>
<p>這邊要注意，因為FLUX的大前提是建立一個單一的資料進行方式，所以非常不建議為了view的顯示而跳過步驟直接修改Store，這樣又會讓架構跟先前的MVC提的遇到一樣不明確的問題。</p>
<p>與頁面上各控制項的互動如下圖</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/FLUX%2BReactJS/01/FLUX%20flow.png" alt="FLUX control flow"></p>
<p>在FLUX架構上，要避免從Store外部直接改變Store。我們可以透過使用 window.DispatchEvent 送出CustomEvent的方式，並在Store中接收CustomEvent來做到。 簡單來講就是維持他單一變化的flow，避免架構上出現壞味道。</p>
<h2 id="Cowork-with-Web-service"><a href="#Cowork-with-Web-service" class="headerlink" title="Cowork with Web service"></a>Cowork with Web service</h2><p>這邊找到一張先前看到的完整解釋FLUX架構如何跟Web Service的流程圖，下圖顯示了一個資料如何從Web service拿到後到畫面顯示以及如何互動去取得其他資料來呈現。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/FLUX%2BReactJS/01/archieture.png" alt="with service"></p>
<h2 id="手工打造FLUX架構"><a href="#手工打造FLUX架構" class="headerlink" title="手工打造FLUX架構"></a>手工打造FLUX架構</h2><p>這邊就用JS原生的語法來建立一個簡單的FLUX架構的範例吧</p>
<p><a class="jsbin-embed" href="http://jsbin.com/sutuku/20/embed?js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>上面這範例是參考Gasolin大大的文章實作的，請參考<a href="http://blog.gasolin.idv.tw/2014/11/flux-javascript.html" target="_blank" rel="external">使用 FLUX 架構的概念，漸進改善一般 Javascript 程式碼的組織方式</a>這篇好文。</p>
<p>從範例來看Store 與 App 可以分開來測試，這對大型App是很重要的，每個測試環節應該確保該function可以運作。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看起來FLUX真的很單純，用事件註冊與驅動指派的方式來統一管理資料處理的流程，不讓架構在大量增加時有所崩壞，而且應該可以是一種蠻適合JS的開發模式，又可透過原生的JS實作(無論你用什麼框架應該都可以實作)。</p>
<p>在FLUX架構下，搭配View這邊頻繁DOM異動的做法就是Always Re-render! 這也是FB搭配FLUX推出的另外一個JS框架<a href="https://facebook.github.io/react/" target="_blank" rel="external">ReactJS</a>提出Virtual DOM的概念，When data changes, React re-renders the component 透過這樣的方式來改善頻繁的DOM異動。</p>
<p>如果對FLUX有心得的朋友也麻煩指導小弟一下，看看是不是有什麼誤解，也感謝大家的指教。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">What is Flux?</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/05/facebook-mvc-flux" target="_blank" rel="external">Facebook：MVC不适合大规模应用，改用Flux</a></li>
<li><a href="http://blog.roy.tw/2015/02/05/introduction-of-flux" target="_blank" rel="external">Flux 介紹教學</a></li>
<li><a href="http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html" target="_blank" rel="external">Flux: Actions and the Dispatcher</a></li>
<li><a href="https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture" target="_blank" rel="external">Getting to know FLUX the React js architecture</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[function expression(函式陳述式) VS declaration (函式運算式)]]></title>
      <url>http://blackie1019.github.io/2015/04/09/javascript-function-expression-vs-declaration/</url>
      <content type="html"><![CDATA[<p>先前寫過一篇<a href="http://www.dotblogs.com.tw/blackie1019/archive/2014/01/14/139926.aspx" target="_blank" rel="external">[Javascript]Call method(呼叫函式)</a>關於函數宣告,這邊進階一下做一個比較。</p>
<a id="more"></a>
<p>在開始前, 先來回憶一下如何自定一個JS函數</p>
<h2 id="How-to-create-JS-custom-function"><a href="#How-to-create-JS-custom-function" class="headerlink" title="How to create JS custom function"></a>How to create JS custom function</h2><h3 id="第一種-declaration-函式運算式"><a href="#第一種-declaration-函式運算式" class="headerlink" title="第一種 - declaration (函式運算式)"></a>第一種 - declaration (函式運算式)</h3><pre><code>function callTest(){
    console.log(123);
}

callTest();
</code></pre><h3 id="第二種-function-expression-函式陳述式"><a href="#第二種-function-expression-函式陳述式" class="headerlink" title="第二種 - function expression(函式陳述式)"></a>第二種 - function expression(函式陳述式)</h3><pre><code>var callTest=function(){
    console.log(123);
}

callTest();
</code></pre><p>大致上常見的有上面兩種, 其中第二種的變形使用很多變化，下面歸納兩點差異讓大家分辨</p>
<h2 id="What’s-different"><a href="#What’s-different" class="headerlink" title="What’s different"></a>What’s different</h2><ul>
<li><p>1</p>
<p>  function declaration (函式運算式)最大差異就是呼叫自定函式時可在function前，如剛剛的第一種我們可以改成下面的樣子依舊可以正常執行</p>
<pre><code>callTest();

function callTest(){
    console.log(123);
}
</code></pre><p>  但如果改用function expression(函式陳述式)成下面這樣就會發現出現問題(變數未宣告)</p>
<pre><code>callTest();

var callTest=function(){
    console.log(123);
}
</code></pre></li>
</ul>
<ul>
<li><p>2</p>
<p>  而在定義上，declaration (函式運算式)只要被定義過後就無法從記憶體中刪除並回收，而function expression(函式陳述式)則是正常的跟著變數生命週期運作, 所以可能定義完後則直接被回收或是跟著變數的參考被移除時就結束等待GC回收,如下就是直接被回收與變數被回收的範例</p>
<ul>
<li><p>declaration (函式運算式)直接被回收</p>
<pre><code>（function(val){
    console.log(val);
 })(123);
</code></pre></li>
<li><p>function expression(函式陳述式)變數被回收</p>
<pre><code>var callTest=function(){
    console.log(123);
}

callTest();
callTest=null;
callTest();
</code></pre></li>
</ul>
</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完定義跟比較後應該很明確的可以知道以後什麼情況要用function expression與declaration了，不要再誤用或以為都一樣摟！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular FullStack developer with Yeoman]]></title>
      <url>http://blackie1019.github.io/2015/03/27/angular-fullstack-developer-with-yeoman/</url>
      <content type="html"><![CDATA[<p>這系列文章會用Yeoman的angular-fullstack來做介紹。</p>
<a id="more"></a>
<p>開發環境是Mac+sublimeText</p>
<p>因為是MEAN架構主要會用到以下幾項</p>
<ul>
<li>MongoDB</li>
<li>Express</li>
<li>Angular</li>
<li>NodeJS</li>
<li>Grunt</li>
<li>Bower</li>
</ul>
<p>額外會用到的有之後會依序介紹。接下來讓我們從實際來上手一次，如果想先知道結果會長怎樣可以先去<a href="http://fullstack-demo.herokuapp.com/" target="_blank" rel="external">Demo</a>這邊瞧瞧。</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul>
<li>先安裝好NodeJs(with npm)</li>
<li><p>安裝 yeoman</p>
<pre><code>npm install -g yo
</code></pre></li>
<li><p>安裝 generator(<a href="https://github.com/DaftMonk/generator-angular-fullstack" target="_blank" rel="external">angular-fullstack</a>)</p>
<pre><code>npm install -g generator-angular-fullstack
</code></pre></li>
<li><p>建立一個資料夾然後進入該資料夾的路徑內</p>
<pre><code>mkdir my-new-project &amp;&amp; cd $_
</code></pre></li>
<li><p>使用yeoman建立新專案</p>
<pre><code>yo angular-fullstack [app-name]
</code></pre></li>
</ul>
<p>建立的過程需要一點時間而且他會幫你更新相依性套件，這邊要稍微注意一下權限，有必要的話記得把npm globle安裝路徑的權限設定為可讀</p>
<ul>
<li><p>這邊我們沒有要在本機建立MongoDB，所以我們使用<a href="https://mongolab.com/databases/webapp" target="_blank" rel="external">MongoLab</a>來幫我們建置，請在註冊好帳號後新增一個Database跟新增一個Users來讓他連線</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/001.png" alt="001"></p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/002.png" alt="002"></p>
</li>
</ul>
<h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><p>建立完後我們先來看一下整個專案架構</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/01.png" alt="01"></p>
<p>有玩過一下上面的Demo那你大概會知道我們產生的這個樣品會有兩個跟DB有關的功能</p>
<ul>
<li>註冊/登入 user</li>
<li>新增/移除 thing</li>
</ul>
<p>所以你可以在api資料夾下面找到thing與user資料夾，裡面就是用Mongoose幫你建立的資料存取</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/03.png" alt="03"></p>
<p>而我們現在就要把這個範例的連線換到我們剛剛自己註冊的MongoLab上面，這邊你會需要修改一下config\environment資料夾裡面的一些連線設定，MongoLab的uri連線格式如下：</p>
<pre><code>mongodb://&lt;dbuser&gt;:&lt;password&gt;@&lt;yourdsnumber&gt;.mongolab.com:&lt;yourdbport&gt;/&lt;databasename&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/04.png" alt="04"></p>
<p>以上設定完成後你就可以透過下面指令在run起你的網站</p>
<pre><code>grunt server
</code></pre><p>此時你看到成功建立後就可以在瀏覽器輸入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a> 來看看你的網站</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/05.png" alt="05"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript Floating-Point calculation]]></title>
      <url>http://blackie1019.github.io/2015/02/27/javascript-floating-point-calculation/</url>
      <content type="html"><![CDATA[<p>前陣子在幫同事改一段以前的程式的時候發現Javascript在做Float數值的運算時有bug，會導致簡單的計算出問題，當下去找了一下資料有幾個處理方式整理給大家。</p>
<a id="more"></a>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>在開始前我們直接看下面的範例就知道問題在哪邊</p>
<p><a class="jsbin-embed" href="http://jsbin.com/joqutu/1/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>這邊三個簡單的計算，你可以發現前面兩個都正確，第三個結果就怪了。<br>小學的99乘法表告訴我們99是81，但這個結果的尾數竟然不是1….就知道見鬼了</p>
<p>為什麼Javascript的浮點數計算會有這樣的差異呢？</p>
<p>因為電腦沒辦法正確的顯示0.1,0.2,0.3這樣的浮點數(因為數值都是0101的組成)，所以透過0101組成浮點數時就產生了誤差。我們看到的0.1其實是已經經過進位後的結果(原先可能是0.1000000000000001這樣的值)，所以當我們做運算後就會產生更大的誤差。</p>
<p>對於浮點數的基本組成與相關問題可以參考<a href="http://floating-point-gui.de/" target="_blank" rel="external">這篇文章</a>，解釋得非常詳細。</p>
<p>這邊幫大家在Google大神的協助下找了幾張圖來參考。</p>
<p>首先一個簡單的浮點數可以分為兩部分：</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Float_mantissa_exponent.png/200px-Float_mantissa_exponent.png" alt="basic"></p>
<p>而透過二進位表示法(IEEE 754)來存放時則如下：</p>
<p><img src="http://lidia-js.kis.p.lodz.pl/ITCS/images/iee.png" alt=""></p>
<p>實際的運算邏輯flow大致可以參考下圖</p>
<p><img src="http://fourier.eng.hmc.edu/e85_old/lectures/figures/flp_addsub_block.gif" alt="flow"></p>
<h2 id="Solution-without-plugin"><a href="#Solution-without-plugin" class="headerlink" title="Solution without plugin"></a>Solution without plugin</h2><p>簡單來講我們可以用Number.prototype.toFixed()這個數值型別的function來幫我們確認要計算到多精準的小數位</p>
<p>開始前我們先參考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" target="_blank" rel="external">MDN</a>給我們的說明</p>
<h3 id="Method-of-Number"><a href="#Method-of-Number" class="headerlink" title="Method of Number"></a>Method of Number</h3><p>Implemented in JavaScript 1.5</p>
<p>ECMAScript Edition ECMAScript 3rd Edition</p>
<h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>number.toFixed( [digits] )</p>
<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p>digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.</p>
<h3 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h3><p>A string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation.</p>
<h3 id="Throws"><a href="#Throws" class="headerlink" title="Throws"></a>Throws</h3><p>RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well. TypeError If this method is invoked on an object that is not a Number.</p>
<p>如上面的說明，由於他是ECMAScript的內建語法所以我們不需要特別用什麼套件，只要確任瀏覽器支援就可以了(目前全部瀏覽器都支援)</p>
<p>我們將剛剛的一開始的三個範例改寫如下</p>
<p><a class="jsbin-embed" href="http://jsbin.com/recati/2/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>如此一來我們就可以正確地顯示浮點數運算過後的值了。</p>
<p>從解法我們發現如果用 <em>number.toFixed( [digits] ))</em> 這樣的解法需要先知道到底結果是小數點第幾位，但實務上我們有很多情況會不知道該數值到底第幾位.所以可能還要把多算出來的0給處理掉，如下：</p>
<p><a class="jsbin-embed" href="http://jsbin.com/jetizu/1/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<h2 id="Solution-using-Math-js"><a href="#Solution-using-Math-js" class="headerlink" title="Solution using Math.js"></a>Solution using Math.js</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20150227/logo.png" alt="logo"></p>
<p>這邊介紹一個方便的javascript plugin來幫大家解決數學計算的問題</p>
<p>使用上很簡單，只要記得加上math.js到你的頁面上即可，沒有其他library dependency。</p>
<p>下面就快速的把先前的範例用Math.js呈現給大家看</p>
<p><a class="jsbin-embed" href="http://jsbin.com/tagili/2/embed?html,js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>這邊可以看到透過Math.js我們就可以很簡單地取到精准度為小數點後10位的結果也不會有多餘的0，是不是很方便呢！</p>
<p>其實Math.js還有很多很酷的功能，他也支援Nodejs與其他框架使用，大家趕快把它列入專案必裝的套件吧。</p>
<p><a href="http://mathjs.org/" target="_blank" rel="external">Math.js</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>老實說學生時代只有印象中聽過浮點數計算透過二進位儲存有誤差，但我沒想到學問真的很大….也沒想到出社會還會看到這類型問題，也很感謝有遇到這樣的問題讓自已能夠在多收穫一些知識。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Load testing with Visual Studio]]></title>
      <url>http://blackie1019.github.io/2014/12/30/how-to-make-load-testing-with-visual-studio/</url>
      <content type="html"><![CDATA[<p>這邊分享一下給大家手把手(step by step)介紹一下如何建置Load Testing的專案，內容主要是我之前在公司對QA們做的training material，以英文為主，這邊如果有更好的內容會再把相關內容更新補齊上去。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/0.jpg" alt="0"></p>
<h2 id="About-Load-Testing"><a href="#About-Load-Testing" class="headerlink" title="About Load Testing"></a>About Load Testing</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/1.png" alt="1"></p>
<h3 id="Performance-testing"><a href="#Performance-testing" class="headerlink" title="Performance testing"></a>Performance testing</h3><p>效能測試（Performance testing），效能測試的目標不是要找缺陷（bug），而是要消除瓶頸和替未來的回歸測試（regression tests）建立一個底線，執行效能測試的進行是在一個謹慎控制的量測和分析流程內，理想上軟體是在夠穩定的情況下進行測試，因此測試的過程可以很順利的進行。定義期望組對有意義的效能測試而言是必要的。</p>
<ul>
<li>Concurrent user<ul>
<li>在線的使用者或HTTP連線的期望負荷</li>
</ul>
</li>
<li>Response time<ul>
<li>允許的回應時間</li>
</ul>
</li>
</ul>
<h3 id="Stress-testing"><a href="#Stress-testing" class="headerlink" title="Stress testing"></a>Stress testing</h3><p>壓力測試（Stress testing）,藉由超出系統資源或拿走系統資源（有時被稱為「負面測試」（negative testing））的情況下測試以嘗試中斷系統，主要的目的在確保系統失效和正常地回復。</p>
<p>效能測試需要一個受控制的環境和重覆量測，壓力測試則隨興地引發混亂和不可預測，如：</p>
<ul>
<li>倍數的單位數目(Base Amount)的在線的使用者/HTTP連線數量</li>
<li>隨機地關閉和重啟網路上連接到伺服器的交換機/路由器的埠（例如透過SNMP命令）</li>
<li>關閉資料庫再開啟</li>
<li>在系統執行時重建RAID陣列</li>
<li>執行消耗網頁/資料庫伺服器資源（CPU、記憶體、磁碟、網路）的程序並確保程式可以正常執行</li>
</ul>
<h3 id="Load-testing"><a href="#Load-testing" class="headerlink" title="Load testing"></a>Load testing</h3><p>負載測試(Load testing)是效能測試與調校的一部份，在這個前題下，這意味藉由自動工具不斷地增加負載到系統，對網頁程式而言，負載被定義成在線使用者或HTTP連線。</p>
<p>定義成提供系統所能執行最大工作量下運作測試的流程，負載測試通常被稱為「容量測試」、或「壽命（longevity）/耐力（endurance）測試」。</p>
<p>負載測試的目標:</p>
<ul>
<li>揭露粗略測試的缺陷，如：記憶體控制的缺陷、記憶體洩露（leaks）、緩衝區溢位（buffer overflows）等</li>
<li>當效能測試時確保應用程式滿足效能建立的底線，這個是藉由執行回歸測試完成以確保應用程式的特定最大負載。</li>
</ul>
<h3 id="Test-Controller-and-Test-Agent"><a href="#Test-Controller-and-Test-Agent" class="headerlink" title="Test Controller and Test Agent"></a>Test Controller and Test Agent</h3><p>在Load Testing實際執行當中，你會需要透過VS去建立一個 Load Testing Solution，接著將這Solution透過Test Controller來執行，而Test Controller會去控制它底下的 Test Agent ，分配對應的主機實際去跑你所安排的腳本。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/2.jpg" alt="2"></p>
<h2 id="Create-Visual-Studio-Load-Testing-Solution"><a href="#Create-Visual-Studio-Load-Testing-Solution" class="headerlink" title="Create Visual Studio Load Testing Solution"></a>Create Visual Studio Load Testing Solution</h2><p>整個流程可以分為下列幾個步驟:</p>
<ol>
<li>Install Visual Studio 2012(need install SQL Server 2008 Express or higher)</li>
<li>Create Web Performance and Load Test solution</li>
<li>Modify and complete Web Performance Test<ul>
<li>Record action by browser</li>
<li>Remove unnecessary request item</li>
<li>Add necessary Validation Rule</li>
<li>Add Data Source and bind data to input</li>
<li>Add Context Parameters to binding URL</li>
<li>Configure response time goal, think time and other setting on each request item</li>
</ul>
</li>
<li>Added Load Test to project and added existing Web Performance Test<ul>
<li>Added New Load Test to project</li>
<li>Set Test Mix, Browser Mix, Network Mix</li>
<li>Set Load Pattern</li>
<li>Configure Run Settings</li>
</ul>
</li>
<li>Added Counter(optional)</li>
</ol>
<p>接下來一步步帶大家開始建立第一個Load Testing Solution</p>
<h3 id="Create-Web-Performance-and-Load-Test-solution"><a href="#Create-Web-Performance-and-Load-Test-solution" class="headerlink" title="Create Web Performance and Load Test solution"></a>Create Web Performance and Load Test solution</h3><p>開啟VS後選擇File&gt;New&gt;Project&gt;Web Performance and Load Test Project，建立一個新的Load Testing Solution</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/3.png" alt="3"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/4.png" alt="4"></p>
<h3 id="Add-Web-Performance-Testing"><a href="#Add-Web-Performance-Testing" class="headerlink" title="Add Web Performance Testing"></a>Add Web Performance Testing</h3><p>建立 Web Performance Testing的方法分為錄製操作行為(record action)與手動撰寫程式兩種方式，但都是透過WebRequest 這個類別來取得每一步的結果與驗證是否完成，進而達成整個Web Performance Test的建立</p>
<h4 id="Create-by-Wizard-record-action"><a href="#Create-by-Wizard-record-action" class="headerlink" title="Create by Wizard(record action)"></a>Create by Wizard(record action)</h4><p>透過錄製的方式我們可以在不用直接撰寫程式碼的過程當中建立起一系列的操作步驟，而每個步驟我們都可以去儲存Request的回傳結果或是透過一個CSV,DB塞入特定或亂數的Paramaters給Request。當然，我們也可以加上驗證標準來強化定義流程的每一步成功與失敗的準則是什麼(超過三秒沒回應或是沒有給予特定的回傳內容)</p>
<ul>
<li><p>step-1</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/5.png" alt="5"></p>
</li>
<li><p>step-2</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/6.png" alt="6"></p>
</li>
<li><p>step-3</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/7.png" alt="7"></p>
</li>
<li><p>step-4</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/8.png" alt="8"></p>
</li>
<li><p>step-5</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/9.png" alt="9"></p>
</li>
<li><p>step-6</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/10.png" alt="10"></p>
</li>
<li><p>step-7</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/11.png" alt="11"></p>
</li>
</ul>
<h4 id="Create-by-Code"><a href="#Create-by-Code" class="headerlink" title="Create by Code"></a>Create by Code</h4><p>如果我們需要每一步都做到很彈性或是大型的測試腳本，通常我們都會捨棄錄製改用直接撰寫每一個WebRequest的內容來達到更多的彈性需求。</p>
<p><strong><em>*這邊要稍微注意一下，我們可以將錄製的.webtest檔案產生CodeBase的測試腳本(.cs)，但沒辦法將任一個.cs檔案轉回.webtest。</em></strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/12.png" alt="12"></p>
<h3 id="Add-Load-Testing"><a href="#Add-Load-Testing" class="headerlink" title="Add Load Testing"></a>Add Load Testing</h3><p>接著我們開始準備我們剛剛建立測試的主要檔案(.loadtest)。每一個.loadtest檔案可以在設定包含多個.webtest(或.cs)做為要執行Load Testing時候的腳本。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/13.png" alt="13"></p>
<h4 id="Configure-Scenario-setting"><a href="#Configure-Scenario-setting" class="headerlink" title="Configure Scenario setting"></a>Configure Scenario setting</h4><p>Once you create .loadtest file, it will added default scenario and you can add more with UI(right click to add).<a href="http://msdn.microsoft.com/en-us/library/ff406966.aspx" target="_blank" rel="external">MSDN:Load Test Scenario Properties</a></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/14.png" alt="14"></p>
<ul>
<li><p><strong>STEP-1:</strong></p>
<ul>
<li>Think times are used to simulate human behavior that causes people to wait between interactions with a Web site.</li>
<li>The think profile is a setting that applies to a scenario in a load test. The setting determines whether the think times that are saved in the individual Web performance tests are used during the load test.</li>
<li><p>If you want to use think times in some Web performance tests but not in others, you must place them in different scenarios.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/15.png" alt="15"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997697.aspx" target="_blank" rel="external">MSDN:Editing Think Times to Simulate Website Human Interaction Delays in Load Tests Scenarios</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-2:</strong></p>
<ul>
<li><p>The load pattern properties specify how the simulated user load is adjusted during a load test. Visual Studio Ultimate provides three built-in load patterns: constant, step, and goal-based.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/16.png" alt="16"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997551.aspx" target="_blank" rel="external">MSDN:Editing Load Patterns to Model Virtual User Activities</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-3:</strong></p>
<ul>
<li><p>Specifies the test mix model that is used for the load test.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/17.png" alt="17"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997561.aspx" target="_blank" rel="external">MSDN:Editing the Test Mix to Specify Which Web Browsers Types in a Load Test Scenario</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997826.aspx" target="_blank" rel="external">MSDN:Editing Text Mix. Models to Specify the Probability of a Virtual User Running a Test</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-4:</strong></p>
<ul>
<li><p>Specifies the network mix for the load test. You can specify which network types to include and their load distribution.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/18.png" alt="18"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997557.aspx" target="_blank" rel="external">MSDN:Specifying Virtual Network Types in a Load Test Scenario</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-5:</strong></p>
<ul>
<li><p>Specifies the Web browser mix for the load test. You can specify different Web browser types and their load distribution.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/19.png" alt="19"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997561.aspx" target="_blank" rel="external">MSDN:Editing the Test Mix to Specify Which Web Browsers Types in a Load Test Scenario</a></p>
</li>
</ul>
</li>
</ul>
<h4 id="Configuration-Run-setting"><a href="#Configuration-Run-setting" class="headerlink" title="Configuration Run setting"></a>Configuration Run setting</h4><p>Open results of recently run tests</p>
<ul>
<li>From the VIEW menu&gt;Windows &gt; Test Results&gt; Select Run list&gt;choose the test run you want to open or choose Manage test runs to browse for a test from the Test Runs window.</li>
<li><em>(Optional)</em> In the Result list, right-click a test and choose View Results to see more -    information about that particular test.</li>
<li><em>(Optional)</em> To view test result details, including any data and diagnostic adapter attachments, choose Run Details in the toolbar.</li>
<li><em>(Optional)</em> If you have Office excel 2010 or later, you can generate with excel add-in(<a href="http://msdn.microsoft.com/en-us/library/dd997707.aspx" target="_blank" rel="external">guide</a>)</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/20.png" alt="20"></p>
<h3 id="Open-Load-Testing-Report"><a href="#Open-Load-Testing-Report" class="headerlink" title="Open Load Testing Report"></a>Open Load Testing Report</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/21.png" alt="21"></p>
<h2 id="Tips-for-setting"><a href="#Tips-for-setting" class="headerlink" title="Tips for setting"></a>Tips for setting</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/22.jpg" alt="22j"></p>
<h3 id="Tip-1-–-How-to-set-User-Load-with-gradually-increased"><a href="#Tip-1-–-How-to-set-User-Load-with-gradually-increased" class="headerlink" title="Tip 1 – How to set User Load with gradually increased"></a>Tip 1 – How to set User Load with gradually increased</h3><ul>
<li>Set it on .loadtest &gt; Load Pattern</li>
<li><p>For example, to see how your server or servers perform as the user load increasing to 2,000 users, you might run a 10-hour load test using a step load pattern with the following properties:</p>
<ul>
<li>Initial User Count: 100</li>
<li>Maximum User Count: 2000</li>
<li>Step Duration (seconds): 1800</li>
<li>Step Ramp Time (seconds): 20</li>
<li>Step User Count: 100</li>
<li><p>These settings have the load test running for 30 minutes (1800 seconds) at user loads of 100, 200, 300, up to 2,000 users.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/ff423845.aspx" target="_blank" rel="external">How to: Specify the Step Ramp Time Property for a Step Load Pattern</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="Tip-2-–-How-to-binding-data-with-CSV-DB-or-constant"><a href="#Tip-2-–-How-to-binding-data-with-CSV-DB-or-constant" class="headerlink" title="Tip 2 – How to binding data with CSV, DB or constant"></a>Tip 2 – How to binding data with CSV, DB or constant</h3><ul>
<li>Using double curly brackets to binding data to your content<ul>
<li>CSV or DB<ul>
<li>Add data source and select data type</li>
<li>Select “properties”</li>
<li>Set the property to the correct data source field, value is like
			{{DataSource1.Filename#csv.ColumnTitle}}
		</li>
</ul>
</li>
<li>Confirm the property binding</li>
<li>Constant<ul>
<li>Using Content Text directly<br><a href="https://msdn.microsoft.com/en-us/library/bb385833%28v%3Dvs.100%29.aspx" target="_blank" rel="external">MSDN: Walkthrough: Adding Data Binding to a Web Performance Test (CSV File)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Tip-3-–-How-to-pass-response-data-to-next-request"><a href="#Tip-3-–-How-to-pass-response-data-to-next-request" class="headerlink" title="Tip 3 – How to pass response data to next request"></a>Tip 3 – How to pass response data to next request</h3><ul>
<li>Using Context parameters to store data and binding it to next.</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/22.png" alt="22p"></p>
<h3 id="Tip-4-–-How-to-make-binding-data-amd-pick-up-with-random"><a href="#Tip-4-–-How-to-make-binding-data-amd-pick-up-with-random" class="headerlink" title="Tip 4 – How to make binding data amd pick up with random"></a>Tip 4 – How to make binding data amd pick up with random</h3><ul>
<li>If your source have grant data and you want pick up is random,  you can set it on data source directly.</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/23.png" alt="23"></p>
<h3 id="Tips-5-–-Binding-Data-Source-with-CSV-file-but-execute-with-Error"><a href="#Tips-5-–-Binding-Data-Source-with-CSV-file-but-execute-with-Error" class="headerlink" title="Tips 5 – Binding Data Source with CSV file but execute with Error"></a>Tips 5 – Binding Data Source with CSV file but execute with Error</h3><ul>
<li>If your Data Source binding is setting correct by execute show with can found existing Context Parameters, it might Visual Studio known bug with binding data.</li>
<li>Solution is update your .csv file with another title to make binding with correct encoding.</li>
<li>You can confirm encoding is correct by generate code on .webtest file.</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/24.png" alt="24"></p>
<h2 id="One-more-thing-about-Load-Testing"><a href="#One-more-thing-about-Load-Testing" class="headerlink" title="One more thing about Load Testing"></a>One more thing about Load Testing</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/25.jpg" alt="25"></p>
<h3 id="Cowork-with-Test-Controller-and-Test-Agent"><a href="#Cowork-with-Test-Controller-and-Test-Agent" class="headerlink" title="Cowork with Test Controller and Test Agent"></a>Cowork with Test Controller and Test Agent</h3><p>一開始我們有稍微提到Test Controller 與 Test Agent 的關係，現在我們進一步的來看看實際上Test Controller怎麼去控制Test Agent來完成Load Testing.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/26.png" alt="26"></p>
<p>從上圖你可以看到其實Test Controller就是指派它底下的每一個Test Agent去Run Tests然後將資料取得回來放置Test controller這邊收集。</p>
<p>如果想要自己動手做，需要詳細的環境建置教學可以參考保哥的<a href="http://blog.miniasp.com/post/2011/03/13/Visual-Studio-Agent-2010-Load-and-Stress-Testing-Installation-Guide.aspx" target="_blank" rel="external">使用 Visual Studio 2010 Ultimate 及 Agent 進行負載壓力測試</a></p>
<h3 id="Remote-Controller-to-doing-Load-Testing"><a href="#Remote-Controller-to-doing-Load-Testing" class="headerlink" title="Remote Controller to doing Load Testing"></a>Remote Controller to doing Load Testing</h3><p>實務上，在做Load Testing的時候通常我們都會針對類似實際運行架構(production environment)進行測試，以確保測試出來的數值是符合真實情況的，所以通常我們的Load Testing Controller 與 Test Agent我們會獨立建立一個Test Rig來分隔實際需要測試的環境。而我們可透過遠端(remote)或直接到Load Testing Controller那台執行我們的腳本。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/27.png" alt="27"></p>
<h3 id="Load-Testing-in-the-Cloud-Windows-Azure"><a href="#Load-Testing-in-the-Cloud-Windows-Azure" class="headerlink" title="Load Testing in the Cloud (Windows Azure)"></a>Load Testing in the Cloud (Windows Azure)</h3><p>通常一台Test Agent我們格別放在一台虛擬或實體的主機(server)上，而每台Test Agent因為硬體環境的不同，我們會讓他發送250-1000的測試量，假設你今天需要做一個同時在線人數2000人的測試，每一台你預估可以發送500人，那你會需要四台Test Agent。</p>
<p>以上面的例子來看如果想要做Load Testing但沒有這麼多台主機建立Test Controller and Test Agent也沒關係，你可以直接使用Windows Azure來建立，而且using on-demand, 你隨時可以開啟或提用你的這些主機，透過最符合CP值的方式建立需要花費昂貴費用才能建立的環境。</p>
<h4 id="Graphic"><a href="#Graphic" class="headerlink" title="Graphic"></a>Graphic</h4><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/28.png" alt="28"></p>
<h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/29.jpg" alt="29"></p>
<h4 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h4><p>如果對Load Testing有興趣想要實際上手玩玩的話建議來這邊實作一下歐，這個Lab連Sample site都會給你所以不用擔心沒有網站可以測試啦!</p>
<ol>
<li>Download <a href="http://code.msdn.microsoft.com/Getting-started-with-17a52e95" target="_blank" rel="external">sample</a>.</li>
<li>From the Solution Explorer, open SampleWebTest.webtest</li>
<li>Select the URL listed in SampleWebTest.webtest file.</li>
<li>Go to the properties list and update the property labelled ‘Url’ to your app’s/website’s URL.<br>5.From the team explorer, please connect to your Visual Studio Online account(<a href="https://app.vssps.visualstudio.com/profile/account?account=true&amp;context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MSwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjIsImF1IjpudWxsLCJjdiI6MTcyMTkyNDg0MiwiZnMiOjAsInN1IjowLCJlciI6MX01" target="_blank" rel="external">Register here</a>).</li>
<li>Open the SampleLoadTest.loadtest file. From the ‘Load Test’ menu, select ‘Run’ -&gt; ‘Selected Test’</li>
<li>The Load test from the cloud will now start and show you graphs of how your application is performing during the load test.</li>
</ol>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/30.png" alt="30"></p>
<p>搭配上面的Lab，這邊額外推薦大家使用<a href="http://azure.microsoft.com/zh-tw/services/visual-studio-online/" target="_blank" rel="external">visual-studio-online</a><br>，優點如下摟:</p>
<ul>
<li>5 FREE Basic user licenses</li>
<li>FREE work item tracking for all users</li>
<li>FREE 60 minutes/month of build</li>
<li>FREE 15K virtual user minutes/month of load testing</li>
<li>PREVIEW application monitoring and analytics</li>
</ul>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>執行Load Testing前注意，除了每次都要記得做初始化(IIS reset, System clean等，避免被其他變因影響)，因為這樣的壓力測試其實就是對系統做一次類似來說DDOS的攻擊，所以如果待測網站有類似阻擋DDOS攻擊的防火牆或是WAF，千萬要記得關掉以免影響測試結果。</p>
<p>另外，測試的結果跟你本身錄製的測試腳本有絕大的關係，通常測試結果太過樂觀或悲觀有很大的可能是你根本就搞錯你的測試腳本了，所以測試腳本非常重要。</p>
<p>個人這邊要額外提到一個重點Load Testing本身應該要先建立在有可相信的Web Performance Test，因為這樣才可以先定義什麼叫測試成功與失敗，各衡量指標才會有實際的判別方式。</p>
<p>而初期的測試應該要盡量的單一面向且明確的去定義你所希望測試的項目，例如:我想測試一下我的網站能不能成功上線，這是一個非常籠統且沒有人知道妳想要什麼的一個測試目標。</p>
<p>如果我們將內容換成:我想測試一下我的網站在1000個concurrent user同時使用的情況下，是否正常，這好想比上一個好多了，因為我們說出了一個明確的成功指標 “1000人”，但其實我們還是不知道要測什麼行為。</p>
<p>如果我們再將內容做些更改:我想測試一下我的網站在1000個concurrent user同時登入且使用A功能的情況下能否達成全部三秒內回應且沒有任何Exception的發生，這樣我們就會更明確地去組成一個簡單的Web Performance Test。</p>
<p>記住，Load Testing可由多個Web Performance Test組成，所以不用一個包山包海的Test，猜開成多個透過設定不同的混和或序列執行模式可以更加有彈性的建立符合實際情況的Load Testing，如此才能真實的反應你所想要知道的訊息。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://www.prudentman.idv.tw/2011/01/performance-vs-load-vs-stress-testing.html" target="_blank" rel="external">效能/負載/壓力測試的分別（Performance vs. load vs. stress testing）</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/dd293551.aspx" target="_blank" rel="external">Setting Up Test Machines to Run Tests or Collect Data</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms404662.aspx" target="_blank" rel="external">How to: Save and Open Web Performance and Load Test Results in Visual Studio</a></li>
<li><a href="http://www.visualstudio.com/en-us/get-started/load-test-your-app-vs" target="_blank" rel="external">Load testing in the cloud</a></li>
<li><a href="http://www.visualstudio.com/en-us/get-started/load-test-your-app-vs" target="_blank" rel="external">Configure your project to run load tests in the cloud</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mou Introduction]]></title>
      <url>http://blackie1019.github.io/2014/11/13/mou-introduction-markdown-write-on-mac/</url>
      <content type="html"><![CDATA[<p>在Mac 環境寫MarkDown的好物</p>
<a id="more"></a>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/mou_logo.png" alt="Logo"></p>
<p><a href="http://github.com/blackie1019/Mou-MarkdownCSS-Dotblog" target="_blank" rel="external">Mou-MarkdownCSS-Dotblog</a>下載</p>
<h2 id="Mou介紹"><a href="#Mou介紹" class="headerlink" title="Mou介紹"></a>Mou介紹</h2><p>-這套Markdown editor 在<a href="http://markdown.tw/" target="_blank" rel="external">Markdown.tw</a>就有推薦下載，這套軟體的開發者是對岸的高手-羅晨，對他有興趣可以看<a href="http://www.inside.com.tw/2013/07/19/mou-creator-chen-luo-interview" target="_blank" rel="external">inside這篇專訪</a></p>
<p>下載後打開app就會先看他的使用介紹，左邊寫右邊preview</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/1.png" alt="1"></p>
<p>他也提供了將寫好的文檔轉換成HTML格式或PDF輸出的功能，而且他HTML的CSS本身就支援Responsive Design，算是很貼心(可惜dotblog好像沒有支援的樣板，只能自己寫custom css，真希望能提供RWD樣板選擇一下)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/8.png" alt="8"></p>
<p>因為作者是華人所以他也做了中文常常會呈現的橫板的樣式(選單上選View-&gt;Vertical Writing)的功能，可以呈現下面的結果</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/9.png" alt="9"></p>
<p>這邊介紹一下如何更改呈現的樣式,並且將Markdownpad的樣式拿過來Mou用，在上面選單選擇Mou-&gt;preferences-&gt;CSS，這邊可更換呈現風格(預設四種)，而當你按下edit時就會到你樣式的目錄，這邊可以發現其實也是四份CSS而已</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/3.png" alt="3"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/5.png" alt="5"></p>
<p>有看過C大文章的人就知道windows也有一款Markdown的編輯器叫做Markdownpad，這邊可以把Markdownpad輸出的CSS放到Mou，來讓兩邊編輯器呈現較一致的畫面，使用上我們就把從Markdownpad輸出的CSS作修改後放到剛剛的樣式目錄就可以了(Markdownpad的CSS在開頭有載點)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/6.png" alt="6"></p>
<h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><hr>
<p>Mou真的蠻好用的而且用免費根本佛心～！</p>
<p>會分享這篇文章是因為前陣子為看到dotblog上有篇C大所寫的<a href="http://www.dotblogs.com.tw/clark/archive/2013/08/25/115495.aspx" target="_blank" rel="external">[Other] 使用Markdown格式編寫點部落文章</a> 讓我發現原來Windows 也有相同的軟體了，而且也是可以把產生出來文件轉成網頁在dotblog上面呈現，這對於我來說實在很吸引人，後來才想到我應該可以把兩邊的CSS整合成成兩個版本互相使用，也可以讓Mou的套版順利呈現到dotblog.</p>
<p>先前我在Markdownpad上面使用或是將產生的HTML作檢視都會遇到一個問題就是對於code這個tag的support有些問題(斷字跟換行好像呈現上有些錯誤)<br>所以我最後的解法就是先透過quote的方式下面在接上code區塊的寫法，但結果很醜..而Mou就沒有這樣的問題，兩者的比較如下圖(上面是Mou，下面是Markdownpad的CSS，兩篇是不同文章)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/7.png" alt="比較圖"></p>
<p>因為上述的原因現在我的blog也是將Mou的CSS套在我的dotblog上面，加上個人覺得Mou的CSS比較偏向github的風格所以作了更換，如果想把MarkdownPad的CSS給Mou呈現或是想把Mou上面的Github2(2底色白色,1是灰色)這個樣式用在dotblog上的話可以直接從這邊<a href="http://github.com/blackie1019/Mou-MarkdownCSS-Dotblog" target="_blank" rel="external">Mou-MarkdownCSS-Dotblog</a>下載</p>
<h2 id="Github1-vs-Markdownpad"><a href="#Github1-vs-Markdownpad" class="headerlink" title="Github1 vs Markdownpad"></a>Github1 vs Markdownpad</h2><p>這邊提供Markdownpad的css放到Mou的Github1(Mou預設)一些比較截圖(每組圖上面都是Mou下面都是Markdownpad)</p>
<h3 id="比較一"><a href="#比較一" class="headerlink" title="比較一"></a>比較一</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_1.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_1.png" alt="Markdownpad-1"></p>
<h3 id="比較二"><a href="#比較二" class="headerlink" title="比較二"></a>比較二</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_2.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_2.png" alt="Markdownpad-1"></p>
<h3 id="比較三"><a href="#比較三" class="headerlink" title="比較三"></a>比較三</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_3.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_3.png" alt="Markdownpad-1"></p>
<h3 id="比較四"><a href="#比較四" class="headerlink" title="比較四"></a>比較四</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_4.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_4.png" alt="Markdownpad-1"></p>
<p>工欲善其事，必先利其器，讓我們一起學好Markdown吧～！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Coding Dojo, Kata, Wasa, and Randori]]></title>
      <url>http://blackie1019.github.io/2014/11/13/coding-dojo-kata-wasa-and-randori/</url>
      <content type="html"><![CDATA[<p>最近很紅的幾個名詞，而且看活動蠻好玩的，了解的過程順便整理一下筆記</p>
<a id="more"></a>
<h2 id="Coding-Dojo"><a href="#Coding-Dojo" class="headerlink" title="Coding Dojo"></a>Coding Dojo</h2><p>這是指一個學習的過程或方法，招集一群人有目地的在安全的環境一起學習技術或探索問題，而這過程著重在如何一起學習與解決問題，也會從中加入一些其他的開發方式，例如Pair coding、TDD、Design pattern等來當作主軸，讓大家在過程中都有個主題的方向去學習，既使犯錯了也是很好的教材。</p>
<p>以下稍微解說一下方式與角色：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/02.png" alt="02"></p>
<ul>
<li><p>Driver：主要負責寫Code的人，完成即可重回Spectators去準備下一輪挑選</p>
</li>
<li><p>Navigator：負責協除寫Code的人完成並擔任下一個Driver</p>
</li>
<li><p>Spectators：輪流上去成為Navigator的代選者</p>
</li>
</ul>
<p>以上的腳色透過一次固定的時間(約10-15分鐘)的方式輪替角色並從中獲得練習</p>
<p>通常會搭配幾個Rule:</p>
<ul>
<li>Pair Programming</li>
</ul>
<p>學習如何兩個人共同合作寫Code(此時Driver一組有兩個人)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/03.jpg" alt="03"></p>
<ul>
<li>TDD</li>
</ul>
<p>依照TDD的方式些撰寫測試案例再來完成功能進而改善code的品質</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/04.gif" alt="04"></p>
<ul>
<li>Step by Step</li>
</ul>
<p>以能滿足Test的方式一步步完成</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/05.PNG" alt="05"></p>
<ul>
<li>Call Help</li>
</ul>
<p>如果真的遇到問題絕對不要害怕向Navigator提出求救</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/06.JPG" alt="06"></p>
<h2 id="Code-Kata"><a href="#Code-Kata" class="headerlink" title="Code Kata"></a>Code Kata</h2><p>這名詞也指的是招式(套路)，通常在學武功的時候都會有幾招固定招式，如下</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/08.JPG" alt="08"></p>
<p>相同的概念放到Software development裡面其實就是給一些已知的問題讓你練習，如</p>
<p><a href="http://codekata.com/kata/kata01-supermarket-pricing/" target="_blank" rel="external">kata01-supermarket-pricing</a></p>
<p>這樣的既有問題該如何去寫出程式來解決問題。而在實際的開發世界裡面大多數剛踏進這個產業的人往往缺乏相關經驗甚至沒有開發經驗，而Kata就是一個讓他們培養解決問題的經驗最好的練習方式。</p>
<p>而流程上他分為三個部分，類似紅綠燈的：紅、黃、綠</p>
<ul>
<li><p>紅:測試失敗</p>
</li>
<li><p>黃:可以改善功能已達到需求</p>
</li>
<li><p>綠:測試成功</p>
</li>
</ul>
<p>由撰寫第一個測試失敗的Test Case 開始改進，然後實作通過測試(綠燈)後遇到需求變更或Refactoring評估如何改善(黃燈)，然後再繼續實作直到又通過綠燈換下一個</p>
<h2 id="Wasa"><a href="#Wasa" class="headerlink" title="Wasa"></a>Wasa</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/10.JPG" alt="10"></p>
<p>一個寫測試，另外一個人寫程式通過測試，但經過一段時間後兩者調換身分，以此練習TDD與pair programming的開發方式與默契.</p>
<h2 id="Randori"><a href="#Randori" class="headerlink" title="Randori"></a>Randori</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/xpug-coding-dojo-katayahtzee-in-ocp-way-4-728.jpg" alt="Randori"></p>
<ul>
<li><p>Coder：就是1，負責寫Code的人</p>
</li>
<li><p>Copilot：大部分是3，代表其他人，但下一個準備上台的人視為Coder Pair Programming的Partner，也就是2</p>
</li>
</ul>
<p>把題目跟開發者寫的東西投影出來，然後當Coder在台上寫的時候Copilot則在下面討論，然後依序提出與改進，然後依樣輪流上來改寫，改寫時要通過前面那個人所寫的Test Case 確保寫出來的Code符合預期，所以這是TDD與Kata 很好的一個練習實作方式(實際上也常使用Pair Programming的方式上台寫作)。</p>
<p>流程上類似：第一個看到需求後先寫下了Test Case然後讓第二個補上功能，再讓第二個寫Test Case，第三個上來寫功能這樣的循環</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><p><a href="http://www.slideshare.net/AgileCommunity/agile-tour-2014-dojo-with-c-sharp-pdf" target="_blank" rel="external">Agile tour 2014 - Coding Dojo with C# and TDD</a></p>
</li>
<li><p><a href="http://www.danielteng.com/2011/03/15/coding-doj/" target="_blank" rel="external">代码道场 Coding Dojo</a></p>
</li>
<li><p><a href="http://codekata.com/" target="_blank" rel="external">codekata</a></p>
</li>
<li><p><a href="http://agilepainrelief.com/notesfromatooluser/2008/10/tdd-randori-session.html#.VGTwKZCUccs" target="_blank" rel="external">TDD RANDORI SESSION</a></p>
</li>
<li><p><a href="http://www.slideshare.net/giordano/xpug-coding-dojo-katayahtzee-in-ocp-way" target="_blank" rel="external">XpUg Coding Dojo: KataYahtzee in Ocp way</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[D3.JS:Intro]]></title>
      <url>http://blackie1019.github.io/2014/08/26/d3js-intro/</url>
      <content type="html"><![CDATA[<p><a href="http://d3js.org/" target="_blank" rel="external">D3.js</a>是一個JavaScript library，是 Data-Driven Documents只要有資料就可以產生文件，透過本身資料的儲存方式來轉換成圖像的方式呈現，提供不同的視角來檢視你的資料，並從中強化各種視覺呈現的效果與互動．D3.js 可僅透過JavaScript, HTML, SVG and CSS就可以達到圖像化的資料呈現並且可跨瀏覽器支援．</p>
<a id="more"></a>
<h2 id="What-is-D3-js"><a href="#What-is-D3-js" class="headerlink" title="What is D3.js?"></a>What is D3.js?</h2><p>現在我們就直接看一個<a href="http://zbryikt.github.io/visualize/dorling/" target="_blank" rel="external">Live Demo</a> 感受一下魅力吧!</p>
<p>另外推薦一個台灣人以台灣地圖與資料來呈現空間與數據關係的<a href="https://blog.safaribooksonline.com/2014/02/11/d3-js-maps/" target="_blank" rel="external">範例</a></p>
<h2 id="Why-need-it"><a href="#Why-need-it" class="headerlink" title="Why need it?"></a>Why need it?</h2><p>為什麼我們會需要D3.js這樣圖像化地library勒？當我們處於一個大資料的時代，想要直接閱讀資料從中找出資訊是很不容易的事情，這是後我們可以透過圖像化的方式讓我們用看的就能感覺出他的重要性或差異，我們從下面這個範例來解說一下</p>
<h2 id="Setup-and-Demo"><a href="#Setup-and-Demo" class="headerlink" title="Setup and Demo"></a>Setup and Demo</h2><p>看完一串說明後，就讓我們來hand on一下吧</p>
<p>安裝上只要先include D3.js的js檔案</p>
<pre><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre><p>接著就來個簡單的Select吧</p>
<p><a class="jsbin-embed" href="http://jsbin.com/vokaz/3/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>就這樣透過select我們輕鬆地幫p元素換了顏色</p>
<p>剩下的我們就明天再繼續吧</p>
<p>Day 1 end</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[D3.JS:Data-Driven Documents]]></title>
      <url>http://blackie1019.github.io/2014/08/25/d3js-data-driven-documents/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/mbostock/d3/wiki" target="_blank" rel="external">D3.JS:Data-Driven Documents</a>，是本人近期很感興趣的一個js 套件，它提供了一些基於文件操作方式的js函式，讓文件的資料呈現可以透過更能讓瀏覽者理解與互動的方式來使用，大大的提升了可讀性與使用率。</p>
<a id="more"></a>
<p>在動手前我們先來知道一下D3到底做了什麼，這邊節錄底部大大書裡的一段話</p>
<blockquote>
<p>Fundamentally, D3 is an elegant piece of software that facilitates generation and manipulation of web documents with data. It does this by:</p>
<ul>
<li>Loading data into the browser’s memory</li>
<li>Binding data to elements within the document, creating new elements as needed</li>
<li>Transforming those elements by interpreting each element’s bound datum and setting its visual properties accordingly</li>
<li>Transitioning elements between states in response to user input</li>
</ul>
</blockquote>
<p>這邊來看幾個showcase與demo吧</p>
<ul>
<li><a href="http://www.youtube.com/watch?v=1_LDH1T1D1Y" target="_blank" rel="external">D3.js Line Chart</a></li>
<li><a href="http://www.youtube.com/watch?v=qYEHt_ykDR0" target="_blank" rel="external">Leap Motion D3.js Demo</a></li>
<li><a href="http://www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html?_r=0" target="_blank" rel="external">At the National Conventions, the Words They Used</a></li>
<li><a href="http://mbostock.github.io/d3/talk/20111018/treemap.html" target="_blank" rel="external">treemap</a></li>
<li><a href="http://bl.ocks.org/mbostock/4183330" target="_blank" rel="external">World Tour</a></li>
<li><a href="http://bost.ocks.org/mike/hive/" target="_blank" rel="external">Hive Plots</a></li>
</ul>
<p>如果想看了解更多，請知道還有什麼更酷的實例<a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank" rel="external">請看</a>，想了解更深請看<a href="http://dl.acm.org/citation.cfm?id=2068631" target="_blank" rel="external">ACM期刊</a></p>
<h2 id="Hands-on-with-D3js"><a href="#Hands-on-with-D3js" class="headerlink" title="Hands on with D3js"></a>Hands on with D3js</h2><p>接著我們來動手玩玩D3js吧,先到<a href="https://github.com/mbostock/d3/wiki" target="_blank" rel="external">官方Github</a>下載最新的code,使用上很簡單只要加入下面這段即可</p>
<pre><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre><p>這邊我們簡單先做出一個表格再來跟大家說明</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>會寫這篇其實跟以前在學時期玩過一陣子splunk有關，基本上splunk是一個收集記錄(log)或是任何資料(data)，經過處理與計算後以圖像或表單的方式來讓使用者更能看出一些現象的趨勢與探討出一些指標做出預測。Acer使用splunk做出了SOC的安全預測中心的一套偵測系統，而e-Travel(歐洲前十大網路旅行社)也透過splunkf去將它自有的巨量資料即時分析與搜尋的功能除了減少人工作業的時間與人力外，也降低了營運的成本。</p>
<p>而splunk這套系統除了本身索引建置與查詢極具戰力之外，早期splunk最引人樂道的是他將資料轉換成更容易了解的互動式視覺資料，這讓使用者在從巨量(big data)中更能發現出所期望預測的結果或是一些因素，當我們都在ㄧ昧的要求做到更快速的查詢與建立更完善的資料的同時，是否能透過其他方式來找出更值錢的且更能讓看的人了解的資料是更加重要的。</p>
<p>對於D3有興趣的人可以參考下面的讀物，是中文的書籍以及他線上免費閱讀的原文版本(作者真的很佛心)</p>
<ul>
<li><a href="http://www.tenlong.com.tw/items/9862769858?item_id=887625" target="_blank" rel="external">網頁互動式資料視覺化：使用 D3 (Interactive Data Visualization for the Web)</a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000345/index.html" target="_blank" rel="external">線上閱讀(英文版)</a></li>
</ul>
<p>另外附上TonyQ大大的介紹與說明:</p>
<ul>
<li><a href="http://www.youtube.com/watch?v=7nnZOIXIZ3k" target="_blank" rel="external">d3.js介紹</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Emmet LiveStyle hands on Lab]]></title>
      <url>http://blackie1019.github.io/2014/08/02/emmet-livestyle-hands-on-lab/</url>
      <content type="html"><![CDATA[<p>想必大部分人都知道Emmet是一套在SublimeText上Toolkit，而今天要介紹的是旗下的另外一套超方便的Emmet LiveStyle工具,讓你再透過瀏覽器修改檢查時就完成開發項目的調整，而這也是前端開發必學項目之一。</p>
<a id="more"></a>
<h2 id="Emmet-and-Emmet-LiveStyle"><a href="#Emmet-and-Emmet-LiveStyle" class="headerlink" title="Emmet and Emmet LiveStyle"></a>Emmet and Emmet LiveStyle</h2><p>Emmet是一個網業開發的Toolkit，前身叫做Zen Coding，可以快速的幫你建立Html與CSS文件，還不清楚或想了解更多的人可以先到<a href="http://docs.emmet.io/" target="_blank" rel="external">Emmet官網</a>看介紹影片。</p>
<p>而Emmet LiveStyle則是另外一套完全不同的工具，可以在Chrome上面讓你的Browser與Text Editor(當然預設是指SublimeText瞜)協同工作，目前瀏覽器的部分支援Chrome與Safari，編輯器則只有SublimeText。</p>
<p>快速介紹Emmet LiveStyle的特色</p>
<ul>
<li>不用儲存實際檔案</li>
<li>修改不用刷新頁面</li>
<li>Browser與Editor的雙向協同工作</li>
<li>跨平台</li>
<li>創新的CSS patching</li>
<li>安裝與使用方便，完全不用修改工作流程(只有簡化)</li>
</ul>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol>
<li>下載<a href="http://www.sublimetext.com/" target="_blank" rel="external">SublimeText</a></li>
<li>安裝<a href="https://sublime.wbond.net/installation" target="_blank" rel="external">Package Control</a></li>
<li><p>在SublimeText中使用Package Control安裝LiveStyle</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/1.png" alt="1"></p>
<p> 看到下面的說明代表安裝完成瞜</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/2.png" alt="2">.</p>
</li>
<li><p>接著打開Chrome安裝<a href="https://chrome.google.com/webstore/detail/emmet-livestyle/diebikgmpmeppiilkaijjbdgciafajmg?hl=zh-TW" target="_blank" rel="external">LiveStyle plugin</a></p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/3.png" alt="3"></p>
</li>
<li><p>然後打開Chrome的開發者工具可以看到多一個LiveStyle的選項選擇開啟功能就可以來玩耍瞜</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/4.png" alt="4"></p>
</li>
</ol>
<h2 id="Hands-on"><a href="#Hands-on" class="headerlink" title="Hands on"></a>Hands on</h2><ol>
<li>打開另一個網頁</li>
<li>開啟Chorme developer tool 勾選Enable LiveStyle for current page</li>
<li><p>這邊會顯示這一個網頁有多少公司是獨立的檔案可以被修改，這邊我們需要把他Mapping到我們SublimeText上面去</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/5.png" alt="5"></p>
</li>
<li><p>這時候如果我們在SublimeText開一份新文件就會發生原本沒有任何可以mapping的下拉選項出現了一個剛剛新開的檔案瞜</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/6.png" alt="6"></p>
</li>
<li><p>接著我們也來讓網頁選轉一下吧</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/demo.gif" alt="7"></p>
</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>有這套神奇之後以往麻煩的前端也面修改要一直切換Browser與編輯器的過程可以跟他說掰掰瞜，而SublimeText支援前端的能力有多強小弟就不多贅言，大家還是趕快來動手玩玩吧!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift與iOS APP開發 - 介紹與開發環境安裝]]></title>
      <url>http://blackie1019.github.io/2014/07/22/swift-hand-by-hand-day-01/</url>
      <content type="html"><![CDATA[<p>這篇主要在介紹Swift與iOS的開發環境安裝</p>
<a id="more"></a>
<h2 id="Swift介紹"><a href="#Swift介紹" class="headerlink" title="Swift介紹"></a>Swift介紹</h2><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><p><em> 首先要先確定你有apple developer開發帳號(還沒繳年費的記得快繳錢瞜, 呵呵) </em></p>
<ol>
<li>前往 <a href="https://developer.apple.com/devcenter/ios/index.action" target="_blank" rel="external">官方下載</a></li>
<li><p>登入Developer會員帳號後最上面選擇 iOS 8 Beta</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_01.png" alt="01"></p>
</li>
<li><p>拉到下面選擇安裝 Xcode 6 beta</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_02.png" alt="02"></p>
</li>
<li><p>下載完dmg檔案後直接雙點安裝然後拖進application資料夾中存放</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_03.png" alt="03"></p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_04.png" alt="04"></p>
</li>
<li><p>按下⌘+R或是上方的執行按鈕執行。可以看到中間區塊的右下角出現 Hello World!字樣。</p>
</li>
<li><p>這樣就完成了我們第一天的學習</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何做MS SQL定序(Collation) 轉換]]></title>
      <url>http://blackie1019.github.io/2014/07/12/mssql-collation-update-and-setup/</url>
      <content type="html"><![CDATA[<p>定序(Collation)，簡單來說定序就是在決定你的資料被排序與資料間比對的一個規則指引，看是要依據什麼規則來定.</p>
<a id="more"></a>
<h2 id="MS-SQL定序"><a href="#MS-SQL定序" class="headerlink" title="MS SQL定序"></a>MS SQL定序</h2><p>SQL Server的定序預設設定視安裝類型而定。一般而言，預設會選擇Windows 系統地區設定的 SQL Server 定序，以台灣繁體中文來說是Chinese_Taiwan_Stroke_CI_AS，所有的定序可以看<a href="http://technet.microsoft.com/en-us/library/ms188046.aspx" target="_blank" rel="external">官方說明</a></p>
<p>而在MSSQL你可以直接下查詢去查你指定的DB定序</p>
<pre><code>-- 目前資料庫定序（DB名稱為MAS_Mobile_OpenGIP）
SELECT DATABASEPROPERTYEX (&apos;MAS_Mobile_OpenGIP&apos; ,&apos;Collation&apos; )
</code></pre><p>一般來說簡單的定序分類<a href="http://www.dotblogs.com.tw/jimmyyu/archive/2009/08/30/10320.aspx" target="_blank" rel="external">from</a></p>
<ul>
<li><p>Case sensitivity(CS)</p>
<p>  簡單來說就是區分大小寫，A跟a是不同的，如果是Case Insensitive(CI)的話A在排序或者查詢時就會被視為相同，也就是查詢A，連同a也會被查詢到。</p>
</li>
<li><p>Accent sensitivity(AS)</p>
<p>  代表的是腔調上的差別，a跟á、o跟ó在腔調上是相同的，那查詢時是要視為相同，如果是的話，那就是Accent Insensitive(AI)，如果不是的話就視為Accent sensitive。</p>
</li>
<li><p>Kana Sensitivity(KS)</p>
<p>  日文中的片假名(Hiragana)與平假名(Katakana)如果被視為相同，那就是Kana Insensitive(KI)，反之就是Kane sensitive.。</p>
</li>
<li><p>Width sensitivity(WS)</p>
<p>  當半形字與全型自被視為相同(A跟Ａ)，那就是Width Insensitive(WI)，反之就是Width sensitive。</p>
</li>
</ul>
<h2 id="定序轉換流程"><a href="#定序轉換流程" class="headerlink" title="定序轉換流程"></a>定序轉換流程</h2><p>在開始流程前要先知道定序可分為三部分</p>
<ul>
<li><p>DataBase定序</p>
<p>  幫指定的DataBase作定序，之後產生的Table與Column會依據此這設定來指定預設的定序</p>
</li>
<li><p>Table定序</p>
<p>  幫指定的Table作定序，之後產生的所有欄位(Column)資料會依據此設定來指定預設的定序</p>
</li>
</ul>
<ul>
<li><p>Column定序</p>
<p>  幫指定的Column作定序，而改筆資料的內容會依據此設定做定序</p>
</li>
</ul>
<p>由上解說可以知道他們三者在預設上有依序繼承的關係，但你也可以分別設定，圖解如下圖：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/%E6%9E%B6%E6%A7%8B%E5%9C%96.png" alt="定序架構圖"></p>
<p>在瞭解完其實定序最小單位是Column之後，來做定序修改的實作，以下操作流城市已有實際資料的情況下你要如何做定序轉換的流程。</p>
<h3 id="流程步驟如下："><a href="#流程步驟如下：" class="headerlink" title="流程步驟如下："></a>流程步驟如下：</h3><ol>
<li><p>先備份原先資料庫(bak檔案)</p>
</li>
<li><p>建置一新的定序資料庫</p>
</li>
<li><p>用step1的bak還原剛剛建立的定序資料庫</p>
</li>
<li><p>修改Database預設定序</p>
</li>
<li><p>修改Table預設定序</p>
</li>
<li><p>修改Column預設定序</p>
</li>
<li><p>完成定序修改並備份目前資料庫  </p>
</li>
</ol>
<h3 id="會使用到的指令有以下幾個："><a href="#會使用到的指令有以下幾個：" class="headerlink" title="會使用到的指令有以下幾個："></a>會使用到的指令有以下幾個：</h3><p>1.查出所有設為Chinese_Taiwan_Stroke_CI_AS的欄位</p>
<pre><code>SELECT Table_Name,CoLumn_name,collation_name,*
FROM INFORMATION_SCHEMA.COLUMNS
WHERE collation_name=&apos;Chinese_Taiwan_Stroke_CI_AS&apos;
ORDER BY TABLE_NAME,COLUMN_NAME
</code></pre><p>2.檢查單一table的欄位定序設定(NULL表示非文字)</p>
<pre><code>SELECT name, collation_name
FROM sys.columns
WHERE OBJECT_ID IN ( SELECT OBJECT_ID
FROM sys.objects
WHERE type = &apos;U&apos;
AND name = &apos;actactivity&apos;)
GO
</code></pre><p>3.產生欄位定序修改的語法(這邊以Chinese_Taiwan_Stroke_CI_AS修改為Chinese_Taiwan_Stroke_BIN為例)</p>
<pre><code>SELECT * from (
    SELECT (&apos;ALTER TABLE &apos; + quotename(TABLE_NAME) +
    &apos; ALTER COLUMN &apos; + quotename(COLUMN_NAME) + &apos; &apos; +         quotename(DATA_TYPE) +
    CASE WHEN CHARACTER_MAXIMUM_LENGTH = -1 then &apos;(max)&apos;
    WHEN DATA_TYPE in (&apos;text&apos;,&apos;ntext&apos;) then &apos;&apos;
    WHEN CHARACTER_MAXIMUM_LENGTH IS NOT NULL
    THEN &apos;(&apos;+(CONVERT(VARCHAR,CHARACTER_MAXIMUM_LENGTH)+&apos;)&apos; )
    ELSE isnull(CONVERT(VARCHAR,CHARACTER_MAXIMUM_LENGTH),&apos; &apos;) END
    +&apos;COLLATE Chinese_Taiwan_Stroke_BIN &apos; + CASE IS_NULLABLE
    WHEN &apos;YES&apos; THEN &apos;NULL&apos;
    ELSE &apos;NOT NULL&apos;
    END) AS script
    from INFORMATION_SCHEMA.COLUMNS
    WHERE collation_name=&apos;Chinese_Taiwan_Stroke_CI_AS&apos;
) as Test
WHERE script != &apos;NULL&apos;
</code></pre><p>4 view的欄位改定序 (<a href="http://bretstateham.com/applying-a-collation-to-columns-in-a-view%E2%80%A6/" target="_blank" rel="external">http://bretstateham.com/applying-a-collation-to-columns-in-a-view%E2%80%A6/</a>)</p>
<pre><code>YourColumnName COLLATE  chinese_taiwan_stroke_bin
</code></pre><p>5 目前資料庫定序(MAS_Mobile_OpenGIP為你要查詢的Database名稱)</p>
<pre><code>SELECT DATABASEPROPERTYEX (&apos;MAS_Mobile_OpenGIP&apos; ,&apos;Collation&apos; )
</code></pre><p>以下Step by Step的圖解(以Chinese_Taiwan_Stroke_CI_AS修改為Chinese_Taiwan_Stroke_BIN為例)：</p>
<p>1 修改Database定序</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/1.PNG" alt="1"></p>
<p>2 修改完後查詢Table時小寫差無該Table</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/2.PNG" alt="2"></p>
<p>3 大寫才查得到</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/3.PNG" alt="3"></p>
<p>4 查詢欄位資料(用where對文字類型欄位用like查詢)沒分大小寫皆可查到</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/4.PNG" alt="4"></p>
<p>5 檢查該欄位確實還是Chinese_Taiwan_Stroke_CI_AS</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/5.PNG" alt="5"></p>
<p>6 透過指令3產生查詢語法</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/6.PNG" alt="6"></p>
<p>7 產生的查詢語法會包含Table與View的所有欄位(請將View的欄位先移除）</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/7.PNG" alt="7"></p>
<p>8 直接執行全部指令會發生錯誤，因為如果欄位是PK,FK或是有關聯其他Table的欄位需要先將該設定移除才可以修改或是透過9的步驟以介面方式手動調整即可連動修改</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/8.PNG" alt="8"></p>
<p>9 針對剛剛有問題的Table進去設計模式修改該Column的定序(右鍵-&gt;屬性-&gt;全文檢索規格中的定序)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/9.PNG" alt="9"></p>
<p>10 若該修正有包括其他欄位的關聯則會聯動修改</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/10.PNG" alt="10"></p>
<p>11 確認修改為我們要的Chinese_Taiwan_Stroke_BIN後儲存本次設計修正</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/11.PNG" alt="11"></p>
<p>12 如果到外面看該欄位為資料庫預設值這邊則要參考你該Database的設定(請用指令5確認目前Database定序設定為Chinese_Taiwan_Stroke_BIN)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/12.PNG" alt="12"></p>
<p>13 針對如果是View的修正無法使用上述流程，須手動將View重新建立(先取得所有View的Ceate Script後再將目前View全部刪除，再執行修改完的View Create Script)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/13.PNG" alt="13"></p>
<p>14 修改View指令的方法為在Select欄位時，針對每個字串欄位做指令4的定序宣告</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/14.PNG" alt="14"></p>
<h2 id="定序結果驗證"><a href="#定序結果驗證" class="headerlink" title="定序結果驗證"></a>定序結果驗證</h2><p>依照流程處理完資料後請依序驗證Database, Table與 Column的定序設定(透過指令1與指令5)都正確後可直接下查詢去檢查，以下列圖組為例：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/check_1.jpg" alt="check_1"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/check_2.jpg" alt="check_2"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/check_3.jpg" alt="check_3"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130926/check_4.jpg" alt="check_4"></p>
<p>以上即可證明完成定序資料轉換。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Design Introduction]]></title>
      <url>http://blackie1019.github.io/2014/07/12/material-design-introduction/</url>
      <content type="html"><![CDATA[<p>這系列文章為參考Google本身文件讀者本身對其之瞭解所做的筆記，如果有錯的地方麻煩順手讓我知道一下瞜~感謝</p>
<a id="more"></a>
<p><a href="http://www.google.com/design/spec/material-design/introduction.html#introduction-principles" target="_blank" rel="external">原出處</a></p>
<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/materialdesign-goals-swirlanddot_large_mdpi.png" alt="goals_1"></p>
<blockquote>
<p>Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.</p>
</blockquote>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/materialdesign-goals-cutrectangles_large_mdpi.png" alt="goals_2"></p>
<blockquote>
<p>Develop a single underlying system that allows for a unified experience across platforms and device sizes. Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all ﬁrst-class input methods.</p>
</blockquote>
<p>Material Design主要提供科技產品建置一跨平台與裝置的設計準則，目標再讓所有平台或裝置有同一的操作體驗，包括顯示、觸控、聲音等都在其範圍內。</p>
<h2 id="Principles-Material-is-the-metaphor"><a href="#Principles-Material-is-the-metaphor" class="headerlink" title="Principles - Material is the metaphor"></a>Principles - Material is the metaphor</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/materialdesign-principles-layersquares_large_mdpi.png" alt=""></p>
<blockquote>
<p>The fundamentals of light, surface, and movement are key to conveying how objects move, interact, and exist in space in relation to each other. Realistic lighting shows seams, divides space, and indicates moving parts.</p>
</blockquote>
<p>物件的光影、形狀、介面都能表達出與周遭環境的互動的情形，如同手指去波動水面會造成水面漣渏但在空氣中卻不會，合理的動作與物件顯示即可釋出彼此目前的關係。</p>
<h2 id="Principles-Bold-graphic-intentional"><a href="#Principles-Bold-graphic-intentional" class="headerlink" title="Principles - Bold, graphic, intentional"></a>Principles - Bold, graphic, intentional</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/materialdesign-principles-circleplus_large_mdpi.png" alt=""></p>
<blockquote>
<p>An emphasis on user actions makes core functionality immediately apparent and provides waypoints for the user</p>
</blockquote>
<p>不需透過多的設計或誇張的顯示，僅需透過簡單的色彩、空間與形狀等搭配來建立出使用者應該走的方向是Material Design主要想強調的。</p>
<h2 id="Principles-Motion-provides-meaning"><a href="#Principles-Motion-provides-meaning" class="headerlink" title="Principles - Motion provides meaning"></a>Principles - Motion provides meaning</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/materialdesign-principles-flyingsquare_large_mdpi.png" alt=""></p>
<blockquote>
<p>All action takes place in a single environment. Objects are presented to the user without breaking the continuity of experience even as they transform and reorganize.</p>
</blockquote>
<p>這句就是最精隨的一段，無須破壞一個連貫活動的任一動作，因為那就是最真實的呈現。</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/all_2.jpg" alt="all_2"></p>
<p>Google 所提倡的Material Design與Apple先前所提的Flat Design有一個絕大的不同點，在於物件相關性與合理性。</p>
<p>同於Flat Design簡單的強調一個準則 - simplicity，不要讓過多的加工破壞了原本物件存在的用意與原先的設計，設計應該強化在創造更佳的體驗。</p>
<p>但Material Design更強調物件與物件本身之關聯，沒有東西會憑空出現，事出必有因，所以在物件與物件之前的關聯上做了一些規範來實作出了這一些概念，包括了控制光影、物件顯示的表面與動作行為等。除此之外也提出，因為必須讓事物有跡可循所以”它”就有自己的規矩，不見得每個人都能夠任意使用，對於設計師來說「限制」是有必要的。</p>
<p>正如Google CEO Matias Duarte先前訪問時所提出的<a href="http://www.theverge.com/2014/4/15/5619182/android-design-head-matias-duarte-says-mobile-is-dead" target="_blank" rel="external">Mobile is dead</a>，其中一段</p>
<blockquote>
<p>If you’re product is about finding a ride, it’s not okay that you can get it on a 7-inch screen but not on a 2-inch screen.</p>
</blockquote>
<p>這句話大概最能解釋Material Design所希望達成的目標。但不僅是Google想定義出底下各產品設備,網頁或app等有一個一樣的視覺感受，它同時也在撫平與連貫跨裝置的操作理念。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140713/all_1.png" alt="all_1"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git基本教學與使用AWS EC2( Elastic Compute Cloud ) /Microsoft Azure建立自己的Git Server]]></title>
      <url>http://blackie1019.github.io/2014/07/01/git-introduction-and-push-remote-repository-to-aws-ec2-and-azure/</url>
      <content type="html"><![CDATA[<p>這篇文章主要是帶大家在雲端服務上建立一個Git Server，並透過一個範例簡單帶大家瞭解一下Git基本指令</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/logo.png" alt="Logo"></p>
<h2 id="Git-簡介"><a href="#Git-簡介" class="headerlink" title="Git 簡介"></a>Git 簡介</h2><p>是目前最被大家推崇的版本管控工具，特色是利用分散發布的管理方式主要在乎檔案的整體性是否有改變，不強調需要到將檔案上傳到主機端管理，而是強調各分散管理的節點都能做好本身的檔案控管，並能靈活地交換各段節點的版本，以此來達成分散管理的好處。</p>
<p>與市面上市占率依舊頗高的SVN比較的整理如下:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/git%20svn.PNG" alt="git svn"></p>
<p>以下來源至<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A Successful git branching model</a>所提供的畫面節錄出成功的Git管控下各版本的樣貌:</p>
<h3 id="Over-view"><a href="#Over-view" class="headerlink" title="Over view"></a>Over view</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/success%20git%20model%20overview.png" alt="success git model over view"></p>
<h3 id="Decentralized-managed"><a href="#Decentralized-managed" class="headerlink" title="Decentralized managed"></a>Decentralized managed</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/centr-decentr.png" alt="success git model part"></p>
<h3 id="Main-branches"><a href="#Main-branches" class="headerlink" title="Main branches"></a>Main branches</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/bm002.png" alt="success git model Main branches"></p>
<h3 id="Merge-without-new-feature"><a href="#Merge-without-new-feature" class="headerlink" title="Merge without new feature"></a>Merge without new feature</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/merge-without-ff.png" alt="success git model Feature branches"></p>
<h3 id="Hotfix-branches"><a href="#Hotfix-branches" class="headerlink" title="Hotfix branches"></a>Hotfix branches</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/hotfix-branches1.png" alt="success git model Hotix branches"></p>
<h2 id="Git遠端的協議"><a href="#Git遠端的協議" class="headerlink" title="Git遠端的協議"></a>Git遠端的協議</h2><ul>
<li>file://：<ul>
<li>直接使用本機進行操作</li>
</ul>
</li>
<li>ssh://：<ul>
<li>效率好、但不可匿名訪問、提供最佳的安全性</li>
</ul>
</li>
<li>git://：<ul>
<li>速度最快的方式、但缺認證機制，適合僅讀取使用的情境</li>
</ul>
</li>
<li>http:// or https://：<ul>
<li>最簡單的操作但速度是裡面最差的</li>
</ul>
</li>
</ul>
<h2 id="Git基本指令"><a href="#Git基本指令" class="headerlink" title="Git基本指令"></a>Git基本指令</h2><p>預設的Branch叫作master，而預設的Remote叫作Origin</p>
<ul>
<li>取得Git版本<ul>
<li><code>git --version</code></li>
</ul>
</li>
<li>在當下目錄初始化儲存庫<ul>
<li><code>git init</code></li>
</ul>
</li>
<li>複製別人的Repository<ul>
<li><code>git clone https://github.com/angular/material</code></li>
</ul>
</li>
<li>檢視當下目錄的狀態<ul>
<li><code>git status</code></li>
</ul>
</li>
<li>新增檔案<ul>
<li><code>git add</code></li>
</ul>
</li>
<li>提交修改<ul>
<li><code>git commit</code></li>
</ul>
</li>
<li>更新檔案<ul>
<li><code>git add -u filename</code></li>
</ul>
</li>
<li>刪除檔案<ul>
<li><code>git rm filename</code></li>
</ul>
</li>
<li>重置檔案狀態<ul>
<li><code>git reset HEAD</code></li>
</ul>
</li>
<li>復原檔案變更<ul>
<li><code>git checkout --</code></li>
</ul>
</li>
<li>清除未追蹤的檔案<ul>
<li><code>git clean</code></li>
</ul>
</li>
<li>查看現在版本與最新版本的變更<ul>
<li><code>git diff HEAD</code></li>
</ul>
</li>
<li>Log查詢<ul>
<li><code>git log</code></li>
</ul>
</li>
</ul>
<h2 id="Git-Client安裝與工具"><a href="#Git-Client安裝與工具" class="headerlink" title="Git Client安裝與工具"></a>Git Client安裝與工具</h2><p>Git主體程式請至<a href="http://git-scm.com/" target="_blank" rel="external">Git官網</a>下載，除了使用cmd指令的方式來更新外，另外也有幾個不錯的工具介紹給大家</p>
<h3 id="Git-for-Windows"><a href="#Git-for-Windows" class="headerlink" title="Git for Windows"></a><a href="http://msysgit.github.io/" target="_blank" rel="external">Git for Windows</a></h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/gw1.png" alt="gw1"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/gw2.png" alt="gw2"></p>
<p>除了強化傳統的Git BASH操作外，另外加上提供簡單的Git GUI操作畫面，輕量但高效率的傳輸是Windows使用者一定要安裝的套件</p>
<h3 id="GitHub-Windows-與-GitHub-Mac"><a href="#GitHub-Windows-與-GitHub-Mac" class="headerlink" title="GitHub Windows 與 GitHub Mac"></a><a href="http://windows.github.com/" target="_blank" rel="external">GitHub Windows</a> 與 <a href="https://mac.github.com/" target="_blank" rel="external">GitHub Mac</a></h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/screenshot-overview%402x.png" alt="windows"><br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/screenshot-overview-mac%402x.png" alt="Mac"></p>
<p>由 GitHub 官方開發的工具，提供給對 Git 沒有很了解的人用的，用簡潔與好上手的的 GUI 介面，對 Git 完全沒有概念的人來說較好上手。</p>
<h3 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a><a href="http://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a></h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/sourcetree_hero_win_full_interface_windows.png" alt="tree"></p>
<p>是一套非常完整的Git GUI工具，整合完整的圖像表達與流程操作的方式，可以讓你對於整個專案的版本控管一目瞭然。所有的Git指令列功能都能夠過GUI 介面用滑鼠操作完成。</p>
<p><strong><em>SourceTree與GitHub for windows的Git Shell 都是透過Git for Windows 工具進行版本操作，如果你沒有事先安裝 Git for Windows 的話這部分功能將無法使用，強烈建議先行安裝Git for Windows。</em></strong></p>
<p>其他更多的GUI工具可以參考官方整理<a href="http://git-scm.com/downloads/guis" target="_blank" rel="external">GUI Clients</a></p>
<h2 id="GitHub-介紹"><a href="#GitHub-介紹" class="headerlink" title="GitHub 介紹"></a>GitHub 介紹</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/github-logo.jpg" alt="GitHub"></p>
<p>GitHub是一個共享雲端主機服務，提供一個線上的Git Server讓你可以免費使用(儘可建立公開專案)或是付費可建立非公開的私人專案，目前已有許多Open Source的專案轉至GitHub上讓大家共同撰寫與維護。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/git%20fee.PNG" alt="Git fee"></p>
<h2 id="使用EC2建立Git-Server"><a href="#使用EC2建立Git-Server" class="headerlink" title="使用EC2建立Git Server"></a>使用EC2建立Git Server</h2><h3 id="AWS-EC2-簡介"><a href="#AWS-EC2-簡介" class="headerlink" title="AWS EC2 簡介"></a>AWS EC2 簡介</h3><p>AWS Elastic Compute Cloud簡稱為EC2，是Amazon一個提供雲端電腦的服務，它可以讓你去管理屬於你自己的主機並在上面做你平常對電腦做的任何事情，只是在主機架設在Amazon那邊放在雲端上使用。</p>
<h2 id="使用Azure建立Git-Server"><a href="#使用Azure建立Git-Server" class="headerlink" title="使用Azure建立Git Server"></a>使用Azure建立Git Server</h2><h3 id="Microsoft-Azure-簡介"><a href="#Microsoft-Azure-簡介" class="headerlink" title="Microsoft Azure 簡介"></a>Microsoft Azure 簡介</h3><h2 id="實戰Git"><a href="#實戰Git" class="headerlink" title="實戰Git"></a>實戰Git</h2><ul>
<li>git clone URL LOCAL #  取得程式碼</li>
<li>git checkout -b BRANCH #  開個自己用的branch</li>
<li><h1 id="修改你的程式碼或文件"><a href="#修改你的程式碼或文件" class="headerlink" title="修改你的程式碼或文件"></a>修改你的程式碼或文件</h1></li>
<li>git add MODIFY-FILE #  將修改的程式碼加入要 commit 的範圍</li>
<li>git status #  確認你要 commit 的東西是否正確</li>
<li>git commit  #  送出 commit</li>
<li>git log #  看一下 log 是否程式碼已經成功 commit</li>
</ul>
<h2 id="學習資源整理"><a href="#學習資源整理" class="headerlink" title="學習資源整理"></a>學習資源整理</h2><p>這邊幫大家整理了一些好上手的學習資源</p>
<ul>
<li><a href="http://ihower.tw/git/" target="_blank" rel="external">Git 版本控制系統</a>這提供了完整的Git教學與經驗分享，是新手上路老手挖寶的絕佳去處</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/ihower.PNG" alt="ihower"></p>
<ul>
<li><a href="http://pcottle.github.io/learnGitBranching" target="_blank" rel="external">Learning Git Branching</a>這是一個很酷的GitHub專案，目標再讓新手透過實作與動態展示的方式學習Git的各項指令與實際來解決問題，大家準備好來動手玩玩看了嗎?</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140712/learn%20git%20branching.PNG" alt="Learning Git Branching"></p>
<p>另外提供兩個學習EC2與Azure的參考連結幫大家快速上手</p>
<ul>
<li><a href="http://blog.hinablue.me/entry/aws-working-with-amazon-aws" target="_blank" rel="external">AWS EC2教學</a></li>
<li><a href="http://blog.sanc.idv.tw/p/windows-azure.html" target="_blank" rel="external">Azure 教學</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[c# ternary operator, null coalescing operator and var]]></title>
      <url>http://blackie1019.github.io/2014/05/04/csharp-ternary-operator-null-coalescing-operator-and-var/</url>
      <content type="html"><![CDATA[<p>在寫程式中往往會遇到一些簡化程式碼的簡寫，如foreach在C# 3.0有了LinQ與Lambda表態是後就漸漸的被少用了(在大型的開發架構下看的懂程式碼的架構才是第一步最重要的,除了效能考量外)</p>
<a id="more"></a>
<h2 id="c-的"><a href="#c-的" class="headerlink" title="c#的?:"></a>c#的?:</h2><p>這是傳統的三元運算子(ternary operator)的使用方式，</p>
<pre><code>test ? expression1 : expression2
</code></pre><p>範例如下:</p>
<pre><code>int a= b &gt; 1 ? b : c ;
</code></pre><p>上面這個範例的意思就是宣告一個變數a，並判斷如果b的值&gt;1就將b值給a，否則則將c值給a。</p>
<p>透過三元運算子我們可以簡化不少反鎖的if statement，這讓我們的程式碼更容易被閱讀。</p>
<h2 id="C-的"><a href="#C-的" class="headerlink" title="C#的??"></a>C#的??</h2><p>而??這是C# 2.0之後出來運算子，主要用在判別test!=null(null coalescing operator)的情況,</p>
<pre><code>test ?? expression1 : expression2
</code></pre><p>這邊我們先用傳統的三元運算子寫出判別!=null的code:</p>
<pre><code>object A = B != null ? B : C ;
</code></pre><p>接著我們將上面用??改寫</p>
<pre><code>object A =  B ?? C ;
</code></pre><p>而??有另外一個特性就是可以直接串連，如下:</p>
<pre><code>object A =  B ?? C ?? D ?? E ?? F;
</code></pre><p>意思就是B如果是null就傳C,C如果是null就穿D…最後如果BCDE都null就傳F。</p>
<p>這樣是不是減少很多if statement與ternary operator!</p>
<h2 id="var的用法"><a href="#var的用法" class="headerlink" title="var的用法"></a>var的用法</h2><p>另外，在C# 3.0 變數宣告可透過隱含型別的方式來做為宣告，隱含型別區域變數是強型別 (Strongly Typed)，就和自行宣告型別一樣，差別在於隱含型別是由編譯器 (Compiler) 判斷型別。</p>
<pre><code>// implicitly typed
var test = 100;
var test2 =&quot;123&quot;;

//explicitly typed
int test = 100;
string test2 =&quot;123&quot;;
</code></pre><p>對於這個部份的介紹小弟推薦另外一篇MVP-91 所撰寫的介紹文會更為詳細</p>
<p><a href="http://msdn.microsoft.com/zh-tw/library/dn467616.aspx" target="_blank" rel="external">快快樂樂學 LINQ - 前哨戰 - var 與匿名型別</a></p>
<p>這邊截錄一個重點:</p>
<blockquote>
<p>什麼時候不用var？對我來說，只有兩種情況：</p>
<p>第一，要用到多型的時候，尤其是變數的型別為interface，這如果用var，變數型別就直接變成concrete class的型別了，雖說執行上不會有任何問題，但在開發上意義可完全不同，加上使用變數時看到的雜訊，會讓我不太愉悅，所以在運用多型的設計上，我不會用var。</p>
<p>第二，top-down的設計方式，當我還沒有實際的方法時，我不會用var。因為用Visual Studio的產生功能，會判斷成object，這樣我還要移過去改，太麻煩了，所以這類的宣告，我會想好型別宣告後，再透過產生功能來幫忙產生function的殼。</p>
</blockquote>
<p>簡單來講就是用vs開發的話就安心交給工具來幫你整理吧~</p>
<p>其他可以幫忙簡化的工具要花錢的就是<a href="http://www.jetbrains.com/resharper/" target="_blank" rel="external">Resharper</a>，免錢的就是<a href="http://visualstudiogallery.msdn.microsoft.com/76293c4d-8c16-4f4a-aee6-21f83a571496" target="_blank" rel="external">CodeMaid</a></p>
<p>透過上面三個簡單的步驟來一起簡化/美化程式碼吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker Introduce and Hands on LAB]]></title>
      <url>http://blackie1019.github.io/2014/04/17/docker-introduce-and-hands-on-lab/</url>
      <content type="html"><![CDATA[<p>Build, Ship and Run. Any App, Anywhere! 這就是Docker寫在官網上面對自己最簡單的描述。</p>
<a id="more"></a>
<h2 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker"></a>What is Docker</h2><p><a href="https://www.docker.com/" target="_blank" rel="external">Docker官方連結</a></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/logo.png" alt="log"></p>
<blockquote>
<p>Build, Ship and Run. Any App, Anywhere!</p>
</blockquote>
<p>這就是Docker寫在官網上面對自己最簡單的描述。</p>
<p>Docker是一個</p>
<p>目前Docker有超過14,000公開的Applicaion，而其中很多知名大廠都已經有官方支援的Repository了，而最後的Hand on Lab也會教大家如何將自己的Applicaion與使用這些公開的Repository，來建置自己的環境。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/Office%20repositories.png" alt="Offical Repositories"></p>
<ul>
<li><h4 id="Docker-Engine"><a href="#Docker-Engine" class="headerlink" title="Docker Engine"></a>Docker Engine</h4><p>A portable, lightweight application runtime and packaging tool.</p>
</li>
<li><h4 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h4><p>A cloud service for sharing applications and automating workflows.<br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/life%20cycle.gif" alt="life cycle"><br><a href="http://blog.docker.com/2014/06/announcing-docker-hub-and-official-repositories/" target="_blank" rel="external">http://blog.docker.com/2014/06/announcing-docker-hub-and-official-repositories/</a></p>
</li>
</ul>
<h3 id="Different-with-classic-server-virtualization"><a href="#Different-with-classic-server-virtualization" class="headerlink" title="Different with classic server virtualization"></a>Different with classic server virtualization</h3><p>Docker的架構使用Container技術，雖然都屬於虛擬化的技術，且目標也同為將一套應用程式所需的執行環境打包起來，同為建立一個獨立環境，方便在不同的實體伺服器(硬體)環境使用，但兩者的運作與想法是完全不同的。</p>
<p>這邊做簡單說明並用圖解做一個區分：</p>
<ul>
<li><h4 id="Classic-Server-Virtualization："><a href="#Classic-Server-Virtualization：" class="headerlink" title="Classic Server Virtualization："></a>Classic Server Virtualization：</h4><p>傳統虛擬化技術如vSphere或Hyper-V是以作業系統為中心。目標是建立一個可以用來執行整套作業系統的沙箱獨立執行環境，習慣以虛擬機器（Virtual Machine）來稱呼，而虛擬機器需要安裝作業系統（安裝Guest OS）才能執行應用程式。<br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/Server%20virtauliztion.png" alt="Server virtaulization"></p>
</li>
<li><h4 id="Container-Virtualization"><a href="#Container-Virtualization" class="headerlink" title="Container Virtualization:"></a>Container Virtualization:</h4><p>以應用程式為中心的虛擬化技術。將所需的相關程式碼、函式庫、環境配置檔都打包起來建立沙箱執行環境，所產生的環境就叫做Container，Container內不需要安裝作業系統就能執行應用程式。不同於classic server virtualization在OS外建立虛擬環境，container virtualization是在OS內的核心系統層(System Core/Kernel)來打造虛擬執行環境，透過共用Host OS的作法，取代一個一個Guest OS的功用。<br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/Container%20virtualization.png" alt="Container virtualization"></p>
</li>
</ul>
<h3 id="Docker-is-Light-weight"><a href="#Docker-is-Light-weight" class="headerlink" title="Docker is Light-weight"></a>Docker is Light-weight</h3><p>看完兩張圖我們要回來講Docker的<em>輕量化</em>，相對於我們主要的Application檔案大多只有MB等級來相比，GuestOS與Bin/Lib所佔據的空間都是GB起跳。而傳統使用VM的虛擬化技術因為各別包含這些重複的肥大的檔案，所以每個VM會比Continer檔案都還要肥大不少。</p>
<h3 id="One-Container-One-application"><a href="#One-Container-One-application" class="headerlink" title="One Container One application"></a>One Container One application</h3><p>Docker 使用一種叫做Microservices（微服務）的架構，把一個應用系統組成的每一個Stack，依序分解成許多小型服務，而每一個服務就是包含在Container的一隻程式。</p>
<p>而一個Container的映象檔內可以安裝多支程式，例如同時安裝MSSQL、Node.js、ASP.net Web application等。但Docker官方建議，一隻程式安裝在一個Container內，再把需要使用到的Container疊起來提供一個完整的服務。</p>
<p>如此一來提供了更好更換服務的流程，更新時只會讓對應的服務重新載入Container映像檔(reload)即可，不用將全部的服務都停止或重載，這邊與傳統的VM概念就有一個不小的差異摟.</p>
<p>如果想要在一個Container做建置Application可以參考此篇<a href="http://www.centurylinklabs.com/build-a-2-container-app-with-docker/" target="_blank" rel="external">How To Build A 2-Container App with Docker</a></p>
<h3 id="Docker-help-Devops"><a href="#Docker-help-Devops" class="headerlink" title="Docker help Devops"></a>Docker help Devops</h3><p>因為Docker使用Dockerfile來記錄建立Container映象檔的每一個步驟(change)，可以將建立應用程式執行環境的過程和配置參數，完整地記錄下來。這也意味著Dockerfile這是一個可以被加入版本控制流程的一個檔案，而這樣的改變讓原本建立環境的過程不會再無跡可循，也可以不用在第一時間準備安裝流程之類的文件(如果要比較設定或改變，可以直接比較差異)，測底改善發佈與開發的流程，將基礎架構程式化（Infrastructure as code）來管理。</p>
<h2 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h2><p>看了這麼多圖文，就讓我們來實際玩玩Docker吧，前置動作的流程如下：</p>
<ol>
<li><p>You’ll search for and find an image another user built and shared in the Docker Hub Registry, a cloud-based collection of applications.</p>
</li>
<li><p>You’ll download and run it - running images are containers - and have it output ‘hello world’.</p>
</li>
<li><p>Then you’ll install the ‘ping’ utility into the container, commit all your changes, and run a test of your updated image.</p>
</li>
<li><p>Finally, you’ll push your image to the Docker Hub Registry so that other developers can find and use it…</p>
</li>
</ol>
<p>…on a laptop, a VM in a data center, or a public cloud instance, without having to change anything at all about the image!</p>
<p>首先我們先去官方的<a href="https://www.docker.com/tryit/" target="_blank" rel="external">Tryit</a>，畫面如下：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/tryit.png" alt="Tryit"></p>
<h3 id="Docker-with-Windows"><a href="#Docker-with-Windows" class="headerlink" title="Docker with Windows"></a>Docker with Windows</h3><p>因為Docker Engine是使用Linux-specific kernel，所以如果要在Windows上面使用的話還是需要先透過一個輕量的VM來作為載體。在這邊我們會用到<a href="https://github.com/boot2docker/boot2docker" target="_blank" rel="external">Boot2Docker</a>這個工具來幫我們。</p>
<p>這邊安裝步驟如下：</p>
<p>-</p>
<p>也附上官方Demo影片教你如何安裝</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/oSHN8_uiZd4" frameborder="0" allowfullscreen></iframe>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>接下來應該會弄個Docker系列文章，順便為了鐵人賽做好準備(兩年都棄賽了XD)，對此技術有興趣的朋友歡迎一起討論與學習進步摟。</p>
<p>另外，因為有人寫信問說blog的一些圖表跟流程圖用什麼工具畫的，我習慣上都用<a href="https://cacoo.com" target="_blank" rel="external">Cacoo</a>去畫圖，上面提供了很多基本的流程圖(包含UML)或是Mocup所需的框架元素(手機或是個項目Icon)。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Docker/Cacoo.png" alt="Cacoo"></p>
<p>但也有很多漂亮一點的圖我都是找網路上大大的blog或表達意像的圖片，記得使用前要附上出處與禮貌的跟大神們請示一下能否分享瞜。</p>
<h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><ul>
<li><a href="https://docs.docker.com/installation/windows/" target="_blank" rel="external">Docker Install on Windows</a></li>
<li><a href="https://blog.gslin.org/archives/2014/05/17/4656/%E7%B8%BD%E7%AE%97%E6%98%AF%E6%90%9E%E5%AE%9A-vagrant-docker/" target="_blank" rel="external">Vagrant + Docker</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to Control YouTube AutoPlay and Play after another video end]]></title>
      <url>http://blackie1019.github.io/2014/04/13/using-javascript-to-control-youtube-autoplay-and-play-after-another-video-end/</url>
      <content type="html"><![CDATA[<p>今天被一個朋友問起如何控制embed的YouTube影片，讓他可以自動撥放也可以在播放完後讓另外一個embed的影片也播放。</p>
<a id="more"></a>
<p>這邊先介紹一下官方的API ─ <a href="https://developers.google.com/youtube/iframe_api_reference?hl=zh-tw" target="_blank" rel="external">Youtube IFrame API</a></p>
<h2 id="What-is-Youtube-IFrame-API"><a href="#What-is-Youtube-IFrame-API" class="headerlink" title="What is Youtube IFrame API"></a>What is Youtube IFrame API</h2><p>Youtube iFrame API是Google官方提供的一組JavaScript Library讓我們可以輕鬆控制嵌入的影片，但不同於<a href="https://developers.google.com/youtube/flash_api_reference?hl=zh-tw" target="_blank" rel="external">Flash</a> 與 <a href="https://developers.google.com/youtube/js_api_reference?hl=zh-tw" target="_blank" rel="external">JavaScript</a> player API都在網頁內嵌入一個Flash object的概念，IFrame API 使用 <code>&lt;iframe&gt;</code> tag ，在HTML5的支援下這提供了更穩固的播放基礎。</p>
<p>它目前的功能包括：</p>
<ul>
<li>Play(include seeks to a specified time), Pause and Stop Video</li>
<li>Video information</li>
<li>Queueing functions</li>
<li>Quality、Mute、Volume、Screen Size Control</li>
<li>Can Get Player State<ul>
<li>1 – unstarted</li>
<li>0 – ended</li>
<li>1 – playing</li>
<li>2 – paused</li>
<li>3 – buffering</li>
<li>5 – video cued</li>
</ul>
</li>
</ul>
<h2 id="Hand-on-Lab"><a href="#Hand-on-Lab" class="headerlink" title="Hand on Lab"></a>Hand on Lab</h2><p>在開發上主要透過Create 一個<code>YT.Player</code> object的方式去操控處理，基本的操控如下:</p>
<p><a class="jsbin-embed" href="http://jsbin.com/yasar/2/embed?html,css,js,console,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>接下來介紹如何使用這個API1幫我們完成在ㄧ個Player播放完影片後自動trigger另外一個player播放，範例如下：</p>
<p><a class="jsbin-embed" href="http://jsbin.com/wevuka/2/embed?html,css,js,console,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>如此一來透過這個API我們就可以很輕鬆的處理影片播放的任何需求了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript reserved word(保留字)]]></title>
      <url>http://blackie1019.github.io/2014/04/13/javascript-reserved-word/</url>
      <content type="html"><![CDATA[<p>這禮拜在看以前的code的時候看到前人使用保留字的來宣告變數名稱的js code，可能當時的時空背景允許這樣的事情發生，但想到以後如果部門還有小朋友的話要告訴他們的正確的觀念所以寫了這篇來Memo一下。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140114/reserved.jpg" alt="reserved"></p>
<h2 id="What-is-reserved-word"><a href="#What-is-reserved-word" class="headerlink" title="What is reserved word"></a>What is reserved word</h2><p>reserved word就是在程式裡預先保留的文字，大多有特殊用途與意涵或本身附帶一些功能與屬性，在正常的情況下不能用來當作參數或變數的命名</p>
<h2 id="How-To-use-reserved-word"><a href="#How-To-use-reserved-word" class="headerlink" title="How To use reserved word"></a>How To use reserved word</h2><p>那如何在非正常的情況下來使用這些保留字勒</p>
<p>一般的NG使用法，我們以保留字import為例:</p>
<ul>
<li>a.import = value</li>
<li>var import = value</li>
<li>a = { import:value }</li>
</ul>
<p>可以使用保留字的用法</p>
<ul>
<li>a[‘import’]=value</li>
<li>a = { ‘import’: value }</li>
</ul>
<h3 id="目前的保留字詳情請參考"><a href="#目前的保留字詳情請參考" class="headerlink" title="目前的保留字詳情請參考"></a>目前的保留字<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FReserved_Words" target="_blank" rel="external">詳情請參考</a></h3><p>比較常用到的有以下的(JavaScript目前的版本對照到ECMAScript 3)</p>
<ul>
<li>abstract</li>
<li>boolean</li>
<li>byte</li>
<li>char</li>
<li>class</li>
<li>const</li>
<li>debugger</li>
<li>double</li>
<li>enum</li>
<li>export</li>
<li>extends</li>
<li>final</li>
<li>float</li>
<li>goto</li>
<li>implements</li>
<li>import</li>
<li>int</li>
<li>interface</li>
<li>long</li>
<li>native</li>
<li>package</li>
<li>private</li>
<li>protected</li>
<li>public</li>
<li>short</li>
<li>static</li>
<li>super</li>
<li>synchronized</li>
<li>throws</li>
<li>transient</li>
<li>volatile</li>
</ul>
<h3 id="以下是未來保留字-最新的JavaScript版本應該會符合ECMAScript-5-："><a href="#以下是未來保留字-最新的JavaScript版本應該會符合ECMAScript-5-：" class="headerlink" title="以下是未來保留字(最新的JavaScript版本應該會符合ECMAScript 5)："></a>以下是未來保留字(最新的JavaScript版本應該會符合ECMAScript 5)：</h3><ul>
<li>class</li>
<li>enum</li>
<li>export</li>
<li>extends</li>
<li>import</li>
<li>super</li>
</ul>
<h3 id="strict-模式中的未來保留字"><a href="#strict-模式中的未來保留字" class="headerlink" title="strict 模式中的未來保留字"></a>strict 模式中的未來保留字</h3><p>以下是僅限於 strict 模式中的未來保留字。 如需 strict 模式的詳細了解，請參考之前的文章<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/08/30/115977.aspx" target="_blank" rel="external">[JavaScript]use strict(嚴格模式)-strict mode 介紹</a></p>
<ul>
<li>implements</li>
<li>interface</li>
<li>package</li>
<li>private</li>
<li>protected</li>
<li>public</li>
<li>static</li>
<li>yield</li>
</ul>
<h3 id="More-reserved-words"><a href="#More-reserved-words" class="headerlink" title="More reserved words"></a>More reserved words</h3><p>JavaScript 的保留字 (reserved word)  、未來保留字 (future reserved word) 另外包括關鍵字 (keyword)還有最常使用到的三個字面常數 (literal) ，分別是 null 、 true 、 false 。</p>
<p>關鍵字包含:</p>
<ul>
<li>break</li>
<li>case</li>
<li>catch</li>
<li>continue</li>
<li>default</li>
<li>delete</li>
<li>do</li>
<li>else</li>
<li>finally</li>
<li>for</li>
<li>function</li>
<li>if</li>
<li>in</li>
<li>instanceof</li>
<li>new</li>
<li>return</li>
<li>switch</li>
<li>this</li>
<li>throw</li>
<li>try    with</li>
<li>typeof</li>
<li>var</li>
<li>while</li>
<li>with</li>
</ul>
<h2 id="Avoid-use-reserved-words"><a href="#Avoid-use-reserved-words" class="headerlink" title="Avoid use reserved words"></a>Avoid use reserved words</h2><p>強烈建議不要使用保留字，如開頭所說，這些字叫做保留字就代表它們有特別的意涵與功能，請按照規則撰寫程式，好的規則與習慣可以讓你的程式可讀性大增!</p>
<p>所以，如果以後在以前的專案還有看到這些保留字被使用就順手把它改掉吧，套句<a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="external">clean code</a>所說的:”與其幫一段完全錯誤的程式碼寫上註解不如動手改善它吧”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[.NET MVC Multiple types were found that match the controller named 'XXX']]></title>
      <url>http://blackie1019.github.io/2014/02/17/multiple-types-were-found-that-match-the-controller-named-xxx/</url>
      <content type="html"><![CDATA[<p>解決重複註冊多個的Routing問題</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在MVC的架構，當我們要註冊一個routing時我們通常會用以下方法註冊</p>
<pre><code>routes.MapRoute(
    &quot;Default&quot;,
    &quot;{controller}/{action}/{id}&quot;,
    new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional }
);
</code></pre><p>上面我們很簡單的註冊了一個Default的routing給Home這個Controller，但當我們有引用dll的時候好死不好dll裡面也有包入一個同樣名稱的Controller時就會導致.net拋出以下錯誤</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140219/controller.png" alt="controller"></p>
<h2 id="How-to-fix-it"><a href="#How-to-fix-it" class="headerlink" title="How to fix it"></a>How to fix it</h2><p>解決辦法有兩種，一種是設定單一Routing的Controller Namespace</p>
<pre><code>routes.MapRoute(
    &quot;Default&quot;,
    &quot;{controller}/{action}/{id}&quot;,
    new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional },
    new[] {&quot;YourCurrentProjectNamespace.WebSite.Controllers&quot;}
);
</code></pre><p>另外一種就是把整個site的Routing都設定預設的Controller Namespace</p>
<pre><code>ControllerBuilder.Current.DefaultNamespaces.Add(&quot;YourCurrentProjectNamespace.WebSite.Controllers&quot;);
</code></pre><p>以上的設定都在App_Start&gt;RouteConfig.cs中</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Set Default Page to Hybrid Web Application(MVC and Web Form)]]></title>
      <url>http://blackie1019.github.io/2014/02/16/set-default-page-to-hybrid-web-application-mvc-and-web-form/</url>
      <content type="html"><![CDATA[<p>關於MVC架構下的Default Page的機制</p>
<a id="more"></a>
<p>在MVC架構，如果要設定預設的Default Page給MVC，我們可以在RoutConfig.cs中設定Default的MVC Controller來讓他接收，如下:</p>
<pre><code>public static void RegisterRoutes(RouteCollection routes)
{
  // MVC default
  routes.MapRoute(
    &quot;Default&quot;,                          // Route name
    &quot;{controller}/{action}/{id}&quot;,       // URL with parameters
    new { controller = &quot;Home&quot;,
          action = &quot;Index&quot;,
          id = UrlParameter.Optional }  // Parameter defaults
  );
}
</code></pre><p>而如果要設定Hybrid(WebForm與MVC同時存在的架構)的Routing時需要注意一下先後順序，避免Routing註冊不到</p>
<pre><code>public static void RegisterRoutes(RouteCollection routes)
{
  routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);
  routes.IgnoreRoute(&quot;{myWebForms}.aspx/{*pathInfo}&quot;);

  // Web Forms default
  routes.MapPageRoute(
    &quot;WebFormDefault&quot;,
    &quot;&quot;,
    &quot;~/default.aspx&quot;);

  // MVC default
  routes.MapRoute(
    &quot;Default&quot;,                          // Route name
    &quot;{controller}/{action}/{id}&quot;,       // URL with parameters
    new { controller = &quot;Home&quot;,
          action = &quot;Index&quot;,
          id = UrlParameter.Optional }  // Parameter defaults
  );
}
</code></pre><p>至於架構的原因待了解後在分享給大家了…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Callback function and how to override jQuery method]]></title>
      <url>http://blackie1019.github.io/2014/02/16/callback-function-and-how-to-override-jquery-method/</url>
      <content type="html"><![CDATA[<p>關於Callback這是一個在javascript很重要的機制</p>
<a id="more"></a>
<p>在開始前先截錄一下它的解釋</p>
<blockquote>
<p>A reference to executable code, or a piece of executable code, that is passed as an argument to other code.</p>
</blockquote>
<p>先從一張圖來講一下他到底是在幹嘛。</p>
<p>國外朋友也寫了篇很好的說明文，有興趣的朋友可以參考<a href="http://www.impressivewebs.com/callback-functions-javascript/" target="_blank" rel="external">Callback Functions in JavaScript</a></p>
<pre><code>function test(param1, param2, callback) {
    console.log(&apos;this is a test: &apos; + param1 + &apos;, &apos; + param2);
    if (callback &amp;&amp; typeof(callback) === &quot;function&quot;) {
        callback();
    }
}
</code></pre><h2 id="override-jQuery-method"><a href="#override-jQuery-method" class="headerlink" title="override jQuery method"></a>override jQuery method</h2><p>這邊順邊說明如何override jQuery的method,我們以html()這個method來看，<a href="https://api.jquery.com/html/" target="_blank" rel="external">.html()說明</a></p>
<p>由官方說明看來這個method預設只能讓你換內容</p>
<ul>
<li><p>.html( htmlString )</p>
<ul>
<li><b>htmlString</b></li>
<li>Type: htmlString</li>
<li>A string of HTML to set as the content of each matched element.</li>
</ul>
</li>
<li><p>.html( function(index, oldhtml) )</p>
<ul>
<li><b>function(index, oldhtml)</b></li>
<li>Type: Function()</li>
<li>A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.</li>
</ul>
</li>
</ul>
<p>先在我們要幫他加上一個callback的功能只要</p>
<pre><code>$(function () {
    $.fn.htmlOriginal = $.fn.html;
    $.fn.html = function (html, callback) {
        this.htmlOriginal(html);
        if (callback&amp;&amp;typeof (callback) === &quot;function&quot;) {
            callback();
        }
    };
});
</code></pre><p>有沒有很簡單，使用上只要如下即可:</p>
<pre><code>$(&apos;#test&apos;).html(content,function(){
    console.log(&quot;test2&quot;);
});
</code></pre><h2 id="vs"><a href="#vs" class="headerlink" title="== vs ==="></a>== vs ===</h2><p>簡單說明一下:</p>
<ul>
<li><p>== 比較兩者是否相等</p>
<p>  EX:</p>
<pre><code>100==&quot;100&quot;    //true
1==true        //true
</code></pre></li>
<li><p>=== 比較兩者是否相等(還包含類型的相等)</p>
<p>  EX:</p>
<pre><code>100===&quot;100&quot; //false
1===true    //false
</code></pre></li>
</ul>
<p>這邊順便說明為什麼typeof要用三個等於，我們先看Mozilla的文件<a href="https://developer.mozilla.org/zh-TW/docs/JavaScript/Reference/Operators/typeof" target="_blank" rel="external">typeof</a></p>
<p>從文件可以看到</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140218/typeof.PNG" alt="typeof"></p>
<p>所以簡單來講回傳的就是文字瞜，所以就可以透過===來更嚴謹的作辦定條件。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Edit Hosts file in Mac OS X with Terminal]]></title>
      <url>http://blackie1019.github.io/2014/01/17/edit-hosts-file-in-mac-os-x-with-terminal/</url>
      <content type="html"><![CDATA[<p>如何在OSX的環境加入自行建立的domain</p>
<a id="more"></a>
<p>Mac的host file 是在/etc/hosts，所以我們可以透過編輯器直接開啓</p>
<pre><code>sudo nano /etc/hosts
</code></pre><p>打開後再加入你要加入的domain</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140118/hosts.png" alt="hosts"></p>
<p>然後按下Control+O 再按下enter存檔後用Control+X離開</p>
<p>接著我們要清空我們現在的DNS資料(cache與正在執行的執行檔）</p>
<pre><code>dscacheutil -flushcache;sudo killall -HUP mDNSResponer
</code></pre><p>接下來就可以在網頁打入你剛剛輸入的domain測試看看摟</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Work with JSHint using Sublime Text 2]]></title>
      <url>http://blackie1019.github.io/2014/01/17/work-with-jshint-using-sublime-text/</url>
      <content type="html"><![CDATA[<p>寫 JavaScript的時候常常會因為他多元的用法(結構較為鬆散或是說它組合較多元)而感到困惑，或因為不好的習慣導致自己浪費了大量效能做出一個很簡單的東西，這邊要如何驗證自己寫的Javascript有沒有水準符不符合基本規範呢？此時除了定義一些開發上面的規範外，我們還需要一些工具來幫我們做檢查，JSLint就是這行的老牌子工具。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140119/jshint.png" alt="LOGO"></p>
<h2 id="JSLint-VS-JSHint"><a href="#JSLint-VS-JSHint" class="headerlink" title="JSLint VS JSHint"></a>JSLint VS JSHint</h2><p>JSLint 定義了一組比 ECMAScript Language Specification 第三版(應該沒比第五版嚴謹，這部分還在追查)所定義的規格中更嚴謹的規格來驗證你的 JavaScript，這邊找到保哥幾年前寫的文章介紹<a href="http://blog.miniasp.com/post/2008/02/24/JSLint-The-JavaScript-Verifier.aspx" target="_blank" rel="external"></a>，有興趣的可以進去看看摟。</p>
<p>而JSHint是JSLint其中一個分支，為什麼寫這個分支的理由在此：<a href="http://anton.kovalyov.net/2011/02/20/why-i-forked-jslint-to-jshint/" target="_blank" rel="external">Why I forked jslint to jshint?</a>．而簡單來講，因為在實務上有些JSLint規範太過嚴格的部分作出了部分的取捨而成的子集就成為了JSHint，而JSHint也還可以讓你自行條件檢查的修改，看是否要開啓或關閉。</p>
<h2 id="Sublime-Text2版"><a href="#Sublime-Text2版" class="headerlink" title="Sublime Text2版"></a>Sublime Text2版</h2><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><ol>
<li>安裝<a href="http://www.sublimetext.com/2" target="_blank" rel="external">Sublime Text2</a></li>
<li>安裝<a href="https://sublime.wbond.net/installation" target="_blank" rel="external">Package Control</a></li>
<li>透過Package Control安裝<a href="https://github.com/victorporof/Sublime-JSHint" target="_blank" rel="external">JSHint</a>套件</li>
</ol>
<h3 id="實際使用流程"><a href="#實際使用流程" class="headerlink" title="實際使用流程"></a>實際使用流程</h3><p>實際經驗是告訴我最好先用html-css-js pretty先做過一次排版你可以少掉很多問題～</p>
<ul>
<li><p><a href="https://github.com/victorporof/Sublime-HTMLPrettify" target="_blank" rel="external">下載</a></p>
</li>
<li><p><a href="http://www.yshpace.com/sublime-texthtmlprettify%E7%B7%A8%E7%A2%BC%E6%8E%92%E7%89%88htmlcssjs/" target="_blank" rel="external">介紹與教學</a></p>
</li>
</ul>
<p>流程上就是先按下command+shift+H用html-css-js pretty從新整理你的code，然後再按下command+shit+J用JSHint來檢查：</p>
<p>以下是原始版本：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140119/jsHint_sublime_1.png" alt="sublime 1"></p>
<p>整理完的的版本：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140119/jsHint_sublime_2.png" alt="sublime 2"></p>
<p>按下JSHint修改完的版本：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140119/jsHint_sublime_3.png" alt="sublime 3"></p>
<p>小小一段code 是不是差異很多啊！，最後的版本會看到它還是有提醒我有兩個沒通過的檢查，但因為這邊跟我使用AngularJS與AngularJS UI-Routing的套件有關，所以我們可以不用管它，這份code就可以開心上git摟!</p>
<h3 id="條件修改"><a href="#條件修改" class="headerlink" title="條件修改"></a>條件修改</h3><p>如果對於預設的檢測需要做條件修改，可到上方的Tools-&gt;JSHint-&gt;Set Linting Preferences就可以進去修改了，如下：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140119/Perferences.png" alt="Preferences"></p>
<p>至於有什麼可以修改的就參考<a href="https://github.com/victorporof/Sublime-HTMLPrettify#using-your-own-jsbeautifyrc-options" target="_blank" rel="external">官方說明</a>摟</p>
<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><p>除了一般手動檢查外，我們也可以透過Tools-&gt;JSHint-&gt;Set Plug Options 設定Sublime Text2插件在環境的特殊選項，讓他在每次編輯或是存檔的時候幫我們做自動檢查。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140119/env.png" alt="env"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在很早很早以前，當JSLint剛推出的時候還要上<a href="http://www.jslint.com/" target="_blank" rel="external">官網</a>把自己的code放進去檢查，現在在開發時的時候就可以養成良好的開發習慣了，小細節成就偉大！千萬不要養成不好的寫法與習慣啊！</p>
<p>而對於最新的ECMA Script5這邊有些JSLint與JSHint的檢查<a href="http://jslinterrors.com/this-is-an-es5-feature/" target="_blank" rel="external">比較</a>，對於這塊還不能很深刻做專研但看來JSLint目前對於ES5的支援是很悲劇的ＱＱ。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript call method(呼叫函式)]]></title>
      <url>http://blackie1019.github.io/2014/01/13/javascript-call-method/</url>
      <content type="html"><![CDATA[<p>因為javascript是一個有無限可能的程式(我指的是寫法XD)，所以這篇是幫js新手了解javascript如何呼叫/寫出函式</p>
<a id="more"></a>
<p>如果你要呼叫一個函式你可以透過以下四個方法:</p>
<ul>
<li><p>function:</p>
<pre><code>var test=function(){
    return &apos;test&apos;;
};
console.log(test());
</code></pre></li>
<li><p>method:</p>
<pre><code>var object={
    test:function(){
        return &apos;test&apos;;
    }
}
console.log(object.test());
</code></pre></li>
<li><p>Constructor:</p>
<pre><code>var People=function(){
    this.name=&apos;blackie&apos;,
    this.gender=&apos;male&apos;
}

var man=new People();
console.log(man);
</code></pre></li>
<li><p>apply() and call()</p>
<pre><code>var object={
    test:function(){
        console.log(this.name,arguments[0],arguments[1]);
    }
}

var man={name:&apos;blackie&apos;};
var woman={name:&apos;karma&apos;};

//Apply()
console.log(&quot;This Apply&quot;);
object.test.apply(man,[&apos;male&apos;,&apos;28&apos;]);

//Call()
console.log(&quot;This Call&quot;);
object.test.call(woman,&apos;female&apos;,&apos;27&apos;);
</code></pre></li>
</ul>
<p>針對apply() and call()其實只有帶入的參數使用的方法不同而已，</p>
<ul>
<li><p>apply()</p>
<p>####lets you invoke the function with arguments as an array.</p>
</li>
<li><p>call()</p>
<p>####requires the parameters be listed explicitly.</p>
</li>
</ul>
<p>從剛剛上面的範例我們看到結果是如下，可以看到其實他們是類似的東西:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140115/applyandcall.PNG" alt="applyandcall"></p>
<p>除了以上幾個四個用法外，常見的還有anonymous function(匿名函式)的呼叫，使用如下:</p>
<pre><code>var tryTest=function(f)
{
    f();
}

tryTest(
    function(){
        console.log(&quot;this is a test&quot;);
    }
);
</code></pre><p>當然依此我們也可以讓函式自己呼叫自己，而透過此自我呼叫的模式即可完成遞迴的功能，使用如下:</p>
<pre><code>var printRemain=function(number)
{
    console.log(number--);
    if(number&gt;0)
    {
        printRemain(number);
    }
}

printRemain(10);
</code></pre><p>結果如下:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140115/remains.PNG" alt="remains"></p>
<p>看到這邊你應該對javascript的函式使用不在陌生了，而透過apply,call與自我呼叫的方式你可以寫出更多可被重複使用的method或是將你的功能切成更多細項來互相交錯使用‧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Register customize .NET MVC Web/WebAPI Routing URL from Reflection]]></title>
      <url>http://blackie1019.github.io/2014/01/11/register-customize-net-mvc-and-webapi-routing-url-from-reflection/</url>
      <content type="html"><![CDATA[<p>分享一下如何動態註冊客製的Routing</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140102/image.jpg" alt="電線杆"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因工作需求，需要將原本的預設Controller\Action\ID或api\Controller\Action\ID的Routing方式都改為只有Action的情況，說明如下:</p>
<p>有一個TestController裡面有一個叫做GetTest的Action Method在預設的Rouing裡面應該會註冊成下面的樣子，</p>
<p><em>http:\domain\Test\GetTest\</em></p>
<p>或是</p>
<p><em>http:\domain\api\Test\GetTest\</em></p>
<p>但這邊需求上面卻要<em>http:\domain\GetTest\</em>，這邊有兩種方式可以幫你達到這樣的需求:</p>
<ol>
<li>在App_Start裡面的RoueCofig.cs或是WebApiConfig.cs裡面針對需要改變的Action手動做額外的註冊</li>
<li>使用Reflection的方式找出共用的類別或是判斷方式後針對要註冊的method透過寫好的迴圈判斷條件做註冊</li>
</ol>
<p>這邊稍微為大家介紹一下如何使用Refactor的方式找出程式裡面既有的controller然後再透過controller裡面的Action去做MVC Web與WebAPI的Routing註冊</p>
<h2 id="About-MVC-WebAPI-Routing"><a href="#About-MVC-WebAPI-Routing" class="headerlink" title="About MVC/WebAPI Routing"></a>About MVC/WebAPI Routing</h2><p>傳統我們在針對.NET MVC的Routing做註冊時會直接增添或修改App_Start裡面的RoueCofig.cs或是WebApiConfig，預設專案裡面的設定應該會長的像下面這樣：</p>
<pre><code>routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);
routes.MapRoute(
    name: &quot;Default&quot;,
    url: &quot;{controller}/{action}/{id}&quot;,
    defaults: new { controller = &quot;Default&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional }
);
</code></pre><p>或是</p>
<pre><code>//Register HttpRoute
config.Routes.MapHttpRoute(
    name: &quot;PostActionApi&quot;,
    routeTemplate: &quot;api/{controller}/{action}&quot;
);
</code></pre><p>透過上面的兩個預設使用方式我們可以知道URL的組成預設就包含了一個Routing名稱、url filter格式、預設控制項(controller與actionName或其他參數等設定)，URL的組成如果有不懂可以看<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/11/04/126536.aspx" target="_blank" rel="external">這篇</a>，或<a href="http://blog.miniasp.com/post/2011/08/01/ASPNET-MVC-Developer-Note-Part-21-Routing-Concepts-and-Skills.aspx" target="_blank" rel="external">保哥的文章</a>‧</p>
<p>而上面有一段<code>routes.IgnoreRoute()</code>這是設定可以忽略的檔案與路徑(過濾掉路由規則定義)，有以下幾種用法</p>
<ul>
<li><p>過濾所有 *.aspx 的路徑</p>
<pre><code>routes.IgnoreRoute(&quot;{resource}.aspx/{*pathInfo}&quot;);
</code></pre></li>
<li><p>過濾 Page 目錄下的所有程式與檔案 (會直接讓IIS 來決定要用何種 Handler 來處理這次 HTTP 要求 )</p>
<pre><code>routes.IgnoreRoute(&quot;Page/{*pathInfo}&quot;);
</code></pre></li>
<li><p>忽略所有在 Page 目錄下的所有檔案 ( 保哥文章提供的另一種寫法 )</p>
<pre><code>routes.Add(new Route(&quot;Page/{*pathInfo}&quot;, new StopRoutingHandler()));
</code></pre></li>
</ul>
<p>基本上我們要注意一個要點，.NET MVC的Routing與IIS的Rouing是兩件事情，所以使用上要稍微注意不是沒註冊就連不到檔案(有可能Rouing的URL與IIS的目錄結構剛好一樣)</p>
<h2 id="Register-customize-MVC-WebAPI-Routing"><a href="#Register-customize-MVC-WebAPI-Routing" class="headerlink" title="Register customize MVC/WebAPI Routing"></a>Register customize MVC/WebAPI Routing</h2><p>而當我們要新增一個customize的Routing的時候可以透過下面的方式寫在App_Start裡面的RoueCofig.cs或是WebApiConfig當中:</p>
<pre><code>routes.MapRoute(
    &quot;Admin&quot;,
    &quot;Admin/{action}&quot;,
    new { controller=&quot;Admin&quot; },
    new { OnlyLocalhostCanApply=new LocalhostConstraint() }
);
</code></pre><p>或</p>
<pre><code>config.Routes.MapHttpRoute(
    name: &quot;PostActionApi&quot;,
    routeTemplate: &quot;api/{controller}/{action}&quot;
);
</code></pre><p>所以回歸到今天的需求如果是只要連到<em>http:\domain\GetTest\</em>的Request都要轉到TestController下面的GetTest這個ActionName來接收，我們應該要註冊一個Routing如下(以WebAPI為例):</p>
<pre><code>config.Routes.MapHttpRoute(
    name: &quot;GetTest&quot;,
    routeTemplate: &quot;api/Test/GetTest&quot;
);
</code></pre><h2 id="Register-customize-MVC-WebAPI-Routing-from-Reflection"><a href="#Register-customize-MVC-WebAPI-Routing-from-Reflection" class="headerlink" title="Register customize MVC/WebAPI Routing from Reflection"></a>Register customize MVC/WebAPI Routing from Reflection</h2><p>如果你今天只有新增一個的話只要透過上面的方式來增加就可以了，但如果你今天是要把所有Controller都做這樣的設定一個一個手動設定實在太白吃了而且如果像我有手殘的情形就會導致頁面連不到的窘境，所以下面就分享如何透過Reflection來抓出所有ActionName後來做各別註冊。</p>
<p>先簡單說一下什麼是Reflection，Reflection官方翻譯反映或鏡射反映(這我比較喜歡)，主要是可應用在動態建立型別的執行個體、繫結型別至現有物件，或從現有物件取得型別，簡單來講就是你可以透過取得一個叫為抽象的類別並透過GetType方式來確認他的型別並建立該型別特有的一些處理行為，有點類似工廠的概念‧</p>
<p>使用Reflection可大幅簡化程式碼複雜度但會稍微付出一些代價，有興趣的可以參考黑大的<a href="http://blog.darkthread.net/post-2011-07-06-reflection-performance.aspx" target="_blank" rel="external">Reflection執行效能測試</a></p>
<p>這邊我直接show上我的controller與action register routing的程式碼</p>
<pre><code> public static class WebApiConfig
{
    public static void Register(HttpConfiguration config)
    {

        //Register HttpRoute
        //config.Routes.MapHttpRoute(
        //    name: &quot;PostActionApi&quot;,
        //    routeTemplate: &quot;api/{controller}/{action}&quot;
        //);

        //RegisterMemberApi by Action to HttpRoute
        RegisterMemberApiAction(config);

    }
    private static void RegisterMemberApiAction(HttpConfiguration config)
    {
        var excludedControllerNames = new List&lt;string&gt;();
        excludedControllerNames.Add(&quot;DefaultController&quot;);
        var controllers = MvcHelper.Instance.GetAllApiControllers(excludedControllerNames);
        foreach (var c in controllers)
        {
            var actionNames = MvcHelper.Instance.GetActionNames(c);
            foreach (var actionName in actionNames)
            {
                var controllerName = c.Name.Replace(&quot;Controller&quot;, &quot;&quot;);
                config.Routes.MapHttpRoute(
                    name: controllerName + actionName,
                    routeTemplate: actionName,
                    defaults: new
                    {
                        controller = controllerName,
                        action = actionName
                    },
                    constraints: new { action = @&quot;^&quot; + actionName + &quot;&quot; }
                );
            }
        }
    }
}
</code></pre><p>MVCHelper.cs</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Web.Http;

namespace Example.Util
{
    public class MvcHelper
    {
        private static MvcHelper _mvcHelper;

        public static MvcHelper Instance
        {
            get
            {
                if (_mvcHelper == null)
                {
                    _mvcHelper = new MvcHelper();
                }
                return _mvcHelper;
            }
            set
            {
                _mvcHelper = value;
            }
        }

        private static List&lt;Type&gt; GetSubClasses&lt;T&gt;()
        {
            return Assembly.GetCallingAssembly().GetTypes().Where(
                type =&gt; type.IsSubclassOf(typeof(T))).ToList();
        }

        public List&lt;Type&gt; GetAllApiControllers(List&lt;string&gt; excludedControllerNames)
        {
            List&lt;Type&gt; controllers = new List&lt;Type&gt;();
            GetSubClasses&lt;ApiController&gt;().ForEach(
                type =&gt; controllers.Add(type));
            foreach (var c in controllers)
            {
                if (excludedControllerNames.Contains(c.Name))
                {
                    controllers.Remove(c);
                }
            }
            return controllers;
        }

        public List&lt;string&gt; GetActionNames(Type controllerType)
        {
            List&lt;string&gt; actionNames = new List&lt;string&gt;();
            var methods = controllerType.GetMethods();
            foreach (var m in methods)
            {
                if (m.IsPublic &amp;&amp; m.ReturnType.IsSubclassOf(typeof(BaseResponseModel)))
                {
                    actionNames.Add(m.Name);
                }
            }
            return actionNames;
        }
    }
}
</code></pre><p>TestController.cs</p>
<pre><code>using System;
using System.Web.Http;

namespace Example.Controllers
{
    public class ServiceLocatorController : ApiController
    {
        [HttpPost]
        public TestResponse GetTest(TestRequest request)
        {
            return GenTestRequest(request);
        }
    }
}
</code></pre><p>TestResponse.cs</p>
<pre><code>using System.Runtime.Serialization;
namespace Example.Models
{
    [DataContract]
    public class TestResponse : BaseResponseModel
    {
        [DataMember]
        public string Value
        {
            get;
            set;
        }

        public TestResponse(BaseResponseModel request)
            : base(request)
        {
        }
    }
}
</code></pre><p>這邊因為我所有的Respone與Request都有一個父類別來給他們繼承所以我直接找尋回傳符合父類別的Method就可以找到他的Controller並幫他註冊對應的Routing，所以透過RegisterMemberApiAction這個method我們就可以把所有符合的Controller跟ActionName註冊起來，很簡單吧。</p>
<h2 id="Combined-with-WebApi-HelpPage"><a href="#Combined-with-WebApi-HelpPage" class="headerlink" title="Combined with WebApi.HelpPage"></a>Combined with WebApi.HelpPage</h2><p>如果是開發WebAPI的朋友應該多少都會安裝WebApi.HelpPage，這邊要稍微注意一下，預設的HelpPage會去抓你已經註冊進入Routing的Method去幫你根據註解(comment)建立文件，所以記得要把vs專案預設建立的WebAPI routing注解或刪除，不然會有把每個method都註冊兩次歐!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Using Git bash with Proxy setting]]></title>
      <url>http://blackie1019.github.io/2013/12/31/using-git-bash-with-proxy-setting/</url>
      <content type="html"><![CDATA[<p>Git一般在使用上都是直接安裝就可以Clone, Pull或Push你想要的專案了，但如果你所在的開發環境需要透過Proxy才可以連外的話，你也必須幫Git設定一些參數才可以方便他透過Proxy來幫你取得外部設定</p>
<a id="more"></a>
<h2 id="Set-Git-with-Proxy"><a href="#Set-Git-with-Proxy" class="headerlink" title="Set Git with Proxy"></a>Set Git with Proxy</h2><p>在我們安裝完Git之後打開Git Bash，輸入<code>git config --list</code> 即可看到目前的設定</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141001/01.png" alt="01"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141001/02.png" alt="02"></p>
<p>這邊有三個重點要設定:</p>
<ol>
<li><p>Http.proxy</p>
<pre><code>git config --global http.proxy http://account:password@proxy Domain:port
</code></pre></li>
<li><p>Https.proxy</p>
<pre><code>git config --global https.proxy https://account:password@proxy Domain:port
</code></pre></li>
<li><p>http.sslcainfo</p>
<pre><code>git config --global http.sslcainfo /bin/curl-ca-bundle.crt
</code></pre></li>
</ol>
<p>這三個要分別設定成對的內容才可以成功的透過Proxy取得git內容，這邊稍微注意一下，如果你輸入的文字是有特殊字符的(例如$#%^…等文字)，你需要將內容轉換成特殊的character codes格式才可以，<br>例如:<br>帳號blackie.tsai<br>密碼$RFV5tgb</p>
<p>再上面的ScreenShot就可以看到其實我打進去setting的密碼是<strong>%24RFV5tgb</strong>而不是<strong>$RFV5tgb</strong></p>
<p>如果需要特殊字符轉碼可以參考<a href="http://www.obkb.com/dcljr/charstxt.html" target="_blank" rel="external">HTML character codes</a></p>
<h2 id="Try-clone-with-git-proxy"><a href="#Try-clone-with-git-proxy" class="headerlink" title="Try clone with git proxy"></a>Try clone with git proxy</h2><p>設定完後我們可以到隨意一個Github公開專案去複製他.git的位置(如下圖)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141001/03.png" alt="03"></p>
<p>然後同樣透過git bash我們輸入<code>git clone https://github.com/angular/angular.js.git</code> 的方式即可clone回來瞜，如下圖再跑進度表即可</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141001/05.png" alt="05"></p>
<p>這邊順到一提如果你要再git bash 貼上文字的話要在git bash的邊框按下右鍵點選Edit&gt;Paste</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141001/04.png" alt="04"></p>
<p>同樣，如果要複製git bash內某段文字內容就點選Edit&gt;Mark然後滑鼠左鍵選完後再按下右建複製即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NTVS - Node.js Tools For Visual Studio Bootcamp]]></title>
      <url>http://blackie1019.github.io/2013/12/26/ntvs-node.js-tools-for-visual-studio-bootcamp/</url>
      <content type="html"><![CDATA[<p>NTVS是微軟上個月底新發行的一個VS tool，幫助開發者使用地表最強IDE工具開發NodeJS!除了支援可以一般的程式撰寫它還支援Intellisense, Profiling, npm，另外他在Debugging方面還支援 locally and remotely (Windows/MacOS/Linux)，最棒的是他整合了Azure Web Sites 與 Cloud Service.</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/Codeplex%20Logo.png" alt="N"></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>所支援的功能包含：</p>
<ul>
<li>node projects</li>
<li>Intellisense</li>
<li>Debugging (local &amp; remote with support for Linux and MacOS)</li>
<li>Profiling</li>
<li>node REPL with multi-line editing</li>
<li>Integrated npm GUI</li>
<li>Azure Web Sites</li>
<li>Azure Cloud Service</li>
<li>Git publishing</li>
</ul>
<p>目前visual studio 2012與2013都可使用(2010與08只能殘念)，整個NodeJS Application從開發、測試到發佈都可以透過VS來完成!真的不愧對”地表最強”這四個字阿!現在就讓我們趕快來安裝與使用吧!</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>安裝上蠻簡單的只要依序完成下面幾個動作即可</p>
<ol>
<li>先下載並安裝<a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a></li>
<li>下載並安裝<a href="https://nodejstools.codeplex.com/releases" target="_blank" rel="external">NTVS</a></li>
<li><p>安裝完成後打開VS選擇New Project-&gt;Installed-&gt;Templates-&gt;Other Languages-&gt;Javascript就可以看到六個新的專案類型</p>
<ul>
<li><p><em><strong>From Existing Node.js code</strong></em></p>
<p>  用現有的NodeJs程式建立新的專案         </p>
</li>
<li><p><em><strong>Blank Node.js Console Application</strong></em></p>
<p>  建立一個空白的NodeJs　Console專案(偏向一般桌面程式應用）</p>
</li>
<li><p><em><strong>Blank Node.js Web Application</strong></em></p>
<p>  建立一個空白的NodeJs　Web專案</p>
</li>
<li><p><em><strong>Blank Express Application</strong></em></p>
<p>  建立一個空白的Express(NodeJs的一種開發架構下面會再提到)專案</p>
</li>
<li><p><em><strong>Blank Windows Azure Node.js Application</strong></em></p>
<p>  建立一個支援Windows Azure　publish整合的NodeJs專案</p>
</li>
<li><p><em><strong>Blank Windows Azure Express Application</strong></em></p>
<p>  建立一個支援Windows Azure　publish整合的Express專案</p>
</li>
</ul>
</li>
</ol>
<h2 id="Hello-world-with-Blank-Node-js-Web-Application"><a href="#Hello-world-with-Blank-Node-js-Web-Application" class="headerlink" title="Hello world with Blank Node.js Web Application"></a>Hello world with Blank Node.js Web Application</h2><p>這邊我們選擇Blank Node.js Web Application來實作我們第一個NTVS的Hello world</p>
<p>1.　在專案這邊選擇建立新的Blank Node.js Web Application，這邊會幫我們建立以下資料</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/Arch.PNG" alt="ARCH"></p>
<p>server.js預設的內容如下：</p>
<pre><code>var http = require(&apos;http&apos;);
var port = process.env.port || 1337;
http.createServer(function (req, res) {
    res.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; });
    res.end(&apos;Hello World\n&apos;);
}).listen(port);
</code></pre><p>2.然後直接按下f5執行，就可以看到跑出一個node.exe的執行顯示port 5858 被監聽中，然後去看他開啟的網頁</p>
<p>Hello world已經幫我們開好瞜～</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/hello%20world.PNG" alt="hello world"></p>
<h2 id="Hello-world-with-Blank-Express-Application"><a href="#Hello-world-with-Blank-Express-Application" class="headerlink" title="Hello world with Blank Express Application"></a>Hello world with Blank Express Application</h2><p>這邊我們換成用選擇Blank Express Application來作我們第二個NTVS的Hello world</p>
<p>1.　在專案這邊選擇建立新的Blank Express Application，在專案建立後會幫我們透過NPM來載入需要的模組</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/npm%20update.PNG" alt="NPM"></p>
<p>順邊會幫我們建立express架構所需的資料(如果模組載入失敗會像下圖一樣顯示missing，可以右鍵手動去更新他的版本或來源或是解除安裝等設定)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/Arch%20express.PNG" alt="ARCH express"></p>
<p>2.然後直接按下f5執行，就可以看到跑出一個node.exe的執行顯示port 5858 被監聽中，然後去看他開啟的網頁</p>
<p>第二個Hello world也幫我們開好瞜～</p>
<p>針對NPM與Express的部分先前在講MAN這個架構的時候已經有介紹過，NPM請參考<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/10/23/125248.aspx" target="_blank" rel="external">這邊</a>若是想知道express架構上的內容請參考<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/10/23/125249.aspx" target="_blank" rel="external">這邊</a></p>
<h2 id="Still-need-improve"><a href="#Still-need-improve" class="headerlink" title="Still need improve"></a>Still need improve</h2><p>官方已知的問題(其他更多小問題請上論壇看更多瞜，但我覺得都不影響使用就是了)</p>
<ul>
<li>Intellisense fails on large projects (JS lang service timeout issue)</li>
<li>REPL: no intellisense</li>
</ul>
<p>但如果要我選IDE工具，我選一百次一定都是選VS！！BJ4</p>
<h2 id="Other-Tips"><a href="#Other-Tips" class="headerlink" title="Other Tips"></a>Other Tips</h2><p>在Node web application開發上面現在有幾個比較有名的套件</p>
<ul>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express</a>(會在搭配<a href="http://jade-lang.com/" target="_blank" rel="external">Jade</a>來做)</li>
<li><a href="http://mcavage.me/node-restify/" target="_blank" rel="external">Restify</a></li>
<li><a href="http://perfectapi.github.io/node-perfectapi/" target="_blank" rel="external">Node-perfectapi</a></li>
<li><a href="http://www.partialjs.com/" target="_blank" rel="external">partialJs</a></li>
</ul>
<p>而我之後會在分享最近比較感興趣的partialJs，為什麼會感興趣哩!簡單看他幾個特色瞜BJ4</p>
<ul>
<li><p><strong>Light</strong><br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_1.PNG" alt="1"></p>
</li>
<li><p><strong>Can use own Route or WebSocket</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_2.PNG" alt="2"></p>
</li>
<li><p><strong>More Features support for viewengine</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_3.PNG" alt="3"></p>
</li>
<li><p><strong>Auto LESS　CSS</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_4.PNG" alt="4"></p>
</li>
<li><p><strong>No dependencies and Faster</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_5.PNG" alt="5"></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[實作javascript Carousel Animation]]></title>
      <url>http://blackie1019.github.io/2013/12/23/implement-javascript-carousel-animation/</url>
      <content type="html"><![CDATA[<p>今天幫一個同事做一個前端效果所以自製了簡單的Carousel Animation(10分鐘的code沒有再經過大腦處理過，長得很醜請見諒)</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131224/horse-3.png" alt="horse"></p>
<p>Carousel Animation算以前在做silverlight的時候練到不想再練的東西…</p>
<p>如果還不知道的人可以參考這邊<a href="http://diegolamonica.info/build-a-simple-semantically-valid-carousel-from-scratch-part-4/" target="_blank" rel="external">入門與解說</a></p>
<p>重點其實就在這張圖上(這邊是以Opacity為例，我的實作有加上loop 前後的item)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131224/3DCarousel-Animation.png" alt="重點"></p>
<p>重點就是再按下左右的時候幫裡面的物件作增減與呈現效果，接下來直接放很醜的實作</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/7m7T3/6/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[No more TODO - Customize your token keywords for Task List with Visual Studio]]></title>
      <url>http://blackie1019.github.io/2013/12/18/no-more-todo-customize-your-token-keywords-for-task-list-with-visual-studio/</url>
      <content type="html"><![CDATA[<p>在開發程式的時候想必我們都很習慣使用直接下註解TODO的方式來記錄我們以後要完成的function或是提醒自己有哪些事情還沒做，而使用Visual Studio 開發如果是自動產生的程式碼時不時都還會幫你加上這段</p>
<a id="more"></a>
<p>而VS應該從05開始應該就有工作清單(支援Todo List)功能，而在Visual Studio稱為則Task Manager，預設支援KeyWord 有 HACK, TODO, UNDONE, UnresolvedMergeConflict 這幾個關鍵字，也就說你可以直接使用下面的注解方式增加你的待處理事項(各解釋請參考<a href="http://msdn.microsoft.com/en-us/library/aa652344(v=VS.71" target="_blank" rel="external">MSDN</a>.aspx))</p>
<pre><code>//TODO:
//HACK:
//UNDONE:
//UnresolvedMergeConflict:
</code></pre><p>這些預設字在使用上是不用分大小寫</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/todo.png" alt="TODO"></p>
<p>如果使用的是C++在vs2010倒是有限制要完全一樣的大小寫！如果要開啓的話可到Tools -&gt; Options -&gt; Text Editor -&gt; C/C++ -&gt; Formatting -&gt; Miscellaneous -&gt; change Enumerate Comment Tasks將其設定為true</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/8.png" alt="8"></p>
<p>而實際上你加入的這些task是被存放到在隱藏的solution文件(.suo)中</p>
<p>如果我們今天想要擴充這些預設字並設定各task類型的priority的話可以參考下面的步驟</p>
<ol>
<li><p>Visual Studio 選擇上方Tools-&gt;Options</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/1.png" alt="1"></p>
</li>
</ol>
<ol>
<li><p>Enviroment-&gt;Task List，這邊可以新增自己新的定義(NeedFinish)</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/2.png" alt="2"></p>
</li>
<li><p>Visual Studio 選擇上方View-&gt;Task List，打開待處理事項清單</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/3.png" alt="3"></p>
</li>
<li><p>在程式上打上註解符號並使用剛剛新增的NeedFinish作為Task manager判斷分類</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/4.png" alt="4"></p>
</li>
<li><p>因為我們剛剛有設定priority的關係我們就可以看到NeedFinish這邊有標示出左邊的紅色驚嘆號！</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/5.png" alt="5"></p>
</li>
<li><p>透過設定priority，我們就可以使用它作為排序條件重整目前代辦事項(預設的關鍵字除了UnresolvedMergeConflict外都是normal)</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/6.png" alt="6"></p>
</li>
</ol>
<h2 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h2><p>提醒一下，如果有人在Task List看不到自己在註解所加入的代辦事項的要確認是不是在Task List有選對歐(Comments或User Tasks)</p>
<ul>
<li><p>User Taskstasks</p>
<p>  entered in the Task List)</p>
</li>
<li><p>Comments</p>
<p>  tasks entered as comments in your code, prefaced by a token keyword</p>
</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131218/7.jpg" alt="7"></p>
<p>另外，這個功能也是可以用在js與css的檔案上的，vs2012預設就有支援，vs2010的話要安裝一下<a href="http://visualstudiogallery.msdn.microsoft.com/6ed4c78f-a23e-49ad-b5fd-369af0c2107f" target="_blank" rel="external">Web Essentials</a>，而如果事前端開發者的話請開心使用<a href="http://jslint4vs2010.codeplex.com/" target="_blank" rel="external">JSLint for vs2012</a>或是用<a href="http://www.jetbrains.com/resharper/" target="_blank" rel="external">resharper</a>也有支援。</p>
<p>最後最後！記住如果自己Customize的token keyword是不能直接讓其他人產生效果的(這有點像是你在設定自己的VS環境而已)，所以如果是團隊開發或是要把你做的token keyword List分享給其他人的話可以參考官方的做法<br><a href="http://blogs.msdn.com/b/zainnab/archive/2010/07/14/exporting-your-environment-settings-vstipenv0021.aspx" target="_blank" rel="external">匯出目前所有環境設定</a>與<br><a href="http://blogs.msdn.com/b/zainnab/archive/2010/07/15/importing-or-changing-your-environment-settings-vstipenv0022.aspx" target="_blank" rel="external">匯入或合併目前的環境設定</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App_Code is Evil in Web Application Project]]></title>
      <url>http://blackie1019.github.io/2013/12/14/app_code-is%20-evil/</url>
      <content type="html"><![CDATA[<p>最近在新的專案上使用了WebAPI開發一些服務，結果因為以前的壞習慣讓我直接下意識地開了App_Code的資料夾並在資料夾內放了一些會常用到的Utilc或Common類型的class或static method。</p>
<p>機車的是當我build過後真正傳入參數作處理要取得服務資料時出現了一些莫名的RunTime Error…</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其中最讓我感到錯愕的就是他跟我說我傳入某一個method的參數不是我要的class類型…但我仔細一看我的程式碼</p>
<p>FXCK!是哪裡不一樣的類型(class)了啦，見鬼了！！！</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131213/%E9%98%BF1.jpeg" alt="阿1"></p>
<p>結果弄了兩天我還是不知道這個RunTime Error是啥只好請問J神，一開始他的反應也是</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131213/%E9%98%BF2.jpeg" alt="阿2"></p>
<p>但幾分種後馬上後來發現了我一個白痴的懷習慣把共用程式放到App_Code才導致一些莫名的怪情況</p>
<h2 id="Bin-and-App-Code"><a href="#Bin-and-App-Code" class="headerlink" title="Bin and App_Code"></a>Bin and App_Code</h2><p>在以往.NET的Web專案中如果要在網頁之間共用程式我們通常可以將程式碼保存在兩個特殊的資料夾，</p>
<ul>
<li><p>Bin</p>
<ol>
<li>已編譯的程式碼 (.dll 檔案)</li>
<li>Web 應用程式中的任何其他程式碼 (例如網頁的程式碼) 都會自動參考它</li>
</ol>
</li>
<li><p>App_Code</p>
<ol>
<li>原始程式碼(.cs/.vb等檔案)</li>
<li>它會自動在執行階段編譯(處理成特殊的dll 檔案)。 產生的組件可由 Web 應用程式中的任何其他程式碼存取。</li>
<li>未明確標示為包含使用任一程式語言撰寫的檔案， 而是由.NET 自動根據資料夾目前包含的檔案，推斷要叫用哪一個編譯器(C#,VB或其他編譯器)。</li>
</ol>
</li>
</ul>
<p>兩個看起來很像，差別在App_Code資料夾存放原始程式碼而不是已編譯的程式碼，而且當你在建立你的Web應用程式時，.NET會幫你將放在App_Code的程式碼包成可此作執行的DLL檔案，但他是以一種<strong>特殊的方法</strong>來處理包裝的過程。</p>
<h2 id="細看App-Code"><a href="#細看App-Code" class="headerlink" title="細看App_Code"></a>細看App_Code</h2><p>在使用.NET建立Web專案時，VS會預設幫我們建立這一個資料夾，而這資料夾也俱有動態編譯的功能(預設的類型是不會編譯的，需要將每一個檔案都選擇為compiler)，而裡面可以放的檔案類型包含，自定控制項、自定class、interface 等都可以。</p>
<p>但由於在每次變更App_Code裡面資料時都會讓程式自動重新編譯，對於大型的專案會浪費太多時間，所以官方是建議將共用程式模組化後使用類別庫(class library)的方式來取代App_Code。</p>
<p>預設情況下App_Code在編譯時會被編譯成一個單獨的程式集(code base)，而預設編譯的語言會自動偵測你資料內使用的開發語言作編譯，如果需要支援多種語言就需要做下面的web.config設定：</p>
<pre><code>&lt;compilation&gt;
    &lt;codeSubDirectories&gt;
        &lt;add directoryName=&quot;VBFolder&quot; /&gt;
    &lt;/codeSubDirectories&gt;
&lt;/compilation&gt;
</code></pre><p>如果不做作上面的設定，則所有在App_Code根目錄的內容會被打包成一個App_Code_xxxx.dll(xxxx是隨機產生的數字或文字)，所有子目錄會被打包成App_SubCode_yyyy_xxxx.dll(yyyy是子目錄名稱)</p>
<h2 id="Devil-is-in-details"><a href="#Devil-is-in-details" class="headerlink" title="Devil is in details"></a>Devil is in details</h2><p>而本次發生Runtime Error告訴我A類別不是A類別的原因就在於App_Code本身會自動將目錄內的資料編譯成一個特殊的dll給專案參考，而我多餘的就是在本身打包程式下更改了namespace，把App_Code移除換成我自己的命名的…</p>
<p>結果就導致我有兩個一樣名稱的class在兩個不同namespace的dll內，而在runtime時就會導致系統認為我這個class是ambiguously(不知道你是來自於Bin的dll還是App_Code自動編譯的dll)</p>
<p>解決方法就是將程式移出App_Code內在外部自行開資料夾使用，或是App_Code內的程式namespace都用預設的App_Code即可。</p>
<p>而補充上一節提到的，在.NET有兩種針對網頁有兩種開發模式，兩者比較可<a href="http://msdn.microsoft.com/en-us/library/dd547590.aspx" target="_blank" rel="external">參考</a>：</p>
<ol>
<li>Web site專案</li>
<li>Web application專案</li>
</ol>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131213/%E6%AF%94%E8%BC%83.png" alt="比較"></p>
<p>其中Web application專案不使用App_Code這個資料夾，而且預設也不會幫你加入該資料夾(但你要手動加入的話是不會阻擋的…)</p>
<p>為什麼Web application不適用可以參考<a href="http://vishaljoshi.blogspot.tw/2009/07/appcode-folder-doesnt-work-with-web.html" target="_blank" rel="external">App_Code 資料夾不適用於 Web 應用程式專案</a>，這邊節錄重點整理如下：</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>會寫這篇文章其實要感謝J神幫我提醒了我這壞習慣，當我去問J神的對話如下：</p>
<p>Blackie:ㄟ，J神我有一個問題解了兩天還是不知道錯在哪邊可以請你幫我看一下是不是我寫法有問題嗎？</p>
<p>J神：蛤，build得過嗎？</p>
<p>Blackie:可以，是Runtime Error，他跟我說我自己新增的某一個class不能傳入某一個新的method作使用，因為method要傳入的變數型別跟我傳入的變數型別不同，但我是用我新增的class做傳入阿！</p>
<p>J神：蛤，你在說什麼啦！直接看程式啦！</p>
<p>Blackie:就這份,你看這明明就一樣的類別啊…</p>
<p>J神：哇靠…這啥小啊，一樣啊！</p>
<p>(2分鐘後)</p>
<p>J神：FXCK，你這白癡幹嘛把class的.cs檔案放到App_Code，這個資料夾很神奇啦，你把程式移出來在build一次run看看。</p>
<p>Blackie:…真的可以了，FXCK我都忘記了這個壞習慣了</p>
<p>J神：你說你這個問題花了幾天？</p>
<p>Blackie:婀…兩天半…</p>
<p>J神：Ｘ！我要把你當做案例提醒大家不要這樣</p>
<p>Blackie：…那我自己寫一篇網誌讓你tag吧….</p>
<p>其實這個白癡的問題早在好幾年前就有大神在耳邊提醒過了，問我為什麼會有這樣的壞習慣，其實是因為我看在大學做專題的時候買了一本神書上面寫的其中一段，但我一直只懂片面而不去瞭解實際運作模式，導致我完全相信了書上每一句話．(別誤會這本書真的寫得很好！而我也真的獲益良多)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131213/%E6%9B%B8%E6%9C%AC_1.jpg" alt="ASP.net問題解決_1"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131213/%E6%9B%B8%E6%9C%AC_2.jpg" alt="ASP.net問題解決_2"></p>
<p>這次再踩雷只好認真翻一下MSDN上面的文件，仔細搞懂運作模式，希望把這壞習慣徹底忘了！</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131213/%E5%A5%BD%E7%B2%BE%E7%B7%BB.jpg" alt="看仔細"></p>
<p>開發路上不怕走偏走錯，就怕錯了還以為是對的結果越走越遠不知如何回頭，一步一步走得扎實才能往正確的地方前進，發現自己走錯的時候也能及時回頭。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Using Html.Raw() method to show content include Html tags in .NET MVC(under Razor ViewEngine)]]></title>
      <url>http://blackie1019.github.io/2013/11/12/using-html-raw-method-to-show-content-include-html-tags-in-net-mvc-with-razer-viewengine/</url>
      <content type="html"><![CDATA[<p>在.NET MVC中如果使用Razor作為ViewEngine 我們最常用來輸出一個model的參數的用法應該就是@了，這邊來介紹如何輸出包含HTML Tag的內容</p>
<a id="more"></a>
<p>詳細的說明與用法可以參考Demo大的<a href="http://demo.tc/Post/679" target="_blank" rel="external">ASP.NET MVC3 Razor 初心者容易遇到的問題</a>。</p>
<p>這邊要講的是如果你今天model的參數是一個包含HTML Tag的內容，如:</p>
<pre><code>&lt;a hef=&quot;http://www.google.com.tw&quot;&gt;click me&lt;/a&gt;
</code></pre><p>或是</p>
<pre><code>&amp;#60;a hef=&amp;#34;http://www.google.com.tw&amp;#34;&amp;#62;click me&amp;#60;/a&amp;#62;
</code></pre><p>*上例HTML特殊字元encode可參考W3school的<a href="http://www.w3schools.com/tags/ref_entities.asp" target="_blank" rel="external">HTML ISO-8859-1 Reference</a></p>
<p>上面兩個如果你直接使用@將其直印出的話就變成畫面上直接出現你的內容值，這邊用印出一個空白non-breaking space(&nbsp;)為例:</p>
<p>在View裡面的寫法如果是下面這樣</p>
<pre><code>&lt;td class=&quot;align-l&quot;&gt;
    @item.BaseCurrencySymbol
&lt;/td&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/4.PNG" alt="code1"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/1.PNG" alt="印出內容1"></p>
<p>如果改用Html.Raw()來輸出值的話</p>
<pre><code>&lt;td class=&quot;align-l&quot;&gt;
    @Html.Raw(item.BaseCurrencySymbol)
&lt;/td&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/3.PNG" alt="code2"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/2.PNG" alt="印出內容2"></p>
<p>從上面就可以明顯看出差異了，這邊再來看一下官方文件的解說(<a href="http://msdn.microsoft.com/en-us/library/gg480740(v=vs.108" target="_blank" rel="external">原文內容</a>.aspx))。</p>
<blockquote>
<p>###HtmlHelper.Raw Method (String)</p>
<p>Returns markup that is not HTML encoded.</p>
<ul>
<li><p>Namespace:  System.Web.Mvc</p>
</li>
<li><p>Assembly:  System.Web.Mvc (in System.Web.Mvc.dll)</p>
</li>
</ul>
</blockquote>
<p>如果你有使用類似<a href="http://ckeditor.com/" target="_blank" rel="external">CKEditor</a>這種編輯器plugin的話就一定要記得將輸出改為Html.Raw()的方式來轉換，避免直接將encode的Html Tag印出</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Use NonAction Attribute to Hide Controller in .NET MVC Routing Table]]></title>
      <url>http://blackie1019.github.io/2013/11/03/use-nonaction-attribute-to-hide-controller-in-net-mvc-routing-table/</url>
      <content type="html"><![CDATA[<p>如果我們想要讓某一個Controller中的Action不要在路由表內被註冊的時候就可以透過NonAction的方式來實現</p>
<a id="more"></a>
<p>在.NET MVC當中一個Controller通常會被對應到URL中並透過該Controller本身具有的Action來作為整個路由(Routing)註冊的樣式，以一個叫做SportController的範例來說可能如下:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/1.PNG" alt="1"></p>
<p>通常產生的Controller都會被註冊成上面這樣格式的路由至MVC的路由表中，而當我們的網頁在被使用者透過瀏覽器的URL連結進來的時候，會先檢查MVC的路由表裡面有沒有這樣格式的路由，如果沒有就會再去檢查IIS的路由是否有，如果也沒有就會回傳錯誤訊息404至使用者端。</p>
<p>而當我們想要讓某一個Controller中的Action不要在路由表內被註冊的時候就可以透過NonAction的方式來實現，使用的方式很簡單只要在你的Action上面加上[NonAction]就可以了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/2.PNG" alt="2"></p>
<ul>
<li><p>一般的結果如下:</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/3.PNG" alt="3"></p>
</li>
<li><p>加入NonAction之後的如下:</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/4.PNG" alt="4"></p>
</li>
</ul>
<p>這邊可以看到加上NonAction之後就真的不會註冊在MVC Routing Table當中當然就會去詢問IIS，如果IIS也沒有就會拋出404錯誤(這邊被我另外寫的ErrorPage所接收起來)</p>
<p>而MVC Error Page我這邊目前是透過Web.config來設定，如下:</p>
<ul>
<li><p>Web.config</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/5.PNG" alt="5"></p>
</li>
<li><p>ErrorController</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace BlackieStudio.Controllers
{
    public class ErrorController : Controller
    {
        public ActionResult Index()
        {
            return View(&quot;Error&quot;);
        }
        public ActionResult NotFound()
        {
            Response.StatusCode = 404;
            return View(&quot;NotFound&quot;);
        }
        public ActionResult Forbidden()
        {
            Response.StatusCode = 403;
            return View(&quot;Forbidden&quot;);
        }
        public ActionResult InternalError()
        {
            Response.StatusCode = 500;
            return View(&quot;InternalError&quot;);
        }

    }
}
</code></pre></li>
<li><p>Forbidden.html</p>
<pre><code>@{
    ViewBag.Title = &quot;Forbidden&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}

&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<ul>
<li><p>Index.html</p>
<pre><code>@{
    ViewBag.Title = &quot;Error&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}
&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;div class=&quot;list-sfs-holder&quot;&gt;
        &lt;div class=&quot;alert alert-error&quot;&gt;
            An unexpected error has occurred. Please contact the system administrator.&lt;/div&gt;
        @if (Model != null &amp;&amp; HttpContext.Current.IsDebuggingEnabled)
        {
            &lt;div&gt;
                &lt;p&gt;
                    &lt;b&gt;Exception:&lt;/b&gt; @Model.Exception.Message&lt;br /&gt;
                    &lt;b&gt;Controller:&lt;/b&gt; @Model.ControllerName&lt;br /&gt;
                    &lt;b&gt;Action:&lt;/b&gt; @Model.ActionName
                &lt;/p&gt;
                &lt;div style=&quot;overflow:scroll&quot;&gt;
                    &lt;pre&gt;
                        @Model.Exception.StackTrace
                    &lt;/pre&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<ul>
<li><p>InternalError.html</p>
<pre><code>@{
    ViewBag.Title = &quot;InternalError&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}

&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;div class=&quot;list-sfs-holder&quot;&gt;
        &lt;div class=&quot;alert alert-error&quot;&gt;
            An unexpected error has occurred. Please contact the system administrator.&lt;/div&gt;
        @if (Model != null &amp;&amp; HttpContext.Current.IsDebuggingEnabled)
        {
            &lt;div&gt;
                &lt;p&gt;
                    &lt;b&gt;Exception:&lt;/b&gt; @Model.Exception.Message&lt;br /&gt;
                    &lt;b&gt;Controller:&lt;/b&gt; @Model.ControllerName&lt;br /&gt;
                    &lt;b&gt;Action:&lt;/b&gt; @Model.ActionName
                &lt;/p&gt;
                &lt;div style=&quot;overflow:scroll&quot;&gt;
                    &lt;pre&gt;
                        @Model.Exception.StackTrace
                    &lt;/pre&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
<li><p>NotFound.html</p>
<pre><code>@{
    ViewBag.Title = &quot;NotFound&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}

&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cannot hide status bar in iOS7]]></title>
      <url>http://blackie1019.github.io/2013/11/02/ios-hide-status-bar/</url>
      <content type="html"><![CDATA[<p>如何隱藏iOS7的狀態列<br><a id="more"></a></p>
<p>最簡單的做法是在你的APP .plist 裡面加入下面兩個屬性</p>
<ul>
<li><p>Status bar is initially hidden = YES</p>
</li>
<li><p>View controller-based status bar appearance = NO</p>
</li>
</ul>
<p>增添完plist如下圖：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131103/plist.png" alt="plist"></p>
<p>這樣就可以遮蔽摟～！</p>
<p>遮蔽前：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131103/before.png" alt="前"></p>
<p>遮蔽後：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131103/after.png" alt="後"></p>
<p>這樣簡單的兩個設定當初還找了一陣子…..iOS7預設是會顯示status bar 這邊要提醒大家一下摟</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET MVC 4 入門]]></title>
      <url>http://blackie1019.github.io/2013/10/22/asp-net-mvc-4-basic/</url>
      <content type="html"><![CDATA[<p>MVC 開發環境與基本知識</p>
<a id="more"></a>
<h2 id="檢視引擎-view-engines"><a href="#檢視引擎-view-engines" class="headerlink" title="檢視引擎(view engines):"></a>檢視引擎(view engines):</h2><ul>
<li><p>ASPX</p>
<p>  傳統的頁面架構，保持先前ASP.NET的web form概念使用.aspx/.ascx/.master 等檔案組成 templates 架構，使用&lt;%%&gt;的方式呈現ASP.NET程式碼區段，如下:</p>
<pre><code>&lt;h1&gt;Hello MVC&lt;/h1&gt;
&lt;p&gt;I am &lt;%=name %&gt;&lt;/p&gt;
&lt;% foreach(var skill in skills){ %&gt;
    &lt;li&gt;&lt;%=skill.name %&gt;&lt;/li&gt;
&lt;% } %&gt;
</code></pre></li>
<li><p>Razor</p>
<p>  因關注點分離(Aspect-Oriented Programming)概念所產生的一個新的頁面架構(CSHTML)，<a href="http://www.w3schools.com/aspnet/mvc_htmlhelpers.asp" target="_blank" rel="external">HTML Helper</a>完全支援該架構(HTML Helper的客製可參考<a href="http://kelp.phate.org/2010/12/aspnet-mvc-htmlhelper.html" target="_blank" rel="external">此</a>)，而該架構設計的重點如下:</p>
<ul>
<li>避免弄亂你的程式碼(avoid spaghetti code)，透過Razor的注入方式即可將整段code插入，讓你的view能更加簡潔，且可將程式碼的關注點逐項分離避免一個頁面有太雜亂的資訊</li>
<li>加速學習-對底層的HTML,js,CSS的概念與技術需更加熟悉但也更容易上手</li>
<li>Razor是一個頁面架構而非一個新的程式語言，所以你還是使用C#/VB(or Other)語言做學習，只是在頁面的安排上你透過Razor來簡化你原本的頁面程式注入的架構</li>
<li>Razor可以透過一般的文字編輯器即可編輯程式碼(Notepad++,sublimeText都OK)，修改.cshtml的檔案時不用重新compile程式，直接修改即可</li>
<li>在VS2010之後的版本都有支援Intellisense，sublimeText也可以安裝package來支援(參考<a href="https://github.com/joseph-turner/Razor" target="_blank" rel="external">Razor Syntax Definition - Sublime Text 2</a>)</li>
<li><p>支援單元測試(Unit Test)，由於將關注點分離的概念可以使得View上每個Razor的subfunction都可以被拿來當作單元測試，單純檢測View而不用所接受到Controller所傳入的資料才能檢測</p>
<p>使用@的方式呈現ASP.NET程式碼區段，如下:</p>
<p>  </p><h1>Hello MVC</h1><br>  <p>I am @name </p><br>  @ forearch(var skill in skills){<p></p>
<pre><code>&lt;li&gt;@skill.name&lt;/li&gt;
</code></pre><p>  }</p>
</li>
</ul>
</li>
</ul>
<p><em>根據ScottGu的推薦好像還有兩個<a href="http://sparkviewengine.com/" target="_blank" rel="external">Spark</a>與<a href="http://code.google.com/p/nhaml/" target="_blank" rel="external">HNaml</a>在先前MVC3時也常被使用，但MVC4之後就是Razor的天下了</em></p>
<h2 id="NuGet"><a href="#NuGet" class="headerlink" title="NuGet"></a>NuGet</h2><p>VS2012已經自動加入了，而透過NuGet做專案內的套件管理，這邊要稍微注意一下NuGet的版本有更新，如果你是用VS 2012安裝好的NuGet記得要更新一下，以下幾個不錯的Tips可參考</p>
<ul>
<li><a href="http://blog.miniasp.com/post/2011/05/17/Useful-Visual-Studio-2010-tool-NuGet-Package-Manager.aspx" target="_blank" rel="external">VS2010 手動加入NuGet參考</a></li>
<li>移除上有問題可以參考<a href="http://stackoverflow.com/questions/14714619/cant-update-or-uninstall-nuget-package-manager-in-vs2012" target="_blank" rel="external">Can’t Update or Uninstall NuGet Package Manager in VS2012</a></li>
<li><a href="http://demo.tc/Post/763" target="_blank" rel="external">NuGet套件還原</a></li>
<li><a href="http://blog.darkthread.net/post-2011-05-27-nuget-server.aspx" target="_blank" rel="external">架設自己的NuGet Server</a></li>
</ul>
<h2 id="MVC架構"><a href="#MVC架構" class="headerlink" title="MVC架構"></a>MVC架構</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/ASP.Net%20MVC/01/MVC.png" alt="mvc"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/ASP.Net%20MVC/01/MVC2.png" alt="mvc2"></p>
<h2 id="目錄架構-以Internet-Application-Template為例"><a href="#目錄架構-以Internet-Application-Template為例" class="headerlink" title="目錄架構(以Internet Application Template為例):"></a>目錄架構(以Internet Application Template為例):</h2><ul>
<li><p>App_Data</p>
<p>  這邊存放db, XML, 或是任一會使用到資料實體檔案</p>
</li>
<li><p>App_Start</p>
<p>  因為加強關注點分離的概念所以這邊寫的東西會在外層的Global.asax.cs實際被註冊與使用的程式碼(a set of static classes)</p>
</li>
<li><p>AreaRegistration</p>
<p>  與MVC3之前的使用相同，可將程式分區塊，藉此可以不用將一份程式碼分成兩個專案去管理(如前後台功能的網站，可透過Area的方式直接在同一個專案內分割成不同網站)</p>
<ul>
<li><p>WebApiConfig</p>
<p>  針對WebAPI所設定的一些Routing與機制</p>
</li>
<li><p>FilterConfig</p>
</li>
<li><p>RouteConfig</p>
</li>
<li><p>BundleConfig</p>
</li>
<li><p>AuthConfig</p>
</li>
</ul>
</li>
<li><p>Content</p>
<p>  靜態檔案(可能參考到的images、css、js)，也包含預設的theme相關檔案(包含minified後的檔案)</p>
</li>
<li><p>Controllers</p>
<p>  放所有可以使用的Controller檔案，注意Controllers這邊的檔案命名一定要以Controller結尾，且回傳結果必須為一個View的Class</p>
</li>
<li><p>Filters</p>
<p>  Action 過濾器</p>
</li>
<li><p>Images</p>
<p>  放使用到的圖檔</p>
</li>
<li><p>Models</p>
<p>  放使用到的Model檔案</p>
</li>
<li><p>Scripts</p>
<p>  放所有被會被使用到的JS檔案</p>
</li>
<li><p>Views</p>
<p>  所有網頁裡面實際的檢視頁面檔案，會按照各頁面的Class名稱分別建立對應的sub-folder</p>
</li>
<li><p>Global.asax</p>
<p>  註冊所使用到的程式與服務處</p>
</li>
<li><p>packages.config</p>
<p>  所有在專案中透過NuGet管理的套件(package)都會寫在這邊做載名</p>
</li>
<li><p>Web.config</p>
<p>  該網頁應用程式的相關設定與參數</p>
</li>
</ul>
<h2 id="整合BootStrap3"><a href="#整合BootStrap3" class="headerlink" title="整合BootStrap3"></a>整合BootStrap3</h2><p>-</p>
<ul>
<li>參考上面設定確認App_start-&gt;BootstrapBundle.Config.cs的設定正確，筆者設定如下:</li>
</ul>
<pre><code>using System.Web.Optimization;
[assembly: WebActivatorEx.PostApplicationStartMethod(typeof(BlackieStudio.App_Start.BootstrapBundleConfig), &quot;RegisterBundles&quot;)]
namespace BlackieStudio.App_Start
{
    public class BootstrapBundleConfig
    {
        public static void RegisterBundles()
        {
            // Add @Styles.Render(&quot;~/Content/bootstrap/base&quot;) in the &lt;head/&gt; of your _Layout.cshtml view
            // For Bootstrap theme add @Styles.Render(&quot;~/Content/bootstrap/theme&quot;) in the &lt;head/&gt; of your _Layout.cshtml view
            // Add @Scripts.Render(&quot;~/bundles/bootstrap&quot;) after jQuery in your _Layout.cshtml view
            // When &lt;compilation debug=&quot;true&quot; /&gt;, MVC4 will render the full readable version. When set to &lt;compilation debug=&quot;false&quot; /&gt;, the minified version will be rendered automatically
            BundleTable.Bundles.Add(new ScriptBundle(&quot;~/bundles/bootstrap/js&quot;).Include(&quot;~/Scripts/bootstrap.min.js&quot;));
            BundleTable.Bundles.Add(new StyleBundle(&quot;~/bundles/bootstrap/css&quot;).Include(
                &quot;~/Content/bootstrap/bootstrap.min.css&quot;,
                &quot;~/Content/bootstrap/bootstrap-theme.min.css&quot;
            ));
        }
    }
}
</code></pre><ul>
<li><p>新增一個Views-&gt;Shared-&gt;_BootStrapLayout.cshtml的頁面內有加入上一個項目所設定的Bootstrap css與js，筆者設定如下:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta name=&quot;author&quot; content=&quot;Blackie Tsai&quot; /&gt;
    &lt;meta name=&quot;description&quot; content=&quot;BlackieStudio Site&quot; /&gt;
    &lt;meta name=&quot;keywords&quot; content=&quot;blackie,blackiestudio&quot; /&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;[BootStrap]BlackieStudio-@ViewBag.Title&lt;/title&gt;

    @Styles.Render(&quot;~/Content/css&quot;)
    @Styles.Render(&quot;~/Content/themes/base/css&quot;)
    @Styles.Render(&quot;~/bundles/bootstrap/css&quot;)
    @Scripts.Render(&quot;~/bundles/modernizr&quot;)
&lt;/head&gt;
&lt;body&gt;
    @RenderBody()

    @Scripts.Render(&quot;~/bundles/jquery&quot;)
    @Scripts.Render(&quot;~/bundles/bootstrap/js&quot;)

    @RenderSection(&quot;scripts&quot;, required: false)
&lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
</ul>
<ul>
<li><p>各頁面加入Bootstrap的配置即可，參考設定如下:</p>
<pre><code>@{
    ViewBag.Title = &quot;Index&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}
&lt;!--View container --&gt;
&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;Hi, I am Blackie&lt;/h1&gt;
    &lt;p class=&quot;lead&quot;&gt;......&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx" target="_blank" rel="external">Introducing “Razor” – a new view engine for ASP.NET</a></li>
<li><a href="http://www.codeproject.com/Articles/585873/Basic-Understanding-On-ASP-NET-MVC-4" target="_blank" rel="external">Basic-Understanding-On-ASP-NET-MVC-4</a></li>
<li><a href="http://www.c-sharpcorner.com/UploadFile/suthish_nair/mvc-folders/" target="_blank" rel="external">Understanding ASP.NET MVC Project Folders</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Phonegap archives/build armv7s error!（What different between armv6/armv7/armv7s/arm64?)]]></title>
      <url>http://blackie1019.github.io/2013/10/11/ios-cordova-archives-or-build-armv7s-error-difference-between-armv6-armv7-armv7s-and-arm64/</url>
      <content type="html"><![CDATA[<p>在Xcode 4.6.X的時代預設使用的Archives與build的架構是在armv6/armv7/armv7s(但armv7s預設不會開啓)所以在打包ipa檔案都沒什麼問題，直到最近換成Xcode5與iOS7之後真的是一連串的悲劇。</p>
<a id="more"></a>
<p>先直接的說明，如果你要打包Phonegap的專案請使用armv7就好，設定上如下圖：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131012/1.png" alt="1"></p>
<p>上面可以看得很清楚Xcode5預設的打包(最右邊的iOS Default)是跑在armv7/armv7s/arm64，</p>
<p>如果不改成只支援armv7就會發生下面的悲劇錯誤</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131012/2.png" alt="2"></p>
<p>講完解決辦法，就來講講這幾個設定到底有什麼差別，其實他們就是ARM對應的指令版本</p>
<ul>
<li>armv6<ul>
<li>iPhone</li>
<li>iPhone2</li>
<li>iPhone3G</li>
<li>第一代和第二代iPod Touch</li>
</ul>
</li>
<li>armv7<ul>
<li>iPhone4</li>
<li>iPhone4S</li>
</ul>
</li>
<li>armv7s<ul>
<li>iPhone5</li>
<li>iPhone5C</li>
</ul>
</li>
<li>arm64<ul>
<li>iPhone5S     </li>
</ul>
</li>
</ul>
<p>如果在build setting的Architectures中 選擇“Standard Active Architecture Only”為Yes則會根據你目前的裝置打包對應的版本；但若選false，則會讓编译器一起打包兩個指令集的版本檔案會比较大，但是能使用Armv7的優化，同時也能讓較舊的機器也正常使用。</p>
<p>這邊要注意一點，一般Debug的时候“Build Active Architecture Only”如果你選擇YES，這是讓你以目前架構看程式是否有问题，而你如果是要Release的时候一定要選擇NO，因为需要配合其他的機型來使用，而且不選額no的話也不能讓你打包的歐！這點要千萬注意。</p>
<p>關於Build Active Architecture Only如何設定可以參考<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/10/07/123346.aspx" target="_blank" rel="external">[iOS]Xcode4 upgrade to Xcode5:ld: symbol(s) not found for architecture armv7 or armv7s linker error
</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[flurry:symbols not found for architecture i386]]></title>
      <url>http://blackie1019.github.io/2013/10/10/ios-flurry-symbols-not-found-for-architecture-i386/</url>
      <content type="html"><![CDATA[<p>Flurry更新設定<br><a id="more"></a></p>
<p>這邊小弟原先使用的Flurry因為要app要上iOS7所以要更新到4.2.3以上的版本才能支援，所以先去官網下載了目前最新版的4.2.4，並將檔案放置專案後如下：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93blog/blogs/20131011/1.png" alt="1"></p>
<p>但是當我們run在iOS7的裝置或模擬器時會出現下面的錯誤</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93blog/blogs/20131011/2.png" alt="2"></p>
<p>這邊的修正方式是到target&gt;Build Phases&gt;Link Binary With Libraries中加入Security.framework後再重新run該專案即可正常執行了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93blog/blogs/20131011/3.jpg" alt="3"></p>
<p>這邊要稍微注意一下如果你還是有遇到iOS實機執行的問題可以參考小弟之前另外一篇<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/10/07/123346.aspx" target="_blank" rel="external">[iOS]Xcode4 upgrade to Xcode5:ld: symbol(s) not found for architecture armv7 or armv7s linker error</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode4 upgrade to Xcode5 - symbol(s) not found for architecture armv7 or armv7s linker error]]></title>
      <url>http://blackie1019.github.io/2013/10/10/xcode4-upgrade-to-xcode5-symbol-not-found-for-architecture-armv7-or-armv7s-linker-error/</url>
      <content type="html"><![CDATA[<p>最近因為手殘把手機從iOS6升到iOS7後發現原本的Xcode4.6.3不能開發了…要使用Xcode5才可以上實機開發，而Xcode5又要OSX至少10.8以上的版本才能安裝，</p>
<a id="more"></a>
<p>所以昨天花了一整天才把因手殘發生的悲劇環境重新弄好，正當興高采烈地打開專案要開始上實機開發卻發生了下面的悲劇畫面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131007/2.png" alt="1"></p>
<p>後來查了一下，原來是因為專案架構目前不支援的緣故(專案內有些只能跑armv7而不是armv7s)，而我們可以透過在修改專案的Active Architecture Only的方式來避免掉這個問題，如下：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131007/1.png" alt="2"></p>
<p>Active Architecture Only這個設定值預設是No的這邊我們要設定為Yes後就可以了，而這個值如果是Yes其實是設定在按下左上方執行(run)時讓專案只依據你目前連接的手機進行重建(build)，執行上會比預設還快一點，而預設的No則是不依據你的手機做執行(就有可能發生armv7 or armv7s linker error)</p>
<p>目前看來打包出來的app還是可以run在iphone4,iphone4s 只要你專案設定SDK有支援的目前看來還是可以執行的(只要iOS Deployment Targets有支援你選擇的iOS版本，這邊我是選擇5.0)</p>
<p>而如果你也是跟我一樣用Phonegap開發APP的話強烈建議你升級到最新的Phonegap版本，因為這部分有些舊的專案設定已經不支援或建議修改了（目前我用的是2.5 &amp; 2.7，專案內有很多警告….)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用CSS製作對話框簽名檔效果]]></title>
      <url>http://blackie1019.github.io/2013/10/08/signature-with-css-only/</url>
      <content type="html"><![CDATA[<p>運用CSS製作取代圖片的簽名檔<br><a id="more"></a></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131009/singature.png" alt="signature"></p>
<p>小弟最近發現原來文章推薦數有點少(文章寫得太沒內容…orz)，所以只好用哀兵策略，跪求看完文章的大大們給點指教或按個推薦之類的，想說來弄個簽名檔提醒大家一下吧</p>
<p>剛好之前有看到<a href="http://www.minwt.com/css/8996.html" target="_blank" rel="external">梅問題用CSS做對話框的效果</a></p>
<p>這邊使用他教學的範例做了一些小修正後搭配了圖片寫成下面的html與CSS</p>
<pre><code>&lt;!--簽名檔CSS--&gt;
&lt;style type=&quot;text/css&quot;&gt;
.mwt_border{
width: 250px;
height: 40px;
text-align: center;
color: #fff;
background: #252525;
position: relative;
border: solid 1px #252525;
margin-left: 80px;
top: -50px;
padding: 0px;
}
/*箭頭右*/
.mwt_border .arrow_r_int{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:transparent transparent transparent #252525;
    position:absolute;
    top:20%;
    right:-30px;
}
/*箭頭右-邊框*/
.mwt_border .arrow_r_out{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:transparent transparent transparent #252525;
    position:absolute;
    top:20%;
    right:-29px;
}

/*箭頭左*/
.mwt_border .arrow_l_int{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:transparent #252525 transparent  transparent ;
    position:absolute;
    top:20%;
    left:-30px;
}
/*箭頭左-邊框*/
.mwt_border .arrow_l_out{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:transparent #252525 transparent transparent ;
    position:absolute;
    top:20%;
    left:-29px;
}

/*箭頭上*/
.mwt_border .arrow_t_int{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:transparent transparent #252525 transparent ;
    position:absolute;
    top:-30px;
    left:40px;
}
/*箭頭上-邊框*/
.mwt_border .arrow_t_out{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:transparent transparent #252525 transparent ;
    position:absolute;
    top:-29px;
    left:40px;
}

/*箭頭下*/
.mwt_border .arrow_b_int{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:#252525 transparent transparent transparent ;
    position:absolute;
    bottom:-30px;
    right:50px;
}
/*箭頭下-邊框*/
.mwt_border .arrow_b_out{
    width:0px;
    height:0px;
    border-width:15px;
    border-style:solid;
    border-color:#252525 transparent transparent transparent ;
    position:absolute;
    bottom:-29px;
    right:50px;
}&lt;/style&gt;
&lt;!--簽名檔HTML(http://www.minwt.com/css/8996.html)--&gt;
&lt;hr /&gt;
&lt;div class=&quot;signature&quot;&gt;
    &lt;img alt=&quot;&quot; src=&quot;http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/images/profile2.jpg&quot; style=&quot;width: 60px; height: 60px;&quot; /&gt;
    &lt;div class=&quot;mwt_border&quot;&gt;
    &lt;span class=&quot;arrow_l_int&quot;&gt;&lt;/span&gt;
    &lt;span class=&quot;arrow_l_out&quot;&gt;&lt;/span&gt;
    如果覺得文章還不錯麻煩請在文章最上面給予推薦，你的支持是小弟繼續努力產出的動力！&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>將上面的的內容貼到後台組態設定的文章簽名檔中的Source內(如下圖)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131009/1.png" alt="1"></p>
<p>這邊要稍微注意一下，上面程式碼中倒數的幾行，在編輯存檔後如果再進去原始碼修改則編輯器會把下面兩行清除，所以這邊建議可以先用註解的方式包起來之後有編修簽名檔的時候要記得把這兩行手動加回來。</p>
<pre><code>&lt;span class=&quot;arrow_l_int&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;arrow_l_out&quot;&gt;&lt;/span&gt;
</code></pre><p>以上就可完成一個對話框效果的簽名檔摟，大家一起來改一下吧～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS & Android icon and preloading size list]]></title>
      <url>http://blackie1019.github.io/2013/10/01/ios-and-android-icon-and-preloading-size-list/</url>
      <content type="html"><![CDATA[<p>整理一下開發APP時所要知道的各項尺寸</p>
<a id="more"></a>
<h2 id="iOS-PNG-only"><a href="#iOS-PNG-only" class="headerlink" title="iOS:(PNG only)"></a>iOS:(PNG only)</h2><h3 id="preloading"><a href="#preloading" class="headerlink" title="preloading"></a>preloading</h3><ul>
<li>320 × 480 (iphone3gs) Default~iphone.png</li>
<li>640 × 960 (iPhone4) Default@2x~iphone.png</li>
<li>768 × 1004 (iPad) Default-Portrait~ipad.png</li>
<li>1024 x 768 (iPad) Default-Landscape~ipad.png</li>
<li>1536 × 2008 (Retina iPad)  Default-Portrait@2x~ipad.png</li>
<li>2048 × 1496 (Retina iPad)  Default-Landscape@2x~ipad.png</li>
<li>640 × 1136 (iPhone 5)  Default-568h@2x~iphone.png</li>
</ul>
<h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><ul>
<li>57×57 (default iPhone) icon.png</li>
<li>114×114 (Retina iPhone) icon@2x.png</li>
<li>72×72 (default iPad) icon-72.png</li>
<li>144×144 (Retina iPad) icon-72@2x.png</li>
<li>512×512 (app store) application144x144.png</li>
</ul>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android:"></a>Android:</h2><h3 id="preloading-none-or-by-device-screen"><a href="#preloading-none-or-by-device-screen" class="headerlink" title="preloading(none or by device screen)"></a>preloading(none or by device screen)</h3><h3 id="icon-1"><a href="#icon-1" class="headerlink" title="icon"></a>icon</h3><ul>
<li>ldpi should be 36 x 36</li>
<li>mdpi should be 48 x 48</li>
<li>hdpi should be 72 x 72</li>
<li>xhdpi should be 96 x 96</li>
<li>xxhdpi should be 144 x 144</li>
</ul>
<h2 id="icon-slayer"><a href="#icon-slayer" class="headerlink" title="icon slayer"></a>icon slayer</h2><p>這是一個可以你只要上傳一張圖就可以幫你產生不同尺寸iOS&amp;android icons的網站(含光影與圓角效果等調整)</p>
<p><a href="http://www.gieson.com/Library/projects/utilities/icon_slayer/#.UkuTiWQskVl" target="_blank" rel="external">icon slayer</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[網頁資料輸出轉為Excel檔案時數字資料強制為文字呈現(含其他mso支援格式轉換)]]></title>
      <url>http://blackie1019.github.io/2013/09/29/html-convert-to-excel-with-force-numeric/</url>
      <content type="html"><![CDATA[<p>在網頁應用程式開發上常常會有需求是要把表格呈現的資料轉為excel儲存，而遇到這些需求的時候往往就是透過直接輸出一個表格的方式(html table tag)把資料透過tr,th,td的方式印出來。</p>
<a id="more"></a>
<p>而有時候在印出的資料為一個數字的時候會發生印出少0的情況，如035781178印出來會變成35781178，而資料如果是035-781178卻可以成功印出。其實這樣是因為excel column預設的general format會將數字開頭的0去除，而文字格式則不會有這個問題。</p>
<p>實務上，下面是一段可以將電話前端0印出的classic asp程式</p>
<pre><code>&lt;%
&apos;設定輸出為excel格式
   response.ContentType = &quot;application/vnd.ms-excel&quot;
   &apos;設定檔名
   response.AddHeader &quot;content-disposition&quot;, &quot;attachment;     filename=Export.xls&quot;
%&gt;
&lt;%
Set RS = conn.execute(session(&quot;CardApply_Sql&quot;))
%&gt;
&lt;HTML&gt;
&apos;設定編碼，避免中文亂碼
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
&lt;body&gt;
&lt;%
Response.Write(&quot;&lt;style type=text/css&gt;&quot;)
Response.Write(&quot;td{mso-number-format:\@;}&quot;) &apos;將所有td欄位格式改    為&quot;文字&quot;
Response.Write(&quot;&lt;/style&gt;&quot;)
%&gt;
&lt;table border=1 style=&quot;font-size:12pt;&quot;&gt;
&lt;tr&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;卡別&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;卡號&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;會員編號&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;身分證字號&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;姓名&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;印製狀態&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;E-mail&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;申請時間&lt;/th&gt;  
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;聯絡地址&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;聯絡電話&lt;/th&gt;
&lt;th bgcolor=&quot;#d0d0d0&quot;&gt;手機電話&lt;/th&gt;
&lt;/tr&gt;
&lt;%
while not RS.EOF
    response.write &quot;&lt;tr&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;CardType&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;CardNo&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;member_gicuitem&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;personalid&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;realname&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;email&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;xreffctupublic&quot;) &amp; &quot;&lt;/td&gt;&quot;            
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;deditDate&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;address&quot;)&amp;&quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;telSection&quot;)&amp;RS(&quot;tel&quot;) &amp; &quot;&lt;/td&gt;&quot;
        response.write &quot;&lt;td align=&apos;left&apos;&gt;&quot; &amp; RS(&quot;mobile&quot;) &amp; &quot;&lt;/td&gt;&quot;
    response.write &quot;&lt;/tr&gt;&quot;
    RS.movenext
wend
%&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>從上面可以看到，只要一段CSS就可以解決你的問題了，而如果你是要其他格式也可以幫你轉換，這邊幫大家找到一份整理資料如下：</p>
<table border="0" cellpadding="1" cellspacing="1" width="100%"><tbody><tr><td valign="top" width="50%">mso-number-format:”0”</td><td valign="top" width="50%">NO Decimals</td></tr><tr><td valign="top" width="50%">mso-number-format:”0.000”</td><td valign="top" width="50%">3 Decimals</td></tr><tr><td valign="top" width="50%">mso-number-format:”#\,##0.000”</td><td valign="top" width="50%">Comma with 3 dec</td></tr><tr><td valign="top" width="50%">mso-number-format:”mm\/dd\/yy”</td><td valign="top" width="50%">Date7</td></tr><tr><td valign="top" width="50%">mso-number-format:”mmmm\ d\,\ yyyy”</td><td valign="top" width="50%">Date9</td></tr><tr><td valign="top" width="50%">mso-number-format:”m\/d\/yy\ h\:mm\ AM\/PM”</td><td valign="top" width="50%">D -T AMPM</td></tr><tr><td valign="top" width="50%">mso-number-format:”Short Date”</td><td valign="top" width="50%">01/03/1998</td></tr><tr><td valign="top" width="50%">mso-number-format:”Medium Date”</td><td valign="top" width="50%">01-mar-98</td></tr><tr><td valign="top" width="50%">mso-number-format:”d-mmm-yyyy”</td><td valign="top" width="50%">01-mar-1998</td></tr><tr><td valign="top" width="50%">mso-number-format:”Short Time”</td><td valign="top" width="50%">5:16</td></tr><tr><td valign="top" width="50%">mso-number-format:”Medium Time”</td><td valign="top" width="50%">5:16 am</td></tr><tr><td valign="top" width="50%">mso-number-format:”Long Time”</td><td valign="top" width="50%">5:16:21:00</td></tr><tr><td valign="top" width="50%">mso-number-format:”Percent”</td><td valign="top" width="50%">Percent - two decimals</td></tr><tr><td valign="top" width="50%">mso-number-format:”0%”</td><td valign="top" width="50%">Percent - no decimals</td></tr><tr><td valign="top" width="50%">mso-number-format:”0.E+00”</td><td valign="top" width="50%">Scientific Notation</td></tr><tr><td valign="top" width="50%">mso-number-format:”\@”</td><td valign="top" width="50%">Text</td></tr><tr><td valign="top" width="50%">mso-number-format:”#\ ???\/???”</td><td valign="top" width="50%">Fractions - up to 3 digits (312/943)</td></tr><tr><td valign="top" width="50%">mso-number-format:”\0022£\0022#\,##0.00”</td><td valign="top" width="50%">£12.76</td></tr><tr><td valign="top" width="50%">mso-number-format:”#\,##0.00_ \;[Red]-#\,##0.00\ “</td><td valign="top" width="50%"><p>2 decimals, negative numbers in red and signed<br>(1.56   <span style="color:#cc0000;">-1.56</span>)</p></td></tr></tbody></table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactJS, AKA the V in MVC]]></title>
      <url>http://blackie1019.github.io/2013/09/26/reactjs-introduction/</url>
      <content type="html"><![CDATA[<p>ReactJS是Facebook推出的framework, 再搭配FLUX的架構下讓FB網頁上面更新資料的快速性與開發架構得到的顯著改善，也因此讓大家開始想去了解它的魅力。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/FLUX%2BReactJS/02/ReactJS.png" alt="ReactJS"></p>
<h2 id="ReactJS-Introduciton"><a href="#ReactJS-Introduciton" class="headerlink" title="ReactJS Introduciton"></a>ReactJS Introduciton</h2><p>這邊用官網的三段特色描述來簡單介紹：</p>
<ul>
<li><h3 id="VIRTUAL-DOM"><a href="#VIRTUAL-DOM" class="headerlink" title="VIRTUAL DOM"></a>VIRTUAL DOM</h3><p>  React abstracts away the DOM from you, giving a simpler programming model and better performance. React can also render on the server using Node, and it can power native apps using React Native.</p>
</li>
<li><h3 id="DATA-FLOW"><a href="#DATA-FLOW" class="headerlink" title="DATA FLOW"></a>DATA FLOW</h3><p>  React implements one-way reactive data flow which reduces boilerplate and is easier to reason about than traditional data binding.</p>
</li>
<li><h3 id="JUST-THE-UI"><a href="#JUST-THE-UI" class="headerlink" title="JUST THE UI"></a>JUST THE UI</h3><p>  Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it’s easy to try it out on a small feature in an existing project.</p>
</li>
</ul>
<p>以往我們所知用更改一個DOM的Element來呈現畫面改變的這個方法在大型頻繁更新的網站上面是非常可怕的效能瓶頸。可以看到的是ReactJS要解決的是Web開發上面UI呈現的問題，隨者網頁功能越多與越多人互相使用與交流，FB遇到越來越多需要在同一個頁面即時更新的情況，ReactJS就是因此而誕生的一個Framework．</p>
<p>而呼應FLUX架構，ReactJS用更簡單的流程來管理頁面的更新，透過事件的訂閱與註冊的概念產生單一方向的處理流程，簡化如MVC, MVVM等架構對於View方面雙向溝通的方式。而也因為是針對UI(View)處理所產生的framework，所以要結合回去你原本的AngularJS這種MVC框架也是可行的。</p>
<h3 id="AKA-V-in-MVC"><a href="#AKA-V-in-MVC" class="headerlink" title="AKA V in MVC"></a>AKA V in MVC</h3><p>React : Rethinking Best Practices. 這是我覺得對於ReactJS還不錯的一個解釋</p>
<ul>
<li>React 的設計 - 每個更新UI(View)等同於整個畫面重新繪製</li>
<li>React 的實作 - Virtual DOM與Event</li>
</ul>
<p><iframe src="http://www.slideshare.net/slideshow/embed_code/key/9yHWlcJx1bWShG" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/floydophone/react-preso-v2" title="Rethinking Best Practices" target="_blank">Rethinking Best Practices</a> </strong> from <strong><a href="http://www.slideshare.net/floydophone" target="_blank">floydophone</a></strong> </div></p>
<p>其中第4-6頁的簡單幾句話已經明確說明它的定位。</p>
<h3 id="使用ReactJS"><a href="#使用ReactJS" class="headerlink" title="使用ReactJS"></a>使用ReactJS</h3><p>可以到官方網站透過<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">React starter kit</a>取得最新的範例跟JS檔案或是參考官方<a href="https://cdnjs.com/libraries/react/" target="_blank" rel="external">CDN</a></p>
<p>如果有安裝Nodejs也可以透過使用官方的工具幫你建置開發環境</p>
<pre><code>$ npm install -g react-tools
</code></pre><p>如果你在使用上有需要用任何Add-ons，則使用下面的方式引入你的專案</p>
<pre><code>var React = require(&apos;react/addons&apos;); instead.
</code></pre><p>當然你也可以用Bower統一下載</p>
<pre><code>$ bower install --save react
</code></pre><p>這邊我們就直接用JSBin帶大家一起說聲Hello world</p>
<h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h4><p><a class="jsbin-embed" href="http://jsbin.com/kixotojavo/2/embed?html,js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>很簡單的只要在HTML頁面放好一個div tag,並透過React render出所需要呈現的畫面裡面有什麼(這邊製作了一個div的Element並在裡面放入文字)，並讓這個建置他的物件本身的Name的屬性可以被傳入內部配合處理。</p>
<h3 id="JSX-and-Hello-world-with-JSX-Syntax"><a href="#JSX-and-Hello-world-with-JSX-Syntax" class="headerlink" title="JSX and Hello world with JSX Syntax"></a>JSX and Hello world with JSX Syntax</h3><h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p>在已經習慣寫XML的情況下要我們產生一個div物件很簡單，但在剛剛說Hello world的時候我們怎麼知道要怎麼產生出一個div物件呢？</p>
<p>React為了讓開發方便就同時提出了一個JSX syntax的方式，接下來我們直接看看JSX的話會長什麼樣子吧</p>
<pre><code>var HelloMessage = React.createClass({
      render: function() {
        return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;
      }
});

React.render(&lt;HelloMessage name=&quot;Blackie&quot; /&gt;, mountNode);
</code></pre><p>有沒有覺得很熟悉很簡單了，透過JSX我們可以快速地進行開發</p>
<h4 id="Hello-world-with-JSX-Syntax"><a href="#Hello-world-with-JSX-Syntax" class="headerlink" title="Hello world with JSX Syntax"></a>Hello world with JSX Syntax</h4><p><a class="jsbin-embed" href="http://jsbin.com/zezebu/3/embed?html,js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>因為如果使用一般的JS Bin會出現下面的錯誤</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/FLUX%2BReactJS/02/JS%20Bin%20Error.png" alt="Error"></p>
<p>這邊為了做出JSX可以在JS Bin上面執行的結果使用了<a href="http://react.rocks/example/6to5_JSBin" target="_blank" rel="external">6to5 JS Bin</a></p>
<p>可以看到如果使用JSX的話記得要加上</p>
<pre><code>&lt;script src=&quot;xxxx/JSXTransformer.js&quot;&gt;&lt;/script&gt;
</code></pre><p>這行的作用，主要就是去讓JSXTransformer.js查詢並針對所有的script type為text/jsx的內容作轉換。</p>
<p>在開發的時候我們可以透過JSX幫我快速地寫出我們想要的畫面，但因為JSX是一種結合XML語法的pre-compile結果，所以如果是要正式發佈的話還是轉換成純Javascript的內容，這樣才可以使render產生畫面的速度加快。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完介紹與簡單實作，總結一下為什麼想用Reactjs</p>
<ul>
<li>單一流程<ul>
<li>簡化以往對於UI(View)更新的方向，捨棄資料綁定的概念，改用重繪的架構，確保每個資料都能夠更新並顯示。這使得發生問題或新增修改功能時會更加快速上手</li>
</ul>
</li>
<li>Virtual DOM<ul>
<li>比操作DOM來說效能更好的解決方法，能在大量且頻繁的更新情況下，更快速的反應畫面異動結果</li>
</ul>
</li>
<li>強化Component概念<ul>
<li>強化小模組單一功能的component。這除了縮小每個功能的開發範圍與可重複利用重組任意<br>Component，也讓測試可以被執行也應該要以測試為前提進行開發(TDD)</li>
</ul>
</li>
</ul>
<p>下一次會用簡單的Demo解說React如何使用FLUX這個架構，有興趣先了解FLUX的流程可以先參考另外一篇<a href="http://www.dotblogs.com.tw/blackie1019/archive/2015/04/14/151049.aspx" target="_blank" rel="external">[FLUX]FLUX架構介紹與實作FLUX架構
</a></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://jamestw.logdown.com/posts/207346-a-preliminary-study-on-reactjs" target="_blank" rel="external">初探Reactjs</a></li>
<li><a href="http://www.sitepoint.com/getting-started-react-jsx/" target="_blank" rel="external">Getting Started with React and JSX</a></li>
<li><a href="http://www.tivix.com/blog/react-js-the-new-kid-on-the-block/" target="_blank" rel="external">React JS: The new kid on the block</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Google Chart API 畫出QRCode]]></title>
      <url>http://blackie1019.github.io/2013/09/26/qrcode-generate-by-google-chart-api/</url>
      <content type="html"><![CDATA[<p>這是Google提供的一個免費的畫圖Web API Service ，只要傳入指定選項與內容即可透過呼叫Web API Service的方式產生你要的圖或表甚至是QRCode</p>
<a id="more"></a>
<h2 id="Google-Chart-API"><a href="#Google-Chart-API" class="headerlink" title="Google Chart API"></a>Google Chart API</h2><p>除了傳統的直接互叫web service 服務之外，現在只要是google提供的API都有做動態載入的功能，使用上如下</p>
<pre><code> &lt;!--載入 AJAX API--&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.google.com/jsapi&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;

  //動態載入 Visualization API 與 piechart package.
  google.load(&apos;visualization&apos;, &apos;1.0&apos;, {&apos;packages&apos;:[&apos;corechart&apos;]});

  // 設定 Google Visualization API 成功載入時的callback function
  google.setOnLoadCallback(drawChart);

  // 執行畫圖
  function drawChart() {

    // Create the data table.
    var data = new google.visualization.DataTable();
    data.addColumn(&apos;string&apos;, &apos;Topping&apos;);
    data.addColumn(&apos;number&apos;, &apos;Slices&apos;);
    data.addRows([
      [&apos;Mushrooms&apos;, 3],
      [&apos;Onions&apos;, 1],
      [&apos;Olives&apos;, 1],
      [&apos;Zucchini&apos;, 1],
      [&apos;Pepperoni&apos;, 2]
    ]);

    // 設定畫圖相關屬性
    var options = {&apos;title&apos;:&apos;How Much Pizza I Ate Last Night&apos;,
                   &apos;width&apos;:400,
                   &apos;height&apos;:300};

    // 傳入畫圖相關數興趣產生畫圖的instance並將結果畫在指定內容上
    var chart = new google.visualization.PieChart(document.getElementById(&apos;chart_div&apos;));
    chart.draw(data, options);
  }
&lt;/script&gt;
</code></pre><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>這邊帶大家看一個QRCode的範例，此範例是用呼叫服務的方式產生</p>
<p><a class="jsbin-embed" href="http://jsbin.com/AbEFEmu/1/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>基本上要畫圖表也可以，而此範例適用動態載入後再呼叫服務的方式產生</p>
<p><a class="jsbin-embed" href="http://jsbin.com/AbEFEmu/2/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>想知道還可以做到什麼更多的內容，請參考<a href="https://google-developers.appspot.com/chart/interactive/docs/gallery" target="_blank" rel="external">此</a></p>
<p>想要線上玩玩Goolge的Chart API 可以到<a href="https://code.google.com/apis/ajax/playground/?type=visualization#pie_chart" target="_blank" rel="external">此</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用iScroll.js讓在Cordova(Phonegap)上面快樂拖曳與捲軸功能＆一秒加速iscroll.js]]></title>
      <url>http://blackie1019.github.io/2013/09/09/iscrolljs-introduction-with-cordova/</url>
      <content type="html"><![CDATA[<p>在開發Hybrid app或是Web app的時候難免會需要做到拖曳或是滾動刷新的功能，通常網頁放到手機上拖放功能都可以正常運作，但如果要做成app的方式，就不會希望你的application被發現可以這樣拖曳(會被猜穿是網頁使用者會有疑慮，使用經驗會不好)</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130910/1.jpg" alt="iScroll.js"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常有這需求大致上可能要完成下面幾個功能：</p>
<ol>
<li>條列頁下拉刷新</li>
<li>左右滑動切換資料(類似carousels效果，以前寫silverlight時第一個做的demo就是這個效果)</li>
<li>點選Zoom in與雙指Zoom out</li>
<li>與滾動相關的操作</li>
</ol>
<p>當有以上需求的時候就可以透過iScroll.js來幫你完成</p>
<h2 id="iScroll-js介紹"><a href="#iScroll-js介紹" class="headerlink" title="iScroll.js介紹"></a>iScroll.js介紹</h2><p>他可以支援上述的點選縮放(pinch/zoom), 下拉更新(pull down to refresh)與滾動事件等來製作客製功能.</p>
<p>這邊節錄官方的幾個重要功能,以下幾個功能用手機或平板操作比較好</p>
<ul>
<li>下拉更新<a href="http://cubiq.org/dropbox/iscroll4/examples/pull-to-refresh/" target="_blank" rel="external">DEMO</a></li>
<li>點選縮放<a href="http://cubiq.org/dropbox/iscroll4/examples/zoom/" target="_blank" rel="external">DEMO</a></li>
<li>左右slide效果<a href="http://cubiq.org/dropbox/iscroll4/examples/carousel/" target="_blank" rel="external">DEMO</a></li>
</ul>
<p>這邊實作上只要先加入該script後在你要使用的dom物件帶入生成iScroll物件即可，如下</p>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script&gt;
        myScroll = new iScroll(&apos;div_showcase_img&apos;,{ zoom: true });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;div_showcase_img&quot; class=&quot;div_showcase_img&quot;&gt;
        &lt;img class=&quot;showcase_img_s&quot; src=&quot;test.png&quot;&gt;&lt;/img&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>這樣就可以生成一個支援點選縮放的區塊了，如下示意：</p>
<p>一開始：<br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130910/4.png" alt="demo圖-1"></p>
<p>點選：<br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130910/5.png" alt="demo圖-2"></p>
<p>雙指放大：<br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130910/6.png" alt="demo圖-3"></p>
<p>好吧，看圖說故事是沒用的，來看影片吧哈哈</p>
<p><a href="http://www.youtube.com/watch?v=pENszKvvGEg" target="_blank" rel="external">http://www.youtube.com/watch?v=pENszKvvGEg</a></p>
<h2 id="祕技：一秒加速"><a href="#祕技：一秒加速" class="headerlink" title="祕技：一秒加速"></a>祕技：一秒加速</h2><p>接下來來示範一秒加速</p>
<p>將下面打開iScroll.js並將103行的useTransition從false改為true就好</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130910/2.png" alt="加速"></p>
<p>一秒搞定真給力！其實是參考K大的文章-<a href="http://www.icoding.co/2012/03/iscroll-js%E7%9A%84scroll%E4%B8%8D%E9%A0%86%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F" target="_blank" rel="external">iScroll.js的scroll不順怎麼辦？</a></p>
<p>現在最新版的iScroll5 也在beta了，目前已經有的demo非常多，看來功能真的變強大了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130910/3.png" alt="demo圖"></p>
<p>有興趣的可以上他們<a href="https://github.com/cubiq/iscroll" target="_blank" rel="external">Github</a>關註一下</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[for loop vs for-in loop 與效能改善]]></title>
      <url>http://blackie1019.github.io/2013/09/04/for-loop-vs-for-in-loop/</url>
      <content type="html"><![CDATA[<p>比較for loop與for-in loop與效能實戰<br><a id="more"></a></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130905/1.png" alt="Logo"></p>
<h2 id="for-loop-介紹"><a href="#for-loop-介紹" class="headerlink" title="for loop 介紹"></a>for loop 介紹</h2><p>引用<a href="http://www.w3schools.com/js/js_loop_for.asp" target="_blank" rel="external">W3C school</a>上的內容</p>
<blockquote>
<p>Loops are handy, if you want to run the same code over and over again, each time with a different value.<br>Often this is the case when working with arrays:</p>
</blockquote>
<p>這邊他也特別說明幾種迴圈，引用上面的出處的內容</p>
<ul>
<li>for - loops through a block of code a number of times</li>
<li>for/in - loops through the properties of an object</li>
<li>while - loops through a block of code while a specified condition is true</li>
<li>do/while - also loops through a block of code while a specified condition is true</li>
</ul>
<p>這邊很簡單的說明了一般For,while,do/while 這三個類型的loop都是可以取得一整群物件或是重復做某動作時使用，只有for/in 是取得物件內屬性(properties)時使用</p>
<p>在使用for/in loop的時候需要注意因為物件屬性在被存入物件的時候會以key-value的方式存放，物件內屬性排序是依照屬性名稱去排序的，有時會發生你宣告的順序與讀出的順序不同的情況，如下：</p>
<pre><code>//變數宣告
var items=[1,2,3,4,5],
    items_ch=[&quot;tse&quot;,&quot;123&quot;,&quot;abc&quot;,&quot;gg&quot;,&quot;中文&quot;],
    item={
      &quot;first&quot;:&quot;first&quot;,
      &quot;2&quot;:&quot;2&quot;,
      &quot;34&quot;:&quot;34&quot;,
      &quot;1&quot;:&quot;1&quot;,
      &quot;second&quot;:&quot;second&quot;
    };
</code></pre><p>上面三種物件只有item是單一物件其他都是陣列的方式，這邊使用for loop與for-in loop來比較一下呈現結果</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130905/3.png" alt="for與for-in比較"></p>
<p>可以看到在讀出屬性時他的順序的確是按照key值去排序，而不是按照我們宣告的順序(properties本來宣告也就沒再分順序)，使用時要稍微注意一下</p>
<h2 id="更有效的使用for-loop"><a href="#更有效的使用for-loop" class="headerlink" title="更有效的使用for loop"></a>更有效的使用for loop</h2><p>原始的迴圈版本</p>
<pre><code>for(var i=0;i&lt;items.length;i++){

}
</code></pre><p>調整1：將items.length宣告成一個變數，並讓迴圈的判斷改成每次去比對該變數</p>
<pre><code>for(var i=0;i&lt;items.length;i++){

}
</code></pre><p>調整2：將迴圈改為遞減至0</p>
<pre><code>for(var i=items.length;i&gt;0;i--){

}
</code></pre><p>調整3:透過while迴圈改善</p>
<pre><code>var i=items.length;
while(i--){

}
</code></pre><p>三者的實際比較可以看下圖(測試的電腦為mac air 2011 cpu i5，1.7 GHz (i5-2557M) dual-core Intel Core i5 with 3 MB shared L3 cache)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130905/2.png" alt="效能圖"></p>
<p>這邊也額外加上了for-in loop的比較，由此可知錯用for-in loop來跑真的是一件很可怕的事情….(跟原本的迴圈比降低了90%以上的效能)</p>
<p>而<em>改善二</em>跟<em>改善三</em>在我桌機上(i7 3770) 基本上秒數是一樣差不了太多，效能改善跟原本的相比<em>改善二</em>跟<em>改善三</em>大概差了1%左右</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以自己開發上來說我會盡量作<em>改善三</em>，少部分情況我也會只做<em>改善一</em>而已(迴圈內數量不大且沒雙層迴圈的情況)</p>
<p>小小的一個迴圈可能就可以讓你的程式效能差距甚遠，<em>改善一</em>只是將變數往前提出宣告就可以進步10%的效能，這可能是CP值最高的必修項目了<br>，而如果你錯用for-in再跑迴圈的話可能會跑到哭出來，在這邊分享心得給大家一下摟，如果有更好的寫法也麻煩提出建議讓小弟也學習一下～！</p>
<p>##題外話-撰寫保持ＣＰＵ使用率在50%的程式</p>
<p>因為在跑for loop 每次透過console.log印出結果時發現CPU會飆到100％，這時我想到幾年前看過一個號稱是微軟面試程式人員的題目，要面試人員寫出一個可以讓CPU維持50%運作情況的程式，這邊我們可以透過for loop + setTimeout 來作，程式如下：</p>
<pre><code>setInterval(&quot;doLoop()&quot;,300);
function doLoop(){
    console.log(&quot;do looping...&quot;);
    //變數宣告與前置處理
    var items=[];
    for(var i=0;i&lt;5150;i++){
        items.push(i);
    }
    for(var i=0,itemLength=items.length;i&lt;itemLength;i++){
        console.log(&quot;&quot;);
    }
}
</code></pre><p>Mac的用戶可以用iStat pro來看，結果截圖如下<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130905/4.png" alt="50%圖"></p>
<p>記得那個題目還有波形，三角形與長方形等應用，其實都是透過讓CPU飆上去再讓他idle控制CPU使用量的波形，有興趣的人可以去做做看摟</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript use strict(嚴格模式)-strict mode 介紹]]></title>
      <url>http://blackie1019.github.io/2013/08/29/javascript-strick-mode-introduction/</url>
      <content type="html"><![CDATA[<p>JavaScript 的核心是基於<a href="http://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="external">ECMAScript</a>標準，而該標準在最近一次更新(2009年)更新為第五版，其中加入strict mode(嚴格模式)這個功能，可以讓你的語法變得較嚴謹，相對於原本的語法較不容易出錯</p>
<a id="more"></a>
<p>使用上很簡單，只要加上即可，先呈現一個使用範例</p>
<pre><code>&quot;use strict&quot;;//使用strict mode(嚴格模式)
function tryFunction(){
    var tryValue = 123;
    return tryValue;
}

// This causes a syntax error.
testvar = 123;
</code></pre><p>這邊如果你用瀏覽器看後會發現一個被拋出的錯誤</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130830/1.png" alt="架構圖"></p>
<p>如此就可以很簡單的透過strict mode來限制一些比較鬆散的寫法跟可能發生問題的地方(但這樣好像失去了原本js最被人家稱讚的彈性)</p>
<hr>
<h2 id="優缺點與使用"><a href="#優缺點與使用" class="headerlink" title="優缺點與使用"></a>優缺點與使用</h2><p>那為什麼要有這個strict mode以及優缺點為何，簡單幫大家整理如下:</p>
<ul>
<li>優點:讓語法更簡單、可以撰寫出較嚴謹的js避免一些突發的意外，要知道在js抓問題不是普通的難，尤其那一段程式碼還不是你寫的時候，通常你抓到問題架構你也全部搞懂了</li>
<li>缺點:Browser支援程度需要先確認，也別期望只要加了<code>&quot;use strict&quot;;</code>就不用改程式，通常用很多plugin的專案你會改到哭(但我還是建議用strict mode)</li>
</ul>
<p>在使用上除了剛剛一開始的範例外你也可把<code>&quot;use strict&quot;;</code>這個用在function裡面，就不會變成全域都嚴格模式，範例如下:</p>
<pre><code>function tryFunction(){
    &quot;use strict&quot;;//使用strict mode(嚴格模式)
    tryValue = 123;
    return tryValue;
}

// This worked fine.
testvar = 123;
// This causes a syntax error
tryFunction();
</code></pre><hr>
<h2 id="瀏覽器支援程度"><a href="#瀏覽器支援程度" class="headerlink" title="瀏覽器支援程度"></a>瀏覽器支援程度</h2><ul>
<li>Chrome13之後都有支援(最新19)</li>
<li>IE10,11有支援(但上面有10有bug)</li>
<li>FF4有支援</li>
<li>Safari5.1之後有支援(最新6)</li>
</ul>
<p>詳細資料可以看下面的資訊<a href="http://kangax.github.io/es5-compat-table/" target="_blank" rel="external">ECMAScript 5 compatibility table(支援比較表)</a></p>
<p>如果你的瀏覽器沒有支援使用<code>&quot;use strict&quot;;</code>對你不會有任何影響，只是一個文字而已，所以幹嘛不用~~!哈XD</p>
<p>而且未來JavaScript計畫也會全面朝向strict mode做架構，目前只是鼓勵但以後可能就是全面普及了(此句為自己腦補…)</p>
<hr>
<h2 id="常見用法之限制"><a href="#常見用法之限制" class="headerlink" title="常見用法之限制"></a>常見用法之限制</h2><p>比較常見的一些限制可以參考<a href="http://msdn.microsoft.com/zh-tw/library/ie/br230269(v=vs.94" target="_blank" rel="external">微軟的中文文件</a>.aspx)(這幾年文件真的做很詳細還中文，糾甘心)</p>
<p>幾個重點整理節錄來至<a href="http://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/" target="_blank" rel="external">NCZOnline</a> 用原本範例換成中文讓大家瞭解一下</p>
<h3 id="消除-with-的用法"><a href="#消除-with-的用法" class="headerlink" title="消除 with 的用法"></a>消除 with 的用法</h3><p>不能使用<em>with</em>這個用法了，所以在使用<em>strict mode</em>時請先確認你沒有用下列的寫法</p>
<pre><code>// Causes a syntax error in strict mode
with (location) {
    alert(href);
}
</code></pre><h3 id="變數使用需要先宣告"><a href="#變數使用需要先宣告" class="headerlink" title="變數使用需要先宣告"></a>變數使用需要先宣告</h3><p>在使用<em>strict mode</em>下不能用下面這樣的變數使用(下面的範例正確使用需要先透過var 宣告someUndeclaredVar才可以用)</p>
<pre><code>// Throws an error in strict mode
(function() {

    someUndeclaredVar = &quot;foo&quot;;

}());
</code></pre><h3 id="使用this前的注意事項"><a href="#使用this前的注意事項" class="headerlink" title="使用this前的注意事項"></a>使用this前的注意事項</h3><p>另外一個重點就是你不能使用在還沒宣告的時候給一個物件相關的this-value(沒宣告的定義是當該物件是null 或undefined時)，如下錯誤的示範</p>
<pre><code>window.color = &quot;red&quot;;
function sayColor() {
    alert(this.color);
}

// Throws an error in strict mode, &quot;red&quot; otherwise
sayColor();

// Throws an error in strict mode, &quot;red&quot; otherwise
sayColor.call(null);
</code></pre><p>基於<a href="#變數使用需要先宣告">變數使用需要先宣告</a>的原則不能直接使用上方的this的寫法因為你沒先宣告this的物件為何</p>
<p>下面這段也是一樣有錯誤，如果要透過constructor來產生的話要透過new的方式來告訴它this為何物件</p>
<pre><code>function Person(name) {
    this.name = name;
}

// Error in strict mode
var me = Person(&quot;Nicholas&quot;);
</code></pre><h3 id="物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱"><a href="#物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱" class="headerlink" title="物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱"></a>物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱</h3><p>這通常是撰寫的時候誤打的，所以要注意下面兩個寫法在<em>strict mode</em>都是被禁止的<br>    // Error in strict mode - duplicate arguments<br>    function doSomething(value1, value2, value1) {<br>        //code<br>    }</p>
<pre><code>// Error in strict mode - duplicate properties
var object = {
    foo: &quot;bar&quot;,
    foo: &quot;baz&quot;
};
</code></pre><p>These are both syntax errors and so the error is thrown before the code is executed.</p>
<h3 id="還是可以使用eval-，但有點小改變"><a href="#還是可以使用eval-，但有點小改變" class="headerlink" title="還是可以使用eval()，但有點小改變"></a>還是可以使用eval()，但有點小改變</h3><p>最大的改變是在eval()內宣告的變數(variables)與函式(functions)並不會在scope中存在，如下範例</p>
<pre><code>(function() {

    eval(&quot;var x = 10;&quot;);

    // Non-strict mode, alerts 10
    // Strict mode, throws an error because x is undeclared
    alert(x);

}());
</code></pre><p>上面的範例可以透過return value的方式把x傳回給scope呈現，<br>如下範例</p>
<pre><code>(function() {

    var result = eval(&quot;var x = 10, y = 20; x + y&quot;);

    // Works in strict and non-strict mode (30)
    alert(result);

}());
</code></pre><h3 id="對於不可改變的屬性無法在宣告後再對內容做彈性修改"><a href="#對於不可改變的屬性無法在宣告後再對內容做彈性修改" class="headerlink" title="對於不可改變的屬性無法在宣告後再對內容做彈性修改"></a>對於不可改變的屬性無法在宣告後再對內容做彈性修改</h3><p>如果屬性被設為read only 或 freezing，如果再去修改會拋出Error警示(在<em>non-strict mode</em>一樣實際的值不會改只是不會拋出Error警示)</p>
<pre><code>var person = {};
Object.defineProperty(person, &quot;name&quot;, {
    writable: false,
    value: &quot;Nicholas&quot;
});

// Fails silently in non-strict mode, throws error in strict mode
person.name = &quot;John&quot;;
</code></pre><hr>
<p>以上希望對大家有幫助，如果有錯的地方也麻煩指導一下小弟，一起進步</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Make first letter of a string upper case in C#]]></title>
      <url>http://blackie1019.github.io/2013/08/29/make-first-letter-of-a-string-upper-case/</url>
      <content type="html"><![CDATA[<p>寫程式時我們常常遇到要將英文文字轉換成大寫與小寫的需求，此時我們通常會使用.ToUpper()或.ToLower()的方式做大寫與小寫的轉換</p>
<a id="more"></a>
<p>但我們也會常常收到只需要將第一個字轉成大寫其他都小寫的需求，這時我們可以透過TextInfo這個類別的.ToTitleCase()來幫忙我們完成</p>
<p>使用前先稍微了解一下這個TextInfo類別的</p>
<h2 id="TextInfo-類別-net-framework後-2-0開始使用"><a href="#TextInfo-類別-net-framework後-2-0開始使用" class="headerlink" title="TextInfo 類別(.net framework後 2.0開始使用)"></a>TextInfo 類別(.net framework後 2.0開始使用)</h2><ul>
<li>定義文字屬性和行為，例如書寫系統特有的大小寫。</li>
<li><p>使用方式:</p>
<pre><code>string testStr = ABC;
var convertStr = Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(gameType.ToString().ToLower());
</code></pre></li>
</ul>
<p>這邊要稍微注意一下，這個方法只能將第一個字變大寫，如果像範例原本就是三個大寫的字卻希望只有開頭大寫的話就要先做一次.ToLower()將文字都轉換成小寫在透過.ToTitleCase()將第一個字轉換為大寫。</p>
<p>關於TextInfo類別的其他方法(Method):</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140309/TextInfo.PNG" alt="Method"></p>
<p><a href="http://msdn.microsoft.com/zh-tw/library/System.Globalization.TextInfo(v=vs.110" target="_blank" rel="external">MSDN:TextInfo類別</a>.aspx)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flurry on Android]]></title>
      <url>http://blackie1019.github.io/2013/08/27/flurry-on-android/</url>
      <content type="html"><![CDATA[<p>關於Flurry在Android上面的設定</p>
<a id="more"></a>
<h2 id="接續上一篇Flurry-on-iOS，這篇來講android上的設定"><a href="#接續上一篇Flurry-on-iOS，這篇來講android上的設定" class="headerlink" title="接續上一篇Flurry on iOS，這篇來講android上的設定"></a>接續上一篇<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/08/27/115696.aspx" target="_blank" rel="external">Flurry on iOS</a>，這篇來講android上的設定</h2><p>在android上的安裝大致上也是先一樣在Flurry官網上面新增一個application來追蹤的key並且下載下面兩個檔案</p>
<ul>
<li><a href="http://www.flurry.com/flurry-analytics.html" target="_blank" rel="external">Flurry</a></li>
<li><a href="https://github.com/jfpsf/flurry-phonegap-plugin" target="_blank" rel="external">Flurry plugin</a></li>
</ul>
<p>接下來按照下面步驟放入android專案中</p>
<ol>
<li>將Flurry SDK中的<em>Flurry.jar</em>放到<em>libs</em>目錄當中(須注意是否有將它設為build path)</li>
<li>將FlurryPlugin中的<em>Flurry.java</em>放到<em>src</em> 目錄中(這邊依照使import時希望呈現的namespace建立目錄或是透過eclipse加入則自動建立對應的目錄)，再將然後再把<em>flurryPlugin.js</em>放入<em>www</em>下任意位置(這邊放在<em>www/js/android/flurryPlugin.js</em>)</li>
<li>Android專案中記得先確定對應的設定檔(<em>AndroidManifest.xml</em>)是否把INTERNET、ACCESS_COARSE_LOCATION等權限打開(新版phonegap專案預設都是全開)</li>
<li><p>同iOS的使用，你可以在你的html中加入下面這段語法來啟用你的flurry資料蒐集並建立一個event</p>
<script type="text/javascript" src="js/android/flurryPlugin.js"></script><!--此段記得要放在cordova.js之後-->
<script type="text/javascript">
document.addEventListener("deviceready",onDeviceReady,false);
function onDeviceReady(){
window.plugins.flurry.startSession("你的application key");//這邊一定要先啟動Session
window.plugins.flurry.logEvent("[plugin]index.html");//記錄一項事件，事件名稱為[plugin]index.html
}
</script>

</li>
</ol>
<p>5.或是你也可以在android內的onStart()跟onStop()中設定key並啟動session蒐集Flurry要得資料，</p>
<blockquote>
<p>package tw.gov.nsc.mobileApp.NSCApp_all;<br>    import android.os.Bundle;<br>    import org.apache.cordova.*;<br>    import com.flurry.android.FlurryAgent;<br>    public class NSCApp_all extends DroidGap<br>    {<br>    @Override<br>    public void onCreate(Bundle savedInstanceState)<br>    {<br>    super.onCreate(savedInstanceState);<br>    // Set by <content src="index.html"> in config.xml<br>    super.loadUrl(Config.getStartUrl());<br>    //super.loadUrl(“file:///android_asset/www/index.html”)<br>    }<br>    //這邊是Flurry的設定<br>    @Override<br>    protected void onStart()<br>    {<br>    super.onStart();<br>    //啟動Session<br>    FlurryAgent.onStartSession(this, “你的application key”);<br>    }<br>    @Override<br>    protected void onStop()<br>    {<br>    super.onStop();<br>    //結束Session<br>    FlurryAgent.onEndSession(this);<br>    }<br>    }</content></p>
</blockquote>
<p>最後會異動的項目與專案架構如下(紅框是放檔案處，籃框是編譯完的class)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/2.png" alt="架構圖"></p>
<p>這邊再補充一下Flurry能做到的事情，登入Flurry後到你該Application的頁面會先看到一個簡單的統計圖片與資料，包含了最近日期的Session數(通常可以視為app打開的次數)、平均使用時間、使用者(可以分辨新舊，這邊是用device區分)、error次數紀錄、使用者區域顯示(用地圖呈現很sweet)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/3.png" alt="網站1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/4.png" alt="網站1"></p>
<p>如果覺得這樣的dashboard不夠滿足你也可以透過右邊的<em>create dashboard</em>來建立自己的呈現dashboard,此外右邊你也可以點開看各項細部內容</p>
<ul>
<li><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p>各項使用資訊，包含</p>
<ul>
<li>Active Users</li>
<li>Sessions</li>
<li>Session Length Benchmarks</li>
<li>Frequency of Use Benchmarks</li>
<li>Lifecycle</li>
<li>User Retention Benchmarks</li>
<li>Top Versions</li>
<li>Page Views</li>
</ul>
</li>
<li><h4 id="Audience"><a href="#Audience" class="headerlink" title="Audience"></a>Audience</h4><p>各項與使用者相關的資訊，包含</p>
<ul>
<li>Interests: My Apps</li>
<li>Interests: Category</li>
<li>Personas</li>
<li>Age</li>
<li>Gender</li>
<li>Geography</li>
<li>Language</li>
</ul>
</li>
<li><h4 id="User-Acquisition"><a href="#User-Acquisition" class="headerlink" title="User Acquisition"></a>User Acquisition</h4><p>用戶在各平台的使用表現，主要讓你建立比較圖，方便在該APP或服務有多平台時，決策投入多少行銷資源比較划算或是找出該平台目前較差或較好的項目</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/5.png" alt="網站1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/6.png" alt="網站1"></p>
</li>
<li><h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><p>提供各項事件相關資訊，最酷的事可以呈現事件與事件彼此互動的關係(先後啟動或是呼叫)</p>
<ul>
<li>User Paths</li>
<li>Funnels</li>
<li>Event Logs</li>
</ul>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/7.png" alt="網站1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/8.png" alt="網站1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/9.png" alt="網站1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/10.png" alt="網站1"></p>
</li>
<li><h4 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h4><p>提供各項Errors的相關資訊，幫你釐清發生時的人事時地物</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/11.png" alt="網站1"></p>
</li>
<li><h4 id="Technical"><a href="#Technical" class="headerlink" title="Technical"></a>Technical</h4><p>提供各項載具的相關資訊，如平台、版本、型號等</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130828/12.png" alt="網站1"></p>
</li>
</ul>
<p>至於如何將取得的資料做有效的分析，最近悠識有在開課(但最近的梯次都結束了)，詳情可以詢問一下他們?(但我沒有幫他們打廣告歐)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flurry on iOS]]></title>
      <url>http://blackie1019.github.io/2013/08/26/flurry-on-ios/</url>
      <content type="html"><![CDATA[<p>關於Flurry在iOS上面的設定</p>
<a id="more"></a>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/1.PNG" alt="Flurry 五周年研究報告：App 正在吞噬這個世界，Web 必須順應其變"></p>
<p><a href="http://www.inside.com.tw/2013/04/08/flurry-five-year-report-it-s-an-app-world-the-just-web-lives-in-it" target="_blank" rel="external">完整文章來源</a></p>
<h4 id="App-的世界：App-正在吞噬這個世界"><a href="#App-的世界：App-正在吞噬這個世界" class="headerlink" title="App 的世界：App 正在吞噬這個世界"></a>App 的世界：App 正在吞噬這個世界</h4><h4 id="Web-的世界：Web-已死？"><a href="#Web-的世界：Web-已死？" class="headerlink" title="Web 的世界：Web 已死？"></a>Web 的世界：Web 已死？</h4><p>開頭是一個很聳動的標題，但這的確是這幾年的趨勢，但不代表Web就要被淘汰，而是用其他延伸的開發架構轉化到不同使用方式，可以開發APP(web/hybrid app架構)或是做為server端語法(nodeJS),甚至可以做成embeded system(有興趣的可以參考<a href="http://www.mandice.com/" target="_blank" rel="external">Mandice</a>)。這年頭要明確地掌握手中資源才可以做到最有效的利用，所以不管在哪一個平台或方式都要盡量收集使用者資訊，透過分析使用者行為的方式來改善或是藉此看到商機。</p>
<p>而這邊指的Web我把它視為指前端開發，因工作上還是hybrid app架構為主，所以環境還是以Phonegap+JQM為主要，這邊就來直接帶大家一步步的透過第三方的plugin在Phonegap上也快樂的使用Flurry這套收集工具的威力。</p>
<p>先列出所有要下載的東西很簡單只有兩項</p>
<ul>
<li><a href="http://www.flurry.com/flurry-analytics.html" target="_blank" rel="external">Flurry</a></li>
<li><a href="https://github.com/jfpsf/flurry-phonegap-plugin" target="_blank" rel="external">Flurry plugin</a></li>
</ul>
<p>Flurry的註冊跟操作比較複雜，這邊以iOS一步步的教學如下</p>
<ol>
<li>至<a href="http://www.flurry.com/flurry-analytics.html" target="_blank" rel="external">Flurry</a>註冊會員並登入會員</li>
<li>點到<em>Applications</em>後點選右方的<em>Add a New Application</em><br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/2.PNG" alt="新增Applicaion"></li>
<li>這邊選擇你要加入的開發類型是哪一種，這邊我們選擇左上方的iPhone<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/3.PNG" alt="選擇Applicaion類型"></li>
<li>接下來設定你的Application名稱與類型，下方有一個Restrict Feature Set的選項，如果勾選的話你會獲取到較少的使用者資料，與一般收集版本的差異請看<a href="http://support.flurry.com/index.php?title=Analytics/Overview/RestrictedFeatureSet" target="_blank" rel="external">此處</a>。<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/4.PNG" alt="設定Application名稱與類型"></li>
<li>這邊如果你建立成功的話會產一組key，這組key就是專門來讓你放在程式裡面識別要記錄成哪一個Application的識別值，之後我們會把他放到你APP當中。<img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/5.PNG" alt="取得key"></li>
<li>然後我們打開我們已經建立的iOS Phonegap專案(我這邊用的是2.5版本但目前到最新的2.9也是相容的)，將剛剛從官方SDK下載下來的<em>Flurry.h</em>跟<em>libFlurry.a</em>檔案放置你的專案內，位置在Classes下方<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/7.PNG" alt="iOS2架構"></li>
<li>接者我們再把從plugin下載的iOS folder下的<em>FlurryPhoneGapPlugin.h</em>跟<em>FlurryPhoneGapPlugin.m</em>放到<br>Plugin下<img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/8.PNG" alt="iOS2架構"></li>
<li>然後再把 flurryPlugin.js放入<em>www</em>下任意位置(這邊放在<em>www/js/ios/flurryPlugin.js</em>)</li>
<li><p>最後會成這樣的配置，如圖<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/6.PNG" alt="iOS架構"></p>
</li>
<li><p>接下來我們要在<em>config.xml</em>(舊版Phonegap是<em>Cordova.plist</em>)內新增一組key-value對應值<br><code>&lt;plugin name=&quot;flurryPlugin&quot;value=&quot;FlurryPhoneGapPlugin&quot; /&gt;</code><br>如下圖<img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/9.PNG" alt="iOS2架構"></p>
</li>
<li><p>最後我們只要再有要用到的html頁面加入剛剛的js位置並且使用下面的方式就可以使用了</p>
</li>
</ol>
<p>&gt;<br>    <script type="text/javascript" src="js/ios/flurryPlugin.js"></script><!--此段記得要放在cordova.js之後--><br>    <script type="text/javascript"><br>    document.addEventListener(“deviceready”,onDeviceReady,false);<br>    function onDeviceReady(){<br>    window.plugins.flurry.startSession(“你的application key”);//這邊一定要先啟動Session<br>    window.plugins.flurry.logEvent(“[plugin]index.html”);//記錄一項事件，事件名稱為[plugin]index.html<br>    }<br>    </script></p>
<p>所有可以用function可以參考js裡面有實作的，如果有沒有的也可以自己實作再回饋到github歐(與你分享的快樂勝過獨自擁有~!)</p>
<p>Flurry比較麻煩的地方就是蒐集到的資料呈現在網站上大概要等6-12小時左右，所以一定不能即時回饋的。<br>在等待一陣子後返回剛剛的Flurry網站在Application的地方就可以看到妳剛剛的資料<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/10.PNG" alt="iOS2架構"></p>
<p>在左邊選單選到<em>Events</em>就可以看到我們設定的事件<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/11.PNG" alt="iOS2架構"></p>
<p>這邊如果點選每個事件右邊的user paths還能看到每個event之間的互動情形<br><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130827/12.PNG" alt="iOS2架構"></p>
<p>Flurry真的很棒，他可以幫你產生的數據直接產生報告，你可以從中做仔細分析使用者的行為以及偵錯一些exception的發生情形與統計使用者與硬體的情況…等等，應用面真的很廣，這邊希望大家都能透過這個工作做一個賺錢的app~!</p>
<p>*如果你是要開發<strong>iOS7 APP</strong>的人請注意，這邊一定要用<strong>最新的Flurry SDK</strong>不然會有一定機率當機</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL convert int to datetime overflow issue]]></title>
      <url>http://blackie1019.github.io/2013/08/26/SQL-convert-int-to-datetime-has-overflow-issue/</url>
      <content type="html"><![CDATA[<p>SQL convert int to datetime(轉換 expression 到資料類型 datetime 時發生算術溢位錯誤)</p>
<a id="more"></a>
<p>今天在幫客戶新增一個功能的時候看到前人把生日分為三個欄位(民國年,月與日)，應該是歷史包袱或效果考量吧..</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130826/2013826191632853.png" alt="img_1"></p>
<p>直覺上看到這個，直覺上就把它用數學解成(1911+year)<em>10000+month</em>100+day ,以74 10 19來說就會變成 19851019這樣的數字</p>
<p>再來再透過</p>
<pre><code>convert(datetime,‘文字時間’)
</code></pre><p>可以把文字轉換成時間格式，所以我們取得的數字轉成文字就可以</p>
<pre><code>CONVERT(VARCHAR(8),((birthyear+1911)*10000+birthmonth*100+birthday))
</code></pre><p>完整的語法與結果如下</p>
<pre><code>select gicuitem as id,convert(datetime,CONVERT(VARCHAR(8),((birthyear+1911)*10000+birthmonth*100+birthday))) as&apos;西元年月日&apos;  from testTable
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130826/2013826192452728.png" alt="img_2"></p>
<p><strong><em>注意歐！日期時間比對在非閏年的2/29 比對會發生問題(如果1973/2/29 就會發生下面的問題）</em></strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130826/20138261934271.png" alt="img_3"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Localstorage and Sessionstorage]]></title>
      <url>http://blackie1019.github.io/2013/07/17/html5-localstorage-and-sessionstorage/</url>
      <content type="html"><![CDATA[<p>HTML5新增了一些client資料儲存的功能，localStorage與sessionStorage，這邊將講解一下如何使用正確的使用他們。</p>
<a id="more"></a>
<p>在談如何使用前，先參考前輩們整理出來為什麼不要用既有的cookie來作儲存解決的原因</p>
<h2 id="Cookie-缺點"><a href="#Cookie-缺點" class="headerlink" title="Cookie 缺點"></a>Cookie 缺點</h2><ul>
<li>Cookie在每個HTTP request送出時都會被送到Server端，不管你沒有要用到Cookie中的資訊，在某種程度上會拖慢執行的效能與浪費不必要的網路頻寬</li>
<li>Cookie送出的資料本身並沒有加密，因此除非我們用SSL一類的技術做加密，否則Cookie中不宜放任何重要的資訊</li>
<li>Cookies最大才4KB，不可能存太多資料</li>
</ul>
<p><a href="http://www.dotblogs.com.tw/jimmyyu/archive/2011/03/27/html5-client-storage.aspx" target="_blank" rel="external">參考</a></p>
<h2 id="HTML5’s-new-feature"><a href="#HTML5’s-new-feature" class="headerlink" title="HTML5’s new feature"></a>HTML5’s new feature</h2><p>知道cookie的缺點後，那我們才看看有哪些html5提出的新解決方法</p>
<p>主要可以分為以下三項</p>
<ul>
<li><p>localStorage</p>
<p>  支援度最廣，使用上最簡單，速度快，跨平台，生命週期較長，原則上要等到透過Javascript將內容清掉或者使用者清空Cache時才會消失</p>
</li>
<li><p>sessionStorage</p>
<p>  同localStorage的特性，差別在於生命週期較短在Browser/Tab關閉時就會清空</p>
</li>
<li><p>IndexedDB/Web SQL Database</p>
<p>  Web SQL Database支援用SQL存取，操作很像資料庫，是基於SQLite修改的，但目前是被W3C捨棄，不算是一個標準，IE和Firefox都不支援，操作速度也頗慢</p>
</li>
</ul>
<p>IndexedDB是W3C用來取代Web SQL Database的新規範，但目前仍在制定階段<br>使用上可以參考<a href="http://msdn.microsoft.com/zh-cn/library/ie/hh779017(v=vs.85" target="_blank" rel="external">這篇</a>.aspx)</p>
<p>詳細支援程度可參考<a href="http://www.html5rocks.com/it/features/storage" target="_blank" rel="external">http://www.html5rocks.com/it/features/storage</a></p>
<h2 id="Practice-with-localStorage-and-sessionStorage"><a href="#Practice-with-localStorage-and-sessionStorage" class="headerlink" title="Practice with localStorage and sessionStorage"></a>Practice with localStorage and sessionStorage</h2><p>今天我們先介紹前兩個最長被使用的localStorage與sessionStorage使用上與實務上結合json的擴充用法</p>
<p>首先我們先看一下支援度，<a href="http://www.quirksmode.org/dom/html5.html" target="_blank" rel="external">參考</a></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130717/20137711575447.png" alt="support"></p>
<p>從上面我可以知道幾乎目前主流的瀏覽器都支援了Web Storage(localStorage and sessionStorage)，<a href="http://thenextweb.com/apps/2013/01/01/ie10-below-1-market-share-firefox-back-under-20-chrome-recovers-from-three-months-of-losses/" target="_blank" rel="external">市佔參考</a>。</p>
<p>而使用上可以分為get,set,remove三種，分別如下</p>
 <iframe id="cp_embed_qhaIl" src="//codepen.io/blackie1019|anonymous|anon/embed/qhaIl?height=300&theme-id=7928&slug-hash=qhaIl&default-tab=result" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
<p>上面我可以在輸入框輸入值後透過get來alert值，而當我們remove之後再用get則會出現null，是不是很簡單使用</p>
<p>seesionStorage也是如此歐，只是把window.localStorage.getItem換成(set,remove以此類推）</p>
<pre><code>windows.sessionStorage.getItem
</code></pre> <iframe id="cp_embed_LykfE" src="//codepen.io/blackie1019|anonymous|anon/embed/LykfE?height=300&theme-id=7928&slug-hash=LykfE&default-tab=result" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
<p>因為是key-value的架構，所以在實務上我習慣將儲存進去的item設為是一個json的格式，如此一來之後要取用就很方便摟（而且可以一次拿多個值勒）<br>這邊要稍微注意在get跟set的時候要做一下資料處理<br>存進去前的值要做</p>
<pre><code>JSON.stringify()
</code></pre><p>取出去後的值要做</p>
<pre><code>JSON.parse()
</code></pre><p>使用上的參考範例如下</p>
 <iframe id="cp_embed_ECrAk" src="//codepen.io/blackie1019|anonymous|anon/embed/ECrAk?height=300&theme-id=7928&slug-hash=ECrAk&default-tab=result" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
    </entry>
    
  
  
</search>
