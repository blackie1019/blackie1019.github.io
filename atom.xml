<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blackie&#39;s Failed Notes</title>
  
  <subtitle>Show me. Don&#39;t tell me.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blackie1019.github.io/"/>
  <updated>2021-06-15T03:56:53.409Z</updated>
  <id>https://blackie1019.github.io/</id>
  
  <author>
    <name>Blackie Tsai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Protobuf Development(.proto) on Visual Studio Code</title>
    <link href="https://blackie1019.github.io/2019/03/22/Protobuf-Development-proto-on-Visual-Studio-Code/"/>
    <id>https://blackie1019.github.io/2019/03/22/Protobuf-Development-proto-on-Visual-Studio-Code/</id>
    <published>2019-03-22T15:19:26.000Z</published>
    <updated>2021-06-15T03:56:53.409Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一下 Visual Studio 如何支援 .proto 檔案的撰寫</p><a id="more"></a><p>近期在大量以 gRPC 為基礎的開發上，很多時機需要新增或是編輯修改 .proto 檔案．</p><p>而在未安裝任何套件前當前版本的 VS Code 預設不支援 <code>.proto</code> 的程式碼高光(highlight)與程式碼智能快選(code intellisense)</p><p><img src="01.png" alt="01.png"></p><p>這邊推薦安裝 <a href="https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3" target="_blank" rel="noopener">vscode-proto3</a> </p><p>安裝完後即可看到 VS Code 有對應的檔案 icon 與 程式碼高光功能了</p><p><img src="02.png" alt="02.png"></p><p>全部支援的功能包含：</p><ul><li>proto3 support.</li><li>syntax highlighting.</li><li>syntax validation.</li><li>code snippets.</li><li>code completion.</li><li>code formatting.</li><li>brace matching.</li><li>line and block commenting.</li></ul><p>另外還要推薦一個 <a href="https://marketplace.visualstudio.com/items?itemName=ripwu.protobuf-helper" target="_blank" rel="noopener">Protobuf Helper</a> 可以自動幫我們填入 field id．</p><p>由於 protobuf 撰寫定義檔時，針對 message 的每一個 field 都要明確的給定 id，其實大多開發人員都不在意這點但又覺得很擾人，這時此套件就可以幫你快速填上或是重整摟．</p><p><img src="03.png" alt="03.png"></p><p>即可馬上變成下面：</p><p><img src="04.png" alt="04.png"></p><p>這個套件再多屬性的 message 開發中，根本是神器，以往不敢亂改的 field 順序現在就可以隨便移動摟</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄一下 Visual Studio 如何支援 .proto 檔案的撰寫&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="gRPC" scheme="https://blackie1019.github.io/tags/gRPC/"/>
    
      <category term="Protobuf" scheme="https://blackie1019.github.io/tags/Protobuf/"/>
    
  </entry>
  
  <entry>
    <title>Running consul in a container with UI and Development Mode</title>
    <link href="https://blackie1019.github.io/2019/03/21/Running-consul-in-a-container-with-UI-and-Development-Mode/"/>
    <id>https://blackie1019.github.io/2019/03/21/Running-consul-in-a-container-with-UI-and-Development-Mode/</id>
    <published>2019-03-21T16:31:22.000Z</published>
    <updated>2021-06-15T03:56:53.493Z</updated>
    
    <content type="html"><![CDATA[<p>記錄如何在容器內簡單啟動 Consul 的 Development Mode 與 UI 的指令</p><a id="more"></a><p>從 Consul 官方的文件中或是 <a href="https://hub.docker.com/_/consul" target="_blank" rel="noopener">Docker Hub</a></p><p>會叫你用以下指令就可以開啟 Development mode</p><pre><code>docker run -d --name=dev-consul -e CONSUL_BIND_INTERFACE=eth0 consul</code></pre><p>官網還寫上補上 <code>-ui</code> 就可以開啟 UI 畫面．</p><p>試了幾次不行後才眼殘發現要將預設的 0.0.0.0 綁定才能成功連到預設的 8500 port</p><p><img src="01.png" alt="01.png"></p><p>docker 指令時記得補上 <code>0.0.0.0</code> :</p><pre><code>docker run --name dev-consul -d -p 8500:8500 consul agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0</code></pre><p>接者就可以成過連線至 <a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a></p><p><img src="02.png" alt="02.png"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://learn.hashicorp.com/consul/getting-started/ui" target="_blank" rel="noopener">Consul GETTING STARTED - Web UI</a></li><li><a href="http://larrynung.github.io/2018/12/13/Consul-Web-UI/" target="_blank" rel="noopener">Larry Nung’s Level Up : Consul - Web UI</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄如何在容器內簡單啟動 Consul 的 Development Mode 與 UI 的指令&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gRPC development on .NET Core - Integration into .NET Build(.csproj)</title>
    <link href="https://blackie1019.github.io/2019/03/18/gRPC-development-on-NET-Core-Integration-into-NET-Build-csproj/"/>
    <id>https://blackie1019.github.io/2019/03/18/gRPC-development-on-NET-Core-Integration-into-NET-Build-csproj/</id>
    <published>2019-03-18T15:29:30.000Z</published>
    <updated>2021-06-15T03:56:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何將 gRPC 整合至 .NET Core 的專案檔(.csproj) 內．</p><a id="more"></a><p>延續先前兩篇 <a href="http://blackie1019.github.io/2019/02/10/gRPC-development-on-NET-Core-Basic/">gRPC 應用程式 - 基礎入門</a> 與 <a href="http://blackie1019.github.io/2019/02/12/gRPC-development-on-NET-Core-GUI-Tool-for-Testing/">gRPC 的 GUI 工具 - BloomRPC 協助 .NET Core 開發 gRPC 應用程式的整合測試</a> 後，這篇要介紹一下Grpc.Tools <code>1.17.0</code> 之後整合 .csproj 的開發方式如何更加輕鬆地進行 gRPC 的開發．</p><p>以下內容是延續 <a href="http://blackie1019.github.io/2019/02/10/gRPC-development-on-NET-Core-Basic/">gRPC 應用程式 - 基礎入門</a> 做分享，建議先看此篇後再往下閱讀．</p><p>範例程式碼：<a href="https://github.com/blackie1019/demo-grpc-dotnet-build-integration" target="_blank" rel="noopener">blackie1019/demo-grpc-dotnet-build-integration</a></p><h2 id="專案結構"><a href="#專案結構" class="headerlink" title="專案結構"></a>專案結構</h2><p>所以我們先產生了與之前雷同的目錄與內容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">├── Demo.sln</span><br><span class="line">├── protos/</span><br><span class="line">│   ├── message.cs</span><br><span class="line">│   ├── service.cs</span><br><span class="line">├── src/</span><br><span class="line">│   ├── Demo.Clinet/</span><br><span class="line">│   ├── Demo.Server/</span><br><span class="line">│   ├── Demo.Message/</span><br></pre></td></tr></table></figure><p>與先前不同的是本次直接將 gRPC 的開發整合進入 Demo.Message.csproj:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netstandard2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Google.Protobuf"</span> <span class="attr">Version</span>=<span class="string">"3.7.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Grpc"</span> <span class="attr">Version</span>=<span class="string">"1.19.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Grpc.Tools"</span> <span class="attr">Version</span>=<span class="string">"1.19.0"</span> <span class="attr">PrivateAssets</span>=<span class="string">"All"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Explicitly include our helloworld.proto file by adding this line: --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Protobuf</span> <span class="attr">Include</span>=<span class="string">"../../protos/Common/*.proto"</span> <span class="attr">ProtoRoot</span>=<span class="string">"../../protos"</span> <span class="attr">OutputDir</span>=<span class="string">"%(RelativePath)"</span> <span class="attr">CompileOutputs</span>=<span class="string">"False"</span> <span class="attr">GrpcServices</span>=<span class="string">"None"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Protobuf</span> <span class="attr">Include</span>=<span class="string">"../../protos/App/*.proto"</span> <span class="attr">ProtoRoot</span>=<span class="string">"../../protos"</span> <span class="attr">OutputDir</span>=<span class="string">"%(RelativePath)"</span> <span class="attr">CompileOutputs</span>=<span class="string">"False"</span> <span class="attr">GrpcService</span>=<span class="string">"both"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，本次專案這邊額外定義了一個通用類別於 Common 目錄下，並於使用到該類型的 .proto 載入此檔案（路徑需包含 subfolder)．</p><p>而 Grpc.Tools 設定了 <code>PrivateAssets=&quot;All&quot;</code> ，該屬性指定應取用哪些資產不會放入下一個專案的套件，阻止下一個引用該專案產生的 .dll 時 .csproj 的 .dll 引用繼承。</p><p>細節可參考<a href="https://docs.microsoft.com/zh-tw/nuget/consume-packages/package-references-in-project-files" target="_blank" rel="noopener">Package references (PackageReference) in project files</a></p><p>只要設定此步驟即可完成編譯，而這邊我們選擇 CompileOutputs 為 <code>False</code> 則需要手動IDE編譯：</p><p><img src="01.png" alt="01"></p><p>如果編譯有問題的朋友建議可以進入專案目錄下透過 <code>dotnet build</code> 編譯產出時查看細部編譯執行紀錄：</p><p><img src="02.png" alt="02"></p><p>當將 Server 與 Client 兩者運行即可看到以下畫面：</p><p><img src="03.png" alt="03"></p><p>透過 Grpc.Tools <code>1.17.0</code> 與 .csproj 的直接整合，即可加入原先手動執行 protoc 的麻煩與人為錯誤的可能，加速 gRPC 於 .NET 上的開發效率．</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/grpc/grpc/blob/master/src/csharp/BUILD-INTEGRATION.md" target="_blank" rel="noopener">Protocol Buffers/gRPC Integration Into .NET Build</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何將 gRPC 整合至 .NET Core 的專案檔(.csproj) 內．&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term=".NET" scheme="https://blackie1019.github.io/tags/NET/"/>
    
      <category term="gRPC" scheme="https://blackie1019.github.io/tags/gRPC/"/>
    
      <category term="Protobuf" scheme="https://blackie1019.github.io/tags/Protobuf/"/>
    
      <category term="Microservice" scheme="https://blackie1019.github.io/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>Secured Password with PBKDF2 on C#</title>
    <link href="https://blackie1019.github.io/2019/02/21/Secured-Password-with-PBKDF2-on-C/"/>
    <id>https://blackie1019.github.io/2019/02/21/Secured-Password-with-PBKDF2-on-C/</id>
    <published>2019-02-21T23:44:57.000Z</published>
    <updated>2021-06-15T03:56:53.501Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用 PBKDF2 更有效且安全的加密密碼</p><a id="more"></a><p>密碼加密是常見的開發需求，一般最簡單的做法可能會有直接將密碼明文(Plain Text)直接透過雜湊演算法（ MD5 或是 SHA-1 ）進行加密產生密碼密文(Ciphertext)，</p><p>最後將密文儲存至DB 之後輸入每次都接受明文後透過相同流程產生密文後<code>比對</code>兩者是否相同．</p><p><img src="hash.png" alt="hash.png"></p><p>但上面的做法雖然可以在資料層不暴露密碼的明文，但對於密碼的保護絲毫沒有任何效果．這兩者並不安全且所生成的Hash值也是相當的薄弱。它主要的優點在於生成速度快且易於實現。但是，這也意味著它是容易被暴力攻擊(Exhaustive attack)和字典攻擊(Dictionary Attack)。例如使用明文和Hash生成的彩虹表(Rainbow table)可以快速地搜索已知Hash對應的原使明文。</p><p>此外，MD5並沒有避免Hash碰撞：這意味不同的密碼會導致生成相同的Hash值。</p><p>如果真的要採用以上方法的話建議針對密碼加鹽(Salt)，每次密碼生成時增加一段亂數產生的資料並合併至原始明文內進行雜湊:</p><p><img src="salt.png" alt="salt.png"></p><p>以上的做法可以有效地產生避免上述問題，但無法解決暴力攻擊的直接破解，尤其有心人士可能都是拿GPU來做更高速的運算，此時你就需要專門為了網路應用程式開發的密碼而生的 PBKDF2 來生成密碼．</p><h2 id="What-is-PBKDF2"><a href="#What-is-PBKDF2" class="headerlink" title="What is PBKDF2"></a>What is PBKDF2</h2><p>PBKDF2(Password-Based Key Derivation Function) 是一個用來產生密鑰的雜湊函數，常用於生成具備加密的密碼。</p><p>它的基本原理是通過一個偽隨機函數（例如HMAC函數），把明文和一個鹽值作為輸入參數，然後重複進行運算，並最終產生密鑰</p><p>PBKDF2 的定義如下:</p><pre><code>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</code></pre><ul><li><p>DK(derived key)</p><p>  產生的密碼金耀</p></li><li><p>PRF(pseudo-random function)</p><p>  表示是一個隨機函數，例如HASH_HMAC函數，它會輸出長度為hLen的的結果。</p></li><li><p>Password</p><p>  輸入的密碼明文</p></li><li><p>Salt</p><p>  隨機產生的一次性亂數(長度須高於一定長度)</p></li><li><p>c</p><p>  進行重複計算的回合數（越多越複雜）</p></li><li><p>dkLen</p><p>  欲產生的 DK 密文金鑰長度</p></li></ul><p>如果重複計算的回合數足夠大，破解的成本就會變得很高。而Salt的添加也會增加攻擊的難度。上述的流程則如下示意：</p><p><img src="PBKDF2.png" alt="PBKDF2.png"></p><p>PBKDF2 與其他知名的密碼雜湊比較(Bcrept, SHA-256)的破解成本比較就可以知道差異:</p><p><img src="cost.png" alt="cost.png"></p><p>另外因為GPU比CPU做運算會快上更多，而PBKDF2 有針對 <code>GPU</code> 的攻擊做防範，這則是傳統加密雜湊運算所沒有的，整體 GPU 運算比較如下(<a href="http://hashcat.net/oclhashcat-plus/" target="_blank" rel="noopener">oclHashcat-plus</a>)：</p><p><img src="gpu.png" alt="gpu.png"></p><p>現金的無線網路 WPA/WPA2 的規格預設採用 PBKDF2，所以各語言的普及率也高，如果需要找個密碼標準來用的話，PBKDF2 是相當不錯的選擇．</p><h2 id="Implement-PBKDF2-with-C"><a href="#Implement-PBKDF2-with-C" class="headerlink" title="Implement PBKDF2 with C#"></a>Implement PBKDF2 with C#</h2><p>開發上只要引入 <code>KeyDerivation</code> 這個 Class</p><ul><li><p>Namespace:</p><p>  Microsoft.AspNetCore.Cryptography.KeyDerivation</p></li><li><p>Assembly:</p><p>  Microsoft.AspNetCore.Cryptography.KeyDerivation.dll</p></li></ul><p>因為是 ASP.NET Core 預設的已包含的套件，開發 ASP.NET Core 的朋友可以直接使用，而開發 .NET Core 的朋友則需要透過引入指令以下加入專案參考：</p><pre><code>Install-Package Microsoft.AspNetCore.Cryptography.KeyDerivation</code></pre><p>這邊需要呼叫的是 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.cryptography.keyderivation.keyderivation.pbkdf2?view=aspnetcore-2.2" target="_blank" rel="noopener">KeyDerivation.Pbkdf2(String, Byte[], KeyDerivationPrf, Int32, Int32) Method</a>：</p><ul><li><p>password</p><p>  原始傳入的密碼明文</p></li><li><p>salt，</p><p>  藉由Encoding.UTF8.GetBytes轉成byt陣列資料，傳進Pbkdf2參數，當鹽使用。</p></li><li><p>prf，</p><p>  PRF是一個偽隨機函數</p></li><li><p>iterationCount</p><p>  雜湊執行次數</p></li><li><p>numBytesRequested，</p><p>  產出的 DK 長度</p></li></ul><p>程式碼如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GenerateDk</span>(<span class="params"><span class="keyword">string</span> pw,<span class="keyword">string</span> salt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dk = KeyDerivation.Pbkdf2(</span><br><span class="line">        password: pw,</span><br><span class="line">        salt: Encoding.UTF8.GetBytes(salt),</span><br><span class="line">        prf: KeyDerivationPrf.HMACSHA512,</span><br><span class="line">        iterationCount: <span class="number">1000</span>,</span><br><span class="line">        numBytesRequested: <span class="number">256</span> / <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span>  Convert.ToBase64String(dk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">CreateSalt</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] randomBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span> / <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> generator = RandomNumberGenerator.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        generator.GetBytes(randomBytes);</span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(randomBytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/blackie1019/PBKDF2-dotnet-demo" target="_blank" rel="noopener">程式碼範例下載</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://blog.conviso.com.br/worst-and-best-practices-for-secure-password-storage/" target="_blank" rel="noopener">Worst and best practices for secure password storage</a></li><li><a href="https://blog.csdn.net/xy010902100449/article/details/52078767" target="_blank" rel="noopener">PBKDF2 算法概述</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10205239" target="_blank" rel="noopener">25.NET Core密碼PBKDF2加密方式處理</a></li><li><a href="https://blog.gslin.org/archives/2013/08/28/3484/%E5%90%84%E7%A8%AE%E5%AF%86%E7%A2%BC%E7%A0%B4%E8%A7%A3%E9%80%9F%E5%BA%A6/" target="_blank" rel="noopener">各種密碼破解速度</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用 PBKDF2 更有效且安全的加密密碼&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://blackie1019.github.io/tags/NET/"/>
    
      <category term="PBKDF2" scheme="https://blackie1019.github.io/tags/PBKDF2/"/>
    
      <category term="Cryptography" scheme="https://blackie1019.github.io/tags/Cryptography/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core load appsettings.development.json</title>
    <link href="https://blackie1019.github.io/2019/02/13/NET-Core-load-appsettings-development-json/"/>
    <id>https://blackie1019.github.io/2019/02/13/NET-Core-load-appsettings-development-json/</id>
    <published>2019-02-13T17:37:21.000Z</published>
    <updated>2021-06-15T03:56:53.329Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何讓 .NET Core 應用程式讀出 appsetting.development.json 的值</p><a id="more"></a><p>有開發過 ASP.NET Core 的朋友一定對 appsetting.json 的使用不陌生，預先支援多個環境的設定可以更方便我們在不同環境中切換</p><p>典型的設定提供者順序是：</p><ul><li>檔案 (appsettings.json、appsettings.{Environment}.json，其中 <code>{Environment}</code> 是應用程式的目前裝載環境，變數值為<code>ASPNETCORE_ENVIRONMENT</code>)</li><li>Azure Key Vault</li><li>使用者祕密 (祕密管理員) (僅限開發環境)</li><li>環境變數</li><li>命令列引數</li></ul><p>這邊則是要分享如何使用檔案的方式讓 .NET Core 的 Console Application 透過環境變數可以載入不同環境的 configuration setting.</p><p>開發上需要載入 <a href="https://www.nuget.org/packages/Microsoft.Extensions.Configuration/" target="_blank" rel="noopener">Microsoft.Extensions.Configuration</a>, <a href="https://www.nuget.org/packages/Microsoft.Extensions.Configuration.Abstractions/" target="_blank" rel="noopener">Microsoft.Extensions.Configuration.Abstractions</a> 與 <a href="https://www.nuget.org/packages/Microsoft.Extensions.Configuration.Json/" target="_blank" rel="noopener">Microsoft.Extensions.Configuration.Json</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppSettingsHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IConfigurationRoot _configuration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfigurationBuilder _builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;AppSettingsHelper&gt; Lazy =</span><br><span class="line">        <span class="keyword">new</span> Lazy&lt;AppSettingsHelper&gt;(() =&gt; <span class="keyword">new</span> AppSettingsHelper());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AppSettingsHelper Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> Lazy.Value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AppSettingsHelper()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> basePath = Directory.GetCurrentDirectory();</span><br><span class="line">        _builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetFileProvider(<span class="keyword">new</span> PhysicalFileProvider(basePath))</span><br><span class="line">            .AddJsonFile(<span class="string">"appsettings.json"</span>)</span><br><span class="line">            .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;Environment.GetEnvironmentVariable(<span class="string">"ASPNETCORE_ENVIRONMENT"</span>)&#125;</span>.json"</span>,</span><br><span class="line">                optional: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        _configuration = _builder.Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetValueFromKey</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _configuration.GetSection(key).Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上即可使用 <em>singleton</em> 的物件將設定值透過<code>GetValueFromKey</code>與指定的<code>key</code>取回．</p><p>這邊在專案上如果需要同時載入 appsettings.{Environment}.json 檔案時，需要先將本機配置環境變數，使其設定可以成取得</p><p>如希望開發時能成功載入  appsettings.development.json 檔案去複寫當前的appsettings.json設定，則需有幾種方式：</p><ol><li><p>啟動應用程式時透過參數額外帶入，如：</p><ul><li><p>Windows</p><pre><code>C:\&gt; set ASPNETCORE_ENVIRONMENT=DevelopmentC:\&gt; dotnet ...</code></pre></li><li><p>Unix/macOS</p><pre><code>$ export ASPNETCORE_ENVIRONMENT=Development$ dotnet ...</code></pre></li></ul></li><li><p><code>launch profile</code> 帶入，如：</p><p> launchSettings.json</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">"profiles"</span>: &#123;    </span><br><span class="line">    <span class="attr">"EnvironmentsSample"</span>: &#123;</span><br><span class="line">      <span class="attr">"commandName"</span>: <span class="string">"Project"</span>,</span><br><span class="line">      <span class="attr">"launchBrowser"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"environmentVariables"</span>: &#123;</span><br><span class="line">        <span class="attr">"ASPNETCORE_ENVIRONMENT"</span>: <span class="string">"Staging"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"applicationUrl"</span>: <span class="string">"http://localhost:54340/"</span></span><br><span class="line">    &#125;,   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然後指行指令時透過<code>--launch-profile</code>帶入參數</p><pre><code>dotnet run --launch-profile EnvironmentsSample</code></pre></li><li><p>IDE 設定，這邊以 Rider 為例：</p><p> <img src="01.png" alt="01.png"></p></li></ol><p>這邊要特別注意 Rider 內的測試專案是另外一個設定，需要透過以下方式額外設定 <code>Test Runner</code> 的環境變數：</p><p><img src="02.png" alt="02.png"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.2" target="_blank" rel="noopener">Configuration in ASP.NET Core</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/fundamentals/environments?view=aspnetcore-2.2" target="_blank" rel="noopener">Use multiple environments in ASP.NET Core</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何讓 .NET Core 應用程式讀出 appsetting.development.json 的值&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term=".NET" scheme="https://blackie1019.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>gRPC development on .NET Core - GUI Tool for Testing</title>
    <link href="https://blackie1019.github.io/2019/02/12/gRPC-development-on-NET-Core-GUI-Tool-for-Testing/"/>
    <id>https://blackie1019.github.io/2019/02/12/gRPC-development-on-NET-Core-GUI-Tool-for-Testing/</id>
    <published>2019-02-12T16:51:09.000Z</published>
    <updated>2021-06-15T03:56:53.733Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用 gRPC 的 GUI 工具 - BloomRPC 協助 .NET Core 開發 gRPC 應用程式的整合測試</p><a id="more"></a><p>先前分享了如何開發 gRPC 應用程式，而開發完成的服務端除了自己寫客戶端/應用端去呼叫外，也可以透過 GUI 工具進行整合測試．</p><p>本此使用的工具是 <a href="https://github.com/uw-labs/bloomrpc" target="_blank" rel="noopener">BloomRPC</a></p><p>這邊可以直接下載安裝版的使用，安裝完成後打開的介面如下:</p><p><img src="https://github.com/uw-labs/bloomrpc/raw/master/resources/editor-preview.gif" alt="editor-preview"></p><p>以先前示範的 gRPC 專案<a href="https://github.com/blackie1019/demo-grpc" target="_blank" rel="noopener">demo-grpc</a>來做範例，我們可以先將 <code>Demo.Server</code> 運行起來</p><p>而後於BloomRPC的介面載入 .proto 定義，接著就可以從上面發起整合測試：</p><p><img src="01.png" alt="01.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用 gRPC 的 GUI 工具 - BloomRPC 協助 .NET Core 開發 gRPC 應用程式的整合測試&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term=".NET" scheme="https://blackie1019.github.io/tags/NET/"/>
    
      <category term="gRPC" scheme="https://blackie1019.github.io/tags/gRPC/"/>
    
      <category term="Protobuf" scheme="https://blackie1019.github.io/tags/Protobuf/"/>
    
      <category term="Microservice" scheme="https://blackie1019.github.io/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>gRPC development on .NET Core - Basic</title>
    <link href="https://blackie1019.github.io/2019/02/10/gRPC-development-on-NET-Core-Basic/"/>
    <id>https://blackie1019.github.io/2019/02/10/gRPC-development-on-NET-Core-Basic/</id>
    <published>2019-02-10T16:40:06.000Z</published>
    <updated>2021-06-15T03:56:53.709Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何在 .NET Core 中開發 gRPC 應用程式 - 基礎入門</p><a id="more"></a><p><img src="landing.png" alt="landing.png"></p><p>gRPC 是一個由 google 開發的開源、跨語言且高效能的 RPC Framework，它可以高效地連接單個或多個數據中心的服務，也可以支持可插拔的負載均衡，追踪，健康檢查以及認證。當然，它也能應用於分散式計算的中用來連接各種設備、APP 應用、瀏覽器(需要一點技巧)與後端服務．</p><p>目前在 .NET/.NET Core 的開發上說不上方便但執行上是沒問題的，但由於步驟相對於剛入手的朋友還是有點複雜，故紀錄一下整個流程．</p><p>但在開始實作前，先補充一下一點基礎知識．</p><p><a href="https://github.com/blackie1019/demo-grpc" target="_blank" rel="noopener">完整的範例下載</a></p><h2 id="RPC-V-S-REST"><a href="#RPC-V-S-REST" class="headerlink" title="RPC V.S REST"></a>RPC V.S REST</h2><p>Remote procedure call (RPC) 顧名思義就是用於遠端調用, 簡單的說就是要像調用本地函數一樣請伺服器端根據輸入代為處理函數並回傳結果。</p><p>如兩台服務器A和B，A服務器上部署一個應用，B服務器上部署一個應用，A服務器上的應用想調用B服務器上的應用提供的接口，由於不在一個應用實體內，不能直接調用，所以需要通過網路來呼叫調用的方式和傳達調用所需的傳入數據。</p><p>人們最常比較 RPC 與 Restful API Restful API 現在可以說是整個網頁應用程式的主流用法，而 RPC 則是更早於 Restful API 出現的遠端調用，最簡單的差別如下：</p><ul><li>Restful API 使用http 協定透過 GET 方法來取得資料，如：/usr/2</li><li>RPC 則使用類似函數呼叫的方式執行，例如：getUser(2)</li></ul><h2 id="What-is-gRPC"><a href="#What-is-gRPC" class="headerlink" title="What is gRPC"></a>What is gRPC</h2><p>gRPC 是由Google所開發的開源RPC Framework，可支援多種語言：C、C++、Java、Python、Go、R、Node.js、C#、Object-C、PHP 等。</p><p>透過 gRPC，可以享受如同 Restful API 呼叫一樣前後端不同語言的開發，而這也讓人常常誤會或是難分辨使用時機．</p><p><img src="bi-communication.png" alt="bi-communication.png"></p><p>gRPC 是基於 <code>HTTP2</code> 以及 <code>Protocol buffer</code> 與 <code>Netty</code> 這三個很厲害的協定與技術所開發的框架．</p><p>不同於 Restful API，gRPC 提供了更加安全也穩定的取雙向的傳輸協定，比起 Restful API 單調的單方向應用更廣．且 gRPC 天生就是透過 <code>HTTP2.0</code> 的協定做傳輸，搭配基於 <code>Protocol Buffers</code> 的定義與序列化方式，將溝通用的模型與通道整合起來時效能更加提升．</p><p>但可惜的是，瀏覽器現在還不能直接跟 gRPC 伺服器溝通，所以你需要安插一個 Gateway 將請求轉到 gRPC 客戶端．</p><h3 id="protocol-buffers"><a href="#protocol-buffers" class="headerlink" title="protocol buffers"></a>protocol buffers</h3><p>學習gRPC前，請先了解其傳輸通訊的設定檔：protocol buffers</p><p>這邊可以看到，宣告方式非常簡單，而每一個 gRPC 函式的呼叫與回傳皆為一個類別，都是需要定義的(連<code>null</code>或是<code>空值</code>都要宣告)，如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;; // protobuf 的版本</span><br><span class="line"></span><br><span class="line">package Demo; // 類別與函式產生時所屬的 namespace，在 csharp 此設定沒用</span><br><span class="line">option csharp_namespace = &quot;Demo&quot;; // csharp 需透過此設定才能指定所屬的 namespace</span><br><span class="line"></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  int Value =1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message HelloResponse &#123;</span><br><span class="line">  string Value =1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 無傳入值時</span><br><span class="line">message Empty&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// enum 型別</span><br><span class="line">enum ResponseCode &#123;</span><br><span class="line">  Success = 0;</span><br><span class="line">  GeneralError = 9999;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而型別轉換上(<code>Date</code> 與 <code>Decimal</code>)是目前比較缺乏的，但如果是希望傳入的屬性有 <code>Enum</code> 型別也是可以宣告的，</p><p>gRPC 有四種通訊方式，以下包含在 Protobuf 中函式(function)的表達方式：</p><ul><li><p>Unary RPCs，一次請求，一次返回，沒有流，這是最常用的方式：</p><p>  rpc SayHello(HelloRequest) returns (HelloResponse){<br>  }</p></li><li><p>Server streaming RPCs，客戶端發送單次請求，服務端會返回一連串的數據，比如服務端推送比賽分數的持續變化至客戶端：</p><p>  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){<br>  }</p></li><li><p>Client streaming RPCs，客戶端會發送一連串的數據到服務端，服務端返回單次數據，比如客戶端持續發送當下的操作日誌與行為：</p><p>  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) {<br>  }</p></li><li><p>Bidirectional streaming RPCs，兩邊各自會發送一連串的數據，比如即時的語音通話以及一些遊戲場景中的互動行為：</p><p>  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){<br>  }</p></li></ul><h2 id="開發流程"><a href="#開發流程" class="headerlink" title="開發流程"></a>開發流程</h2><p>應用程式與應用程式之間的通訊橋樑，一般來說開發流程為：</p><ol><li>先寫 .proto 檔案</li><li>建立部署腳本 - 直接呼叫 <code>gRPC cli</code> 或是寫好的 <code>.sh</code> 檔案來動態產生 C# 內容至gRPC通訊介面的專案</li><li>實作 服務器端程式</li><li>實作 客戶端程式</li><li>整合測試與實際使用</li></ol><p>所以我們先產生了以下內容目錄的內容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">├── Demo.sln</span><br><span class="line">├── protos/</span><br><span class="line">│   ├── message.cs</span><br><span class="line">│   ├── service.cs</span><br><span class="line">├── src/</span><br><span class="line">│   ├── Demo.Clinet/</span><br><span class="line">│   ├── Demo.Server/</span><br><span class="line">│   ├── Demo.Message/</span><br></pre></td></tr></table></figure><h3 id="建立-sln-與-csproj"><a href="#建立-sln-與-csproj" class="headerlink" title="建立 .sln 與 .csproj"></a>建立 .sln 與 .csproj</h3><p>新增一個 .sln 接著 新增第一個 .csproj 檔案 <code>Demo.Message</code>，因為該專案只放定義與規格檔案，故將其設定為 .NET Standard 專案：</p><p><img src="02.png" alt="02.png"></p><p>接著將以下的 nuget 套件安裝 Demo.Message 專案中：</p><p><a href="https://www.nuget.org/packages/Grpc.Tools/" target="_blank" rel="noopener">Grpc.Tools</a><br><a href="https://www.nuget.org/packages/Google.Protobuf" target="_blank" rel="noopener">Google.Protobuf</a><br><a href="https://www.nuget.org/packages/Grpc/" target="_blank" rel="noopener">Grpc</a></p><p><img src="05.png" alt="05.png"></p><p>然後額外新增兩個 .NET Core Console Application 專案： <code>Demo.Clinet</code> 與 <code>Demo.Server</code> 並將兩者都加入 Demo.Message 的參考</p><p><img src="03.png" alt="03.png"></p><p>基於.NET Core 參考會直接傳入下一個加入參考的專案，這裏就不需要額外加入 Google.Protobuf 與 Grpc 的 nuget 套件了．</p><h3 id="撰寫-proto-定義檔案"><a href="#撰寫-proto-定義檔案" class="headerlink" title="撰寫 .proto 定義檔案"></a>撰寫 .proto 定義檔案</h3><p>接著在 <code>protos</code> 的資料夾放入兩份檔案，傳輸的規格與方法的定義檔案：</p><p>message.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package Demo.Message; //will be placed in a namespace matching the package name if csharp_namespace is not specified</span><br><span class="line">option csharp_namespace = &quot;Demo.Message&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message EmptyMsg&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GreetingMsg &#123;</span><br><span class="line">  string Value =1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GreetingResponse&#123;</span><br><span class="line">  string MsgValue =1;</span><br><span class="line">  string ReturnValue =2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message TestResponse &#123;</span><br><span class="line">  repeated int32 Values =1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service.proto</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package Demo.Message; //will be placed in a namespace matching the package name if csharp_namespace is not specified</span><br><span class="line">option csharp_namespace = &quot;Demo.Message&quot;;</span><br><span class="line">import &quot;message.proto&quot;;</span><br><span class="line"></span><br><span class="line">service DemoService &#123;</span><br><span class="line">  rpc Say(GreetingMsg) returns (GreetingResponse);</span><br><span class="line">  rpc TestWithEmpty(EmptyMsg) returns (TestResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊可以看到範例使用的 syntax 規格為 <code>proto3</code> 的定義，詳細使用可以參考<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">Language Guide (proto3)</a></p><h3 id="透過定義檔案產生-cs-檔案"><a href="#透過定義檔案產生-cs-檔案" class="headerlink" title="透過定義檔案產生 .cs 檔案"></a>透過定義檔案產生 .cs 檔案</h3><p>而要成功產生 gRPC 的 <em>.cs</em> 檔案, 需要先安裝 homebrew 並透過下方指令由 brew 將 gRPC 的開發工具安裝完畢(<a href="https://github.com/grpc/homebrew-grpc" target="_blank" rel="noopener">詳細參考</a>)：</p><pre><code>brew install gRPC</code></pre><p>安裝完成後，如果是 <code>GO</code> 或是其他開發語言就可以直接進行發了，而用 C# 與 .NET Core 進行開發還需要額外透過 nuget 安裝 <a href="https://www.nuget.org/packages/Grpc.Tools/" target="_blank" rel="noopener">Grpc.Tools</a></p><p><img src="04.png" alt="04.png"></p><p>並且透過 nuget 將安裝至電腦的暫存區作為之後使用，安裝後的檔案會放置底下路徑內 <code>/Users/{user}/.nuget/packages/grpc.tools/</code> ，如下：</p><p><img src="01.png" alt="01.png"></p><p>接下來透過gRPC的CLI工具，將.proto的檔案產生對應的C#內容至指定的專案路徑下的即可，如下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/`whoami`/.nuget/packages/grpc.tools/1.18.0/tools/macosx_x64/protoc -I ./protos/ --csharp_out src/Demo.Message --grpc_out src/Demo.Message ./protos/*.proto --plugin=protoc-gen-grpc=/Users/`whoami`/.nuget/packages/grpc.tools/1.18.0/tools/macosx_x64/grpc_csharp_plugin</span><br></pre></td></tr></table></figure><p><img src="06.png" alt="06.png"></p><h3 id="開發使用-NET-Core-開發"><a href="#開發使用-NET-Core-開發" class="headerlink" title="開發使用 .NET Core 開發"></a>開發使用 .NET Core 開發</h3><p>接著在 <code>Demo.Server</code> 完成 DemoServiceImpl.cs 的開發，如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.Server</span></span><br><span class="line">&#123;</span><br><span class="line">    public class DemoServiceImpl:DemoService.DemoServiceBase</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;GreetingResponse&gt; <span class="title">Say</span>(<span class="params">GreetingMsg request, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">new</span> GreetingResponse</span><br><span class="line">            &#123;</span><br><span class="line">                MsgValue = request.Value,</span><br><span class="line">                ReturnValue = <span class="string">$"Received on <span class="subst">&#123;DateTime.Now:O&#125;</span>"</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;TestResponse&gt; <span class="title">TestWithEmpty</span>(<span class="params">EmptyMsg request, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">new</span> TestResponse();<span class="comment">//new List&lt;int&gt;();</span></span><br><span class="line">            <span class="keyword">var</span> randon = <span class="keyword">new</span> Random(DateTime.Now.Millisecond);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                response.Values.Add(randon.Next(<span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊我們可以透過 Rider 的自動產生功能帶出需要 override 的方法，加快開發流程：</p><p><img src="07.png" alt="07.png"></p><p><img src="08.png" alt="08.png"></p><p>完成後，即可在 program.cs 處加入以下設定並啟用服務端等待呼叫：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.Server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">            <span class="keyword">var</span> port = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serverInstance = <span class="keyword">new</span> Grpc.Core.Server</span><br><span class="line">            &#123;</span><br><span class="line">                Ports =</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> ServerPort(host, port, ServerCredentials.Insecure)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"Demo server listening on host:<span class="subst">&#123;host&#125;</span> and port:<span class="subst">&#123;port&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">            serverInstance.Services.Add(</span><br><span class="line">                Message.DemoService.BindService(</span><br><span class="line">                    <span class="keyword">new</span> DemoServiceImpl()));</span><br><span class="line"></span><br><span class="line">            serverInstance.Start();</span><br><span class="line">            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">            serverInstance.ShutdownAsync().Wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著看到以下畫面代表服務端準備好了</p><p><img src="09.png" alt="09.png"></p><p>最後補上客戶端的呼叫實作如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Demo.Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Demo Client is Ready..."</span>);</span><br><span class="line">            <span class="keyword">var</span> host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">            <span class="keyword">var</span> port = <span class="string">"9999"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> channel = <span class="keyword">new</span> Channel(<span class="string">$"<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>"</span>, ChannelCredentials.Insecure);</span><br><span class="line">            <span class="keyword">var</span> serviceClient = <span class="keyword">new</span> DemoService.DemoServiceClient(channel);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> result1 = serviceClient.TestWithEmpty(<span class="keyword">new</span> EmptyMsg());</span><br><span class="line">            Console.WriteLine(<span class="string">$"Calling Say and return response is <span class="subst">&#123;result1.Values.ToString()&#125;</span>"</span>);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">"Please type input for calling Say:"</span>);</span><br><span class="line">            <span class="keyword">var</span> msg = Console.ReadLine();</span><br><span class="line">            <span class="keyword">var</span> result2 = serviceClient.Say(<span class="keyword">new</span> GreetingMsg &#123; Value = msg&#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">$"Calling Say and return response is <span class="subst">&#123;result2.MsgValue&#125;</span>,<span class="subst">&#123;result2.ReturnValue&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成後並且運行起來後看到的結果如下：</p><p><img src="10.png" alt="10.png"></p><p><img src="11.png" alt="11.png"></p><p>如此一來gRPC的開發就完成串接呼叫了！</p><p>由於功能與效能的強大，讓 gRPC 也正式被承諾會被整合進入 ASP.NET Core 中並在 .NET Core 3 發行．</p><p>有興趣的朋友可以追一下目前的專案進度<a href="https://github.com/grpc/grpc-dotnet" target="_blank" rel="noopener">grpc/grpc-dotnet</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://grpc.io/" target="_blank" rel="noopener">gRPC</a></li><li><a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">Protocol Buffers</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何在 .NET Core 中開發 gRPC 應用程式 - 基礎入門&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term=".NET" scheme="https://blackie1019.github.io/tags/NET/"/>
    
      <category term="gRPC" scheme="https://blackie1019.github.io/tags/gRPC/"/>
    
      <category term="Protobuf" scheme="https://blackie1019.github.io/tags/Protobuf/"/>
    
      <category term="Microservice" scheme="https://blackie1019.github.io/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Redis Lua Script with C# on macOS</title>
    <link href="https://blackie1019.github.io/2019/01/13/Debugging-Redis-Lua-Script-with-C-on-macOS/"/>
    <id>https://blackie1019.github.io/2019/01/13/Debugging-Redis-Lua-Script-with-C-on-macOS/</id>
    <published>2019-01-13T06:20:07.000Z</published>
    <updated>2021-06-15T03:56:53.093Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何在 .NET Core 使用 C# 正確的使用 Redis Lua Script 開發與除錯流程。</p><a id="more"></a><p>先前<a href="http://blackie1019.github.io/2018/05/01/Write-Redis-Lua-Script-with-ZeroBrane-Studio/">分享如何使用 ZeroBrane Studio 協助 Redis 的 Lua Script 開發與除錯</a>介紹如何正確地使用工具來幫我們除錯 Redis Lua Script.</p><p>本次結合 C#, .NET Core 與 macOS 環境，重新整理與介紹如何正確地使用 Redis Lua Script.</p><h2 id="為什麼使用-Redis-Lua-Script"><a href="#為什麼使用-Redis-Lua-Script" class="headerlink" title="為什麼使用 Redis Lua Script"></a>為什麼使用 Redis Lua Script</h2><p>在大部分的開發者中，會使用 Redis 相關 framework 的人很普遍，但絕大多數僅使用這些 Framework 已包裹好的指令做操作，鮮少自己將商業邏輯包裹成一個 <code>Lua Script</code> 指令操作．</p><p>以 C# + .NET Core 為例，大多使用者都會使用下列的 framework 操作 Redis 內資料:</p><ul><li><a href="https://github.com/StackExchange/StackExchange.Redis" target="_blank" rel="noopener">StackExchange</a></li><li><a href="https://github.com/ServiceStack/ServiceStack.Redis" target="_blank" rel="noopener">ServiceStack</a></li></ul><p>如果今天要開發的一個資料儲存的情境如下:</p><ul><li>確認當前 <code>test</code> 是否存在，如果不存在則在第一次呼叫的時候給予預設值 <code>0</code></li><li>第二次開始的呼叫會針對 <code>test</code> 當前的值每次增加 <code>50</code></li></ul><p>以一般 Redis 的指令操作來說我們需要透過多個指令串接以上內容，這會造成 .NET Core 的程式多次進出 Redis Instance 內．</p><p>而透過 <code>Lua Script</code> 以上的指令可以僅透過一個客製的指令進行操作，大幅提升 Redis 效能與反應．</p><p>Redis的架構設計<strong>單執行緒</strong>的設計，在運行Lua script的時候是沒辦法處理其他的請求的，所以Lua script並不能像Database的Stored Procedure一樣運行複雜的商務邏輯，個人認為如果有以下情境可以考慮採用：</p><ul><li>避免多次請求來回浪費掉的round-trip network latency</li><li>創造出 Redis 與 Redis Framework 沒有支援的command</li><li>Atomic的資料操作 與 Transaction</li></ul><h2 id="Redis-Lua-Script-Development-and-Debugging-on-macOS"><a href="#Redis-Lua-Script-Development-and-Debugging-on-macOS" class="headerlink" title="Redis Lua Script Development and Debugging on macOS"></a>Redis Lua Script Development and Debugging on macOS</h2><p>這邊開始介紹如何在 macOS 的環境開發 Redis Lua Script</p><p>大致上的內容請先參考<a href="http://blackie1019.github.io/2018/05/01/Write-Redis-Lua-Script-with-ZeroBrane-Studio/">分享如何使用 ZeroBrane Studio 協助 Redis 的 Lua Script 開發與除錯</a></p><h3 id="Redis-with-Docker"><a href="#Redis-with-Docker" class="headerlink" title="Redis with Docker"></a>Redis with Docker</h3><p>環境使用 Docker 進行 Redis Instance 的建置，指令如下：</p><pre><code>docker pull Redisdocker run -P --name redis-lab -d redis</code></pre><p>透過 <code>-P</code> 參數，這裡進行動態的 port 配置與對應至 container 內的 <code>6379</code> port</p><p>從 <code>docker ps -a</code> 可以查到當前配置的 port 為 32768</p><p><img src="01.png" alt="01.png"></p><p>透過以下指令與 <code>redis-cli</code> 取得當前的所有鍵值</p><pre><code>docker exec -it &lt;container-id&gt; bashredis-cliKEYS *</code></pre><p><img src="02.png" alt="02.png"></p><h3 id="Install-ZeroBrane-Studio"><a href="#Install-ZeroBrane-Studio" class="headerlink" title="Install ZeroBrane Studio"></a>Install ZeroBrane Studio</h3><p>至官網下載<a href="https://studio.zerobrane.com/download?not-this-time" target="_blank" rel="noopener">ZeroBrane Studio</a> 與 <a href="https://raw.githubusercontent.com/pkulchenko/ZeroBranePackage/master/redis.lua" target="_blank" rel="noopener">ZeroBranePackage/redis.lua</a> 這個 plugin</p><p>安裝好後可配置使用者設定，載入剛下載的 plugin 至 ZeroBrane Studio 中：</p><pre><code>mkdir $HOME/.zbstudiomkdir $HOME/.zbstudio/packages</code></pre><p>接者將下載的 <code>redis.lua</code> plugin 檔案放入剛剛建立的目錄下($HOME/.zbstudio/packages)</p><p>接著將程序打開後可以看到下圖及代表設定成功:</p><p><img src="03.png" alt="03.png"></p><p>而開發時不要忘記要開啟 <code>watch window</code> 與 <code>stack window</code> 協助觀察變數的變化</p><p><img src="04.png" alt="04.png"></p><h3 id="Try-round-for-ZeroBrane-Studio-debugging"><a href="#Try-round-for-ZeroBrane-Studio-debugging" class="headerlink" title="Try round for ZeroBrane Studio debugging"></a>Try round for ZeroBrane Studio debugging</h3><p>這邊開啟應用程式後選擇 <code>redis</code> 則會跳出連線設定視窗，如果要重設則需要重新啟動 ZeroBrane Studio 才可以變更．</p><p><img src="05.png" alt="05.png"></p><p>而如果開發的 <code>Lua Script</code> 本身有帶入參數的需求可以使用 <code>Command Line Parameters</code> 的設定帶入(多個參數可用<em>空白</em>分隔)</p><p><img src="06.png" alt="06.png"></p><p>如需求所列，這邊我們建立的 Lua Script 如下:</p><p>test.lua<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> targetKey = KEYS[<span class="number">1</span>] <span class="comment">-- target key for redis</span></span><br><span class="line"><span class="keyword">local</span> initValue =  <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>]) <span class="comment">-- initial value for target key if not exist and need to create</span></span><br><span class="line"><span class="keyword">local</span> incrementValue =  <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>]) <span class="comment">-- increment value for target key when exist and calling for each time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> currentValue =  initValue</span><br><span class="line"></span><br><span class="line"><span class="comment">-- create key with 0 if key is not exist</span></span><br><span class="line"><span class="keyword">local</span> isNewKey = redis.call(<span class="string">'SETNX'</span>,targetKey,currentValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- add current value if key is exist</span></span><br><span class="line"><span class="keyword">if</span> isNewKey == initValue <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">  currentValue = redis.call(<span class="string">'GET'</span>,targetKey)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> currentValue <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    currentValue = currentValue + incrementValue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  redis.call(<span class="string">'SET'</span>,targetKey, currentValue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- return key value</span></span><br><span class="line"><span class="keyword">return</span> currentValue</span><br></pre></td></tr></table></figure></p><p>這邊就需要傳入三個參數，所以設定上則變成:</p><p><img src="07.png" alt="07.png"></p><p>test 為 <em>Key</em>，透過中間的<code>逗號</code>分隔了後面兩個 <em>Arg</em> ，分別為 0 與 10</p><p>而介面上簡單介紹如下(詳細介紹可參考<a href="http://blackie1019.github.io/2018/05/01/Write-Redis-Lua-Script-with-ZeroBrane-Studio/">如何使用 ZeroBrane Studio 協助 Redis 的 Lua Script 開發與除錯</a>)：</p><p><img src="08.png" alt="08.png"></p><h2 id="NET-Core-with-Redis-Lua-Script"><a href="#NET-Core-with-Redis-Lua-Script" class="headerlink" title=".NET Core with Redis Lua Script"></a>.NET Core with Redis Lua Script</h2><p>這邊最後給一段 Sample Code 說明如何透過預先載入的方式避免執行重複的 Redis Lua Script 所造成的內存耗盡問題．</p><p>其實 <em>Redis</em> 本身就有這個做法，可透過 <a href="https://redis.io/commands/script-load" target="_blank" rel="noopener">SCRIPT LOAD</a> 產生一組 SHA 的編碼後，透過 SHA 與 <a href="https://redis.io/commands/evalsha" target="_blank" rel="noopener">EVALSHA</a> 來執行．</p><p>所以這邊的 C# 與上面已經寫好的 test.lua 的呼叫如下：</p><p>program.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"><span class="keyword">using</span> StackExchange.Redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> redisHost = <span class="string">"localhost:32768"</span>;</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">"App Start..."</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> conn = ConnectionMultiplexer.Connect(redisHost))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> db = conn.GetDatabase();</span><br><span class="line">                Console.WriteLine(<span class="string">$"Current Value:<span class="subst">&#123;db.StringGet(<span class="string">"test"</span>).ToString()&#125;</span>"</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> loadedLuaScripts = <span class="keyword">new</span> Dictionary&lt;LuaScriptEnum, LoadedLuaScript&gt;();</span><br><span class="line">                loadedLuaScripts.Add(LuaScriptEnum.AddValueWithTargetKey, PrepareLuaScript(conn, redisHost,</span><br><span class="line">                    <span class="string">@"local targetKey = KEYS[1] -- target key for redis</span></span><br><span class="line"><span class="string">local initValue =  tonumber(ARGV[1]) -- initial value for target key if not exist and need to create</span></span><br><span class="line"><span class="string">local incrementValue =  tonumber(ARGV[2]) -- increment value for target key when exist and calling for each time</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">local currentValue =  initValue </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- create key with 0 if key is not exist </span></span><br><span class="line"><span class="string">local isNewKey = redis.call('SETNX',targetKey,currentValue)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- add current value if key is exist</span></span><br><span class="line"><span class="string">if isNewKey == initValue then </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  currentValue = redis.call('GET',targetKey)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  if currentValue then</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    currentValue = currentValue + incrementValue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  redis.call('SET',targetKey, currentValue)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">end </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- return key value</span></span><br><span class="line"><span class="string">return currentValue"</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> executedReturn = db.ScriptEvaluate(loadedLuaScripts[LuaScriptEnum.AddValueWithTargetKey].Hash,</span><br><span class="line">                    <span class="keyword">new</span> RedisKey[] &#123;<span class="string">"test"</span>&#125;,</span><br><span class="line">                    <span class="keyword">new</span> RedisValue[] &#123;<span class="number">0</span>, <span class="number">50</span>&#125;);</span><br><span class="line">                Console.WriteLine(executedReturn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LoadedLuaScript <span class="title">PrepareLuaScript</span>(<span class="params">ConnectionMultiplexer redis, <span class="keyword">string</span> defaultServer, <span class="keyword">string</span> luaScriptContent</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> LuaScript</span><br><span class="line">                .Prepare(luaScriptContent)</span><br><span class="line">                .Load(redis.GetServer(defaultServer));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> LuaScriptEnum</span><br><span class="line">    &#123;</span><br><span class="line">        AddValueWithTargetKey</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行結果如下：</p><p><img src="10.png" alt="10.png"></p><p>這段程式碼還有呼叫了<code>Load()</code>，這會把Lua script先載入指定的Redis server</p><p>一般指定 <em>Master</em> 就可以了，會自動鏡像備份到<em>Slave</em>。</p><p>載入後會拿到一個SHA1的 <em>hash code</em>，之後執行時只需傳入這個code，不需重傳整份Lua script，對需要頻繁執行的script有效能上的幫助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何在 .NET Core 使用 C# 正確的使用 Redis Lua Script 開發與除錯流程。&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://blackie1019.github.io/tags/NET/"/>
    
      <category term="Redis" scheme="https://blackie1019.github.io/tags/Redis/"/>
    
      <category term="Lua Script" scheme="https://blackie1019.github.io/tags/Lua-Script/"/>
    
      <category term="ZeroBrane Studio" scheme="https://blackie1019.github.io/tags/ZeroBrane-Studio/"/>
    
  </entry>
  
  <entry>
    <title>MariaDB/MySQL collaborative development with Docker-Compose/Container</title>
    <link href="https://blackie1019.github.io/2018/11/14/MariaDB-MySQL-collaborative-development-with-Docker-Compose-Container/"/>
    <id>https://blackie1019.github.io/2018/11/14/MariaDB-MySQL-collaborative-development-with-Docker-Compose-Container/</id>
    <published>2018-11-14T03:01:09.000Z</published>
    <updated>2021-06-15T03:56:53.301Z</updated>
    
    <content type="html"><![CDATA[<p>記錄如何透過 docker-compose 使用 MySQL/MariaDB 完整容器化開發與測試</p><a id="more"></a><p>延續上篇<a href="http://blackie1019.github.io/2018/11/13/MariaDB-MySQL-dump-SQL-for-Docker-Container/">MariaDB/MySQL dump SQL for Docker/Container</a> , 在協同開發裡面最常遇到的狀況就是需要還原資料到本機搭配程式運行，如何將資料匯出與資料建立用最快的方式運行則是今天分享的內容．</p><p>這邊的前置作業請參考上一篇的 <a href="http://blackie1019.github.io/2018/11/13/MariaDB-MySQL-dump-SQL-for-Docker-Container/#%E5%85%88%E5%BB%BA%E7%AB%8B-MariaDB-%E7%92%B0%E5%A2%83%E8%88%87%E8%B3%87%E6%96%99">建立 MariaDB 環境與資料</a></p><p>本次要透過 docker-compose 加速整個流程的進行，會建立以下目錄與內容:</p><p>  /Database/<br>  |——-/dump/<br>  |——-|– 00_init.sql<br>  |——-|– 01_backup.sql<br>  |– build.sh<br>  |– docker-compose.yml</p><p>當我們有資料後則透過以下方式進行資料還原與準備初始化：</p><ol><li><p>資料還原的語法(與上一篇相同)，只是我們放入 <em>build.sh</em> 中:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/sh</span><br><span class="line">docker exec &lt;containerid&gt; /usr/bin/mysqldump -B &lt;schema-name&gt; --routines -u root --password=pass.123 &lt;schema-name&gt; &gt; 01_backup.sql</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line">dockdr-compose ps</span><br></pre></td></tr></table></figure><p>這邊要注意</p></li><li><p>準備 <em>init.sql</em> 如下</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'blackie'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'pass.123'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> All <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'blackie'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></li><li><p>這邊準備的 <em>docker-compose.yml</em></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mmc-test-db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:8.0.12</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"3316:3306"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">pass.123</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"./dump:/docker-entrypoint-initdb.d"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    stdin_open:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> 為了避免 <em>port</em> 重複，將對外的 port 改置 <em>3316</em></p><p> 這邊透過 MySQL 與 ＭariaDB 的 <em>docker-entrypoint-initdb.d</em> 這個特殊的目錄，在 Instance 啟動時就幫我們執行資料目錄內的 .sh, .script 與 .sql 檔案．</p><p> 另外，如果透過 docker-compose 的方式啟動記得要補上 <em>stdin_open</em> 與 <em>tty</em> 設定，確保服務不會執行完就終止．</p></li></ol><p>以上資料都準備好後，只需執行 <em>build.sh</em> 指令集即可幫我們將資料放入新的本機容器內運行．</p><p>我們可以透過以下指令確認當前運行的環境狀態：</p><pre><code>docker-compose ps</code></pre><p>或是也可以透過下方指令查看所有 container 狀態:</p><pre><code>docker ps -a</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄如何透過 docker-compose 使用 MySQL/MariaDB 完整容器化開發與測試&lt;/p&gt;
    
    </summary>
    
      <category term="Container" scheme="https://blackie1019.github.io/categories/Container/"/>
    
    
      <category term="Docker" scheme="https://blackie1019.github.io/tags/Docker/"/>
    
      <category term="Container" scheme="https://blackie1019.github.io/tags/Container/"/>
    
      <category term="MySQL" scheme="https://blackie1019.github.io/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="https://blackie1019.github.io/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>MariaDB/MySQL dump SQL for Docker/Container</title>
    <link href="https://blackie1019.github.io/2018/11/13/MariaDB-MySQL-dump-SQL-for-Docker-Container/"/>
    <id>https://blackie1019.github.io/2018/11/13/MariaDB-MySQL-dump-SQL-for-Docker-Container/</id>
    <published>2018-11-13T14:25:13.000Z</published>
    <updated>2021-06-15T03:56:53.301Z</updated>
    
    <content type="html"><![CDATA[<p>記錄如何將運行中的容器化 MySQL/MariaDB 資料匯出至其他容器內的 DB Instance 使用</p><a id="more"></a><p>使用 docker 運行 MySQL/MariaDB 已經漸漸常為開發常態，而如何將運行中的容器內 db schema 與 data 匯出至另外一個 cotainer 的 DB Instance 內則是協同開發必備的流程．</p><p>這邊簡單記錄如何從一個 <em>MariaDB</em> 匯入至另外一個 <em>MySQL</em> container 當中．</p><h2 id="先建立-MariaDB-環境與資料"><a href="#先建立-MariaDB-環境與資料" class="headerlink" title="先建立 MariaDB 環境與資料"></a>先建立 MariaDB 環境與資料</h2><p>這邊先透過以下指令下載 <em>MariaDB</em> image 檔案並簡單建立 db schema 與 table</p><ol><li><p>拉取 MariaDB image</p><pre><code>docker pull mariadb</code></pre></li><li><p>運行一個 Instance 並設定密碼與 port 對外</p><pre><code>docker run -p 3306:3306 --name lab-mariadb -e MYSQL_ROOT_PASSWORD=pass.123 -d mariadb</code></pre></li><li><p>建立資料如下：</p><p><img src="01.png" alt="01.png"></p></li></ol><h2 id="建立-MySQL-環境"><a href="#建立-MySQL-環境" class="headerlink" title="建立 MySQL 環境"></a>建立 MySQL 環境</h2><p>接著透過以下步驟建立 MySQL 環境：</p><ol><li><p>拉取 MariaDB image</p><pre><code>docker pull mysql</code></pre></li><li><p>運行一個 Instance 並設定密碼與 port 對外</p><pre><code>docker run -p 3316:3306 --name test-mysql -e MYSQL_ROOT_PASSWORD=pass.123 -d mysql</code></pre></li></ol><p>這邊我們避免 <em>MySQL</em> 與 <em>MariaDB</em> 的 port 衝突，所以設定到 <strong>3316</strong> ，到這邊就可以進入本篇的重點，資料匯入與匯出了．</p><h2 id="Container-DB-dump"><a href="#Container-DB-dump" class="headerlink" title="Container DB dump"></a>Container DB dump</h2><p>這邊可以透過下方指令簡單匯出匯入：</p><ol><li><p>從 <em>MariaDB</em> 備份至 <em>back.sql</em> :</p><pre><code>docker exec &lt;containerid&gt; /usr/bin/mysqldump -B &lt;schema-name&gt; --routines -u root --password=pass.123 &lt;schema-name&gt; &gt; 01_backup.sql</code></pre><p>這邊的 <em>–routines</em> 是把 store procedure 匯出(預設 triiger 會匯出)</p><p>另外就是 <em>-B <schema-name></schema-name></em> 這段是為了幫我們會出的 01_backup.sql 建立對應的資料庫並使用它作為匯入</p></li><li><p>還原至 <em>MySQL</em> :</p><pre><code>cat backup.sql | docker exec -i 5b6d /usr/bin/mysql -u root --password=pass.123 test</code></pre></li></ol><p>到這邊我們就可以看到資料成功還原至 <em>MySQL</em> 了．</p><p>怕麻煩的朋友甚至可以寫成 <em>.sh</em> 檔案加快協同開發：</p><p>mysql-docker-export.sh 內容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Backup</span><br><span class="line">docker exec 1ddf /usr/bin/mysqldump  -B LabMariabDB --routines -u root --password=pass.123 LabMariabDB &gt; backup.sql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Init</span><br><span class="line">cat init.sql | docker exec -i 5b6d /usr/bin/mysql -u root --password=pass.123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Restore</span><br><span class="line">cat backup.sql | docker exec -i 5b6d /usr/bin/mysql -u blackie --password=pass.123 test</span><br></pre></td></tr></table></figure><p>這邊的 <em>1ddf</em> 是 <em>MariaDB</em> 的 container id, <em>5b6d</em> 是 <em>MySQL</em> 的 container id</p><p>init.sql 內容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'blackie'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'pass.123'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> All <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'blackie'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄如何將運行中的容器化 MySQL/MariaDB 資料匯出至其他容器內的 DB Instance 使用&lt;/p&gt;
    
    </summary>
    
      <category term="Container" scheme="https://blackie1019.github.io/categories/Container/"/>
    
    
      <category term="Docker" scheme="https://blackie1019.github.io/tags/Docker/"/>
    
      <category term="Container" scheme="https://blackie1019.github.io/tags/Container/"/>
    
      <category term="MySQL" scheme="https://blackie1019.github.io/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="https://blackie1019.github.io/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>MariaDB/MySQL Transaction with .NET Standard</title>
    <link href="https://blackie1019.github.io/2018/11/07/MariaDB-MySQL-Transaction-with-NET-Standard/"/>
    <id>https://blackie1019.github.io/2018/11/07/MariaDB-MySQL-Transaction-with-NET-Standard/</id>
    <published>2018-11-07T14:47:41.000Z</published>
    <updated>2021-06-15T03:56:53.293Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用 MySqlConnector 讓 .NET Standard/.NET Core 可以對 MariaDB/MySQL 進行 Transaction 與 TransactionScope 操作．</p><a id="more"></a><p>程式碼實作參考<a href="https://github.com/blackie1019/dotnet-mariadb-lab" target="_blank" rel="noopener">dotnet-mariadb-lab</a> 內的:<br></p><ul><li>dotnet-mariadb-lab/db-scripts/Lab/Transaction/</li><li>dotnet-mariadb-lab/Mariadb.Labs/Mariadb.Lab.Test/TransactionRepositoryTest.cs</li></ul><h2 id="Something-about-DB-Transaction"><a href="#Something-about-DB-Transaction" class="headerlink" title="Something about DB Transaction"></a>Something about DB Transaction</h2><p>資料庫的交易(Transaction)功能，能確保多個 SQL 指令，能夠一起全部執行成功，或是全部不執行，而不會因為一些意外狀況，而只執行部份指令，造成資料異常。</p><p>交易功能4個特性 (ACID)</p><ul><li>Atomicity (原子性、不可分割)<br>All or Nothing!<br>交易內的 SQL 指令，不管在任何情況，都只能是全部執行完成，或全部不執行。若是發生無法全部執行完成的狀況，則會回滾(rollback)到完全沒執行時的狀態。</li><li>Consistency (一致性)<br>交易完成後，必須維持資料的完整性。所有資料必須符合預設的驗證規則、外鍵限制…等。</li><li>Isolation (隔離性)<br>多個交易可以獨立、同時執行，不會互相干擾。這一點跟後面會提到的「隔離層級」有關。</li><li>Durability (持久性)<br>交易完成後，異動結果須完整的保留。</li></ul><p>MySQL 常用的兩個資料表類型：MyISAM、InnoDB，MyISAM <strong>不支援交易功能</strong>，所以以下使用交易時也是需要使用<em>InnoDB</em>。</p><p>詳細的內容可以參考<a href="https://xyz.cinc.biz/2013/05/mysql-transaction.html" target="_blank" rel="noopener">MySQL 交易功能 Transaction 整理</a>這篇詳細的整理</p><h2 id="MariaDB-MySQL-的交易機制"><a href="#MariaDB-MySQL-的交易機制" class="headerlink" title="MariaDB/MySQL 的交易機制"></a>MariaDB/MySQL 的交易機制</h2><p>InnoDB 支援全部四種 Isolation Level ，使用者可以用 SET TRANSACTION 語法切換。</p><p>InnoDB 預設的 Isolation Level 是 REPEATABLE READ ，而 REPEATABLE READ 的問題就是有可能 Phantom Read</p><p>以 MySQL 8.0 Isolation Level 有以下等級分類:</p><ul><li>REPEATABLE READ<br>預設的層級，確保每次讀取都可以讀到同樣的資料</li><li>READ COMMITTED<br>比 REPEATABLE READ 更為嚴謹的層級，讀取時只會取得已經 commit 的資料</li><li>READ UNCOMMITTED<br>比 REPEATABLE READ 更寬鬆的層級，讀取時可以讀出尚未被 commit 的資料</li><li>SERIALIZABLE<br>最為嚴謹的層級，可以確保資料的依序的寫入與讀取，但效能的耗損最大</li></ul><p><img src="Isolation_Level.png" alt="Isolation_Level.png"></p><p>這邊如果要了解Isolation分級可以參考：<a href="https://medium.com/getamis/database-transaction-isolation-a1e448a7736e" target="_blank" rel="noopener">資料庫交易的 Isolation</a></p><h2 id="Transaction-與-TransactionScope"><a href="#Transaction-與-TransactionScope" class="headerlink" title="Transaction 與 TransactionScope"></a>Transaction 與 TransactionScope</h2><p>MySQL 與 MariaDB 中的 Transaction 與 TransactionScope 雖然都可以達到交易鎖定與一至性交付的目的，但使用地情境卻大不相同．</p><p>針對同一個資料庫實體進行交易鎖定時，多半會使用 <em>Transaction</em> 的方式建立單一資料庫連線進行設定．應該所有的 db driver 都有支援．</p><p>而針對跨多種資料庫類型或是多個不同連線的情境則會使用 <em>TransactionScope</em> 的方式來幫我們確認分散式交易(distributed transaction)能確實在多個實體內如期按照規劃運行．這邊除了要確認使用的db driver 支援外，也要確認環境設定等配製是正確的，如 MSSQL 就是使用 MSTDC 進行控制．<br><br>這邊如果要在 DB 直接進行 SQL 的指令運行 Transaction 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">  <span class="keyword">call</span> Test.AddNewUser(<span class="string">'Beck3'</span>);</span><br><span class="line">  <span class="keyword">call</span> Test.GetNewUser();</span><br><span class="line"><span class="keyword">rollback</span> ;</span><br></pre></td></tr></table></figure><p>結果可以看到上方的查詢有顯示最後新增的資料，但真實進去資料表內查詢則維持原樣，表示交易成功回朔：</p><p><img src="rollback.png" alt="rollback.png"></p><p>接下來的交易實作的範例都已 ADO.NET 為例：</p><h3 id="Transaction-實戰"><a href="#Transaction-實戰" class="headerlink" title="Transaction 實戰"></a>Transaction 實戰</h3><p>預設的情況， MySqlConnector 需要設定每一個Transaction 內的 MySqlCommand.Transaction 的內容，透過同一個 DB 連線與設定的 Transaction 一至性來達到交易的確認或是回朔．</p><p>這篇 <a href="https://mysql-net.github.io/MySqlConnector/troubleshooting/transaction-usage/" target="_blank" rel="noopener">Transaction Usage</a> 就提到可以在 <em>Connection</em> 字串後面補上 <strong>IgnoreCommandTransaction=true</strong> 來確保不會發生錯誤．</p><p>官方範例如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> connection = <span class="keyword">new</span> MySqlConnection(...))</span><br><span class="line">&#123;</span><br><span class="line">    connection.Open();</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> transaction = connection.BeginTransaction())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> command = connection.CreateCommand())</span><br><span class="line">    &#123;</span><br><span class="line">        command.CommandText = <span class="string">"SELECT ..."</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// *** ADD THIS LINE ***</span></span><br><span class="line">        command.Transaction = transaction;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// otherwise, this will throw System.InvalidOperationException: The transaction associated with this command is not the connection's active transaction.</span></span><br><span class="line">        command.ExecuteScalar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>實務上，複雜的資料查詢或是資料的新刪修因為牽扯到交易鎖定，大多會在 <em>預存程序(stored procedure)</em> 內做掉，而當我們今天有一個測試的需求如下：</p><ul><li>透過 stored procedure 新增一筆資料</li><li>透過 stored procedure 讀出當前最新新增的一筆資料並確認此為上一步新增的資料</li><li>透過 transaction.Rollback 的方式，確認該筆交易尚未 commit 進入 DB 內儲存</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrange</span></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">$"CT_<span class="subst">&#123;DateTime.Now:yyyyMMddHHmmss&#125;</span>"</span>;</span><br><span class="line"><span class="keyword">string</span> result;</span><br><span class="line"><span class="keyword">string</span> currentUserName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> conn =</span><br><span class="line">    <span class="keyword">new</span> MySqlConnection(</span><br><span class="line">        <span class="string">"Server=localhost;User ID=root;Password=pass.123;Database=Test;IgnoreCommandTransaction=true;"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> transaction = conn.BeginTransaction(System.Data.IsolationLevel.ReadUncommitted))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Start a local transaction.</span></span><br><span class="line">        <span class="keyword">await</span> UserSpRepository.Instance.AddNewUser(userName, conn,transaction);</span><br><span class="line">        result = <span class="keyword">await</span> UserSpRepository.Instance.GetNewUser(conn,transaction);</span><br><span class="line">        transaction.Rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">currentUserName = UserSpRepository.Instance.GetNewUser().Result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assert</span></span><br><span class="line">Assert.AreEqual(userName,result);</span><br><span class="line">Assert.AreNotEqual(currentUserName,result);</span><br></pre></td></tr></table></figure><p>上面是一個交易的實際寫法，而程式碼內可以發現我們呼叫 <em>AddNewUser</em> 與 <em>GetNewUser</em> 這兩個方法，同在新增資料與取得資料內進行邏輯驗證．最後透過 transaction.Rollback() 的方式回逤資料．</p><p>這邊要注意的是由於需求會讀到未確認的交易資料，所以必須設定隔離層級為 <em>IsolationLevel.ReadUncommitted</em>．</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.Common;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> MySql.Data.MySqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mariadb.Lab.DataAccessLayer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserSpRepository</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;UserSpRepository&gt; Lazy =</span><br><span class="line">            <span class="keyword">new</span> Lazy&lt;UserSpRepository&gt;(() =&gt; <span class="keyword">new</span> UserSpRepository());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> UserSpRepository Instance</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> Lazy.Value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _connStrinng;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">UserSpRepository</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _connStrinng = <span class="string">"Server=localhost;User ID=root;Password=pass.123;Database=Test;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">AddNewUser</span>(<span class="params"><span class="keyword">string</span> name, MySqlConnection sharedConnection = <span class="literal">null</span>, MySqlTransaction sharedTransaction =<span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">async</span> Task <span class="title">ExecuteSp</span>(<span class="params">MySqlConnection conn</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">// Calling SP with return value</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> cmd = conn.CreateCommand())</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    cmd.Connection = conn;</span><br><span class="line">                    cmd.CommandType = CommandType.StoredProcedure;</span><br><span class="line">                    cmd.CommandText = <span class="string">"AddNewUser"</span>;</span><br><span class="line">                    cmd.Parameters.AddWithValue(<span class="string">"userName"</span>, name);</span><br><span class="line">                    <span class="keyword">if</span> (sharedTransaction != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cmd.Transaction = sharedTransaction;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">await</span> cmd.ExecuteNonQueryAsync();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (sharedConnection == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">                    <span class="keyword">await</span> ExecuteSp(conn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> ExecuteSp(sharedConnection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetNewUser</span>(<span class="params">MySqlConnection sharedConnection = <span class="literal">null</span>, MySqlTransaction sharedTransaction =<span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">ExecuteSp</span>(<span class="params">MySqlConnection conn</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">// Calling SP with return value</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> cmd = conn.CreateCommand())</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    cmd.Connection = conn;</span><br><span class="line">                    cmd.CommandType = CommandType.StoredProcedure;</span><br><span class="line">                    cmd.CommandText = <span class="string">"GetNewUser"</span>;</span><br><span class="line">                    <span class="keyword">if</span> (sharedTransaction != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cmd.Transaction = sharedTransaction;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">await</span> cmd.ExecuteReaderAsync())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">await</span> reader.ReadAsync();</span><br><span class="line">                        <span class="keyword">return</span> reader.GetString(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sharedConnection == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> ExecuteSp(conn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> ExecuteSp(sharedConnection);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面的程式碼可以發現裡面使用了 C#7.0 的<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions" target="_blank" rel="noopener">local function</a> 來讓我們的程式碼可以盡量重複使用同一段邏輯．並搭配 <a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments" target="_blank" rel="noopener">optional paramater</a> 我們可以盡可能讓測試程式碼與真實運行的測試碼走過一樣的邏輯確保測試的正確性．</p><p>這邊需要注意如果是 <em>ExecuteReaderAsync()</em> 將 <a href="https://docs.microsoft.com/zh-tw/dotnet/framework/data/adonet/retrieving-data-using-a-datareader" target="_blank" rel="noopener">DataReader</a> 資料讀出，一定要記得 dispose 或是透過範例的方式正確的透過 using 的預設呼叫 dispose 來避免程式運行時發生 <em>System.InvalidOperationException : This MySqlConnection is already in use</em> 這類的問題！</p><p><img src="datareader.png" alt="datareader.png"></p><h3 id="TransactionScope-實戰"><a href="#TransactionScope-實戰" class="headerlink" title="TransactionScope 實戰"></a>TransactionScope 實戰</h3><p>MySQLConnector 在安裝與設定的指引那邊 <a href="https://mysql-net.github.io/MySqlConnector/tutorials/migrating-from-connector-net/" target="_blank" rel="noopener">Migrating from Connector/NET</a>有提到<br>目前的更新版本已經全面支援 <em>distributed transaction</em> ， 這一舉解決了在 2017 以前官方 client(<a href="https://github.com/mysql/mysql-connector-net" target="_blank" rel="noopener">MySQL Connector/NET</a>) 長久存在的問題．</p><p>實務上，TransactionScope 的應用範圍會再異質資料庫牽扯到一筆交易需要多個 Connection 的交易範圍鎖定，測試的需求如下：</p><ul><li>透過 stored procedure 新增一筆<em>User</em>資料</li><li>透過 stored procedure 新增一筆<em>Product</em>資料</li><li>透過 transaction.Rollback 的方式，確認兩筆交易皆尚未 commit 進入 DB 內儲存</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arrange</span></span><br><span class="line"><span class="keyword">var</span> postfix = DateTime.Now.ToString(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">$"CT_<span class="subst">&#123;postfix&#125;</span>"</span>;</span><br><span class="line"><span class="keyword">var</span> productName = <span class="string">$"Product_<span class="subst">&#123;postfix&#125;</span>"</span>;</span><br><span class="line"><span class="keyword">string</span> resultUserName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transactionOption = <span class="keyword">new</span> TransactionOptions();</span><br><span class="line">transactionOption.IsolationLevel = IsolationLevel.ReadUncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Act</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> transactionScope = <span class="keyword">new</span> TransactionScope(TransactionScopeOption.Required, transactionOption,</span><br><span class="line">    TransactionScopeAsyncFlowOption.Enabled))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> UserSpRepository.Instance.AddNewUser(userName);</span><br><span class="line">    <span class="keyword">await</span> ProductSpRepository.Instance.AddNewProduct(productName);</span><br><span class="line">    transactionScope.Dispose();</span><br><span class="line">&#125;</span><br><span class="line">resultUserName = UserSpRepository.Instance.GetNewUser().Result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assert</span></span><br><span class="line">Assert.AreNotEqual(userName,resultUserName);</span><br></pre></td></tr></table></figure><p>這邊可以看到使用上必須設定 <em>TransactionScopeAsyncFlowOption.Enabled</em> 確保兩個不同 thread 的交易可以被鎖定．另外也需要注意 IsolationLevel.ReadUncommitted 這個設定是否合乎真實的使用情況(一般來說不會使用當前的設定，會在嚴格一點)</p><p>而呼叫資料庫的方式則大同小異：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.Common;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> MySql.Data.MySqlClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Mariadb.Lab.DataAccessLayer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductSpRepository</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;ProductSpRepository&gt; Lazy =</span><br><span class="line">            <span class="keyword">new</span> Lazy&lt;ProductSpRepository&gt;(() =&gt; <span class="keyword">new</span> ProductSpRepository());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ProductSpRepository Instance</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> Lazy.Value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> _connStrinng;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ProductSpRepository</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _connStrinng = <span class="string">"Server=localhost;User ID=root;Password=pass.123;Database=Test;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">AddNewProduct</span>(<span class="params"><span class="keyword">string</span> name, MySqlConnection sharedConnection = <span class="literal">null</span>, MySqlTransaction sharedTransaction =<span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">async</span> Task <span class="title">ExecuteSp</span>(<span class="params">MySqlConnection conn</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">// Calling SP with return value</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> cmd = conn.CreateCommand())</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    cmd.Connection = conn;</span><br><span class="line">                    cmd.CommandType = CommandType.StoredProcedure;</span><br><span class="line">                    cmd.CommandText = <span class="string">"AddNewProduct"</span>;</span><br><span class="line">                    cmd.Parameters.AddWithValue(<span class="string">"productName"</span>, name);</span><br><span class="line">                    <span class="keyword">if</span> (sharedTransaction != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cmd.Transaction = sharedTransaction;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">await</span> cmd.ExecuteNonQueryAsync();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (sharedConnection == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">                    <span class="keyword">await</span> ExecuteSp(conn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> ExecuteSp(sharedConnection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊需要稍微注意 AutoEnlint 這個屬性預設在 <em>Connection</em> 內如果不特定指定則為<em>true</em>．當設定為true時則會將當前打開連線的交易設為同一個 transaction scope．所以如果要使用 <em>TransactionScope</em> 千萬不要在 <em>Connection</em> 手動補上 <strong>AutoEnlint=false</strong> 這樣的設定．</p><p>而不管用 Transaction 或是 TransactionScope 都要注意關閉相關資源避免 Lock 發生，讓後續相關查詢與異動失敗：</p><p><img src="lock.png" alt="lock.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用 MySqlConnector 讓 .NET Standard/.NET Core 可以對 MariaDB/MySQL 進行 Transaction 與 TransactionScope 操作．&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term=".NET Standard" scheme="https://blackie1019.github.io/tags/NET-Standard/"/>
    
      <category term="MySQL" scheme="https://blackie1019.github.io/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="https://blackie1019.github.io/tags/MariaDB/"/>
    
      <category term="Transaction" scheme="https://blackie1019.github.io/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>[Rider] Shared Window Tools Layout in different Projects/Solutions</title>
    <link href="https://blackie1019.github.io/2018/10/09/Rider-Shared-Window-Tools-Layout-in-different-Projects-Solutions/"/>
    <id>https://blackie1019.github.io/2018/10/09/Rider-Shared-Window-Tools-Layout-in-different-Projects-Solutions/</id>
    <published>2018-10-09T03:31:14.000Z</published>
    <updated>2021-06-15T03:56:53.457Z</updated>
    
    <content type="html"><![CDATA[<p>記錄如何使用 Rider 分享當前設定與視窗調整的樣貌到不同專案或是解決方案內</p><a id="more"></a><p>常使用 Rider 的朋友會發現，每次開出的新專案視窗的版面配置不會跟著上一個設定走，必須每次都調整，有時十分不方便．這邊方享如何快速的統一呈現的方式．</p><p>Rider 有幾種環境設定與配置可以跨專案或是跨電腦的與他人共享，這邊分為三個設定：</p><ul><li>Intellij IDEA Settings </li><li>Rider Settings</li><li>Window Layout</li></ul><h2 id="Intellij-IDEA-Settings"><a href="#Intellij-IDEA-Settings" class="headerlink" title="Intellij IDEA Settings"></a>Intellij IDEA Settings</h2><p>如果你是要分享一些針對 Theme 的設定或是針對 IDE 的呈現設定，則可透過 Intellij IDEA Settings 協助你與分享或是引入至當前環境</p><p>可以從上方選項分類的 <em>File</em> 內看到相關匯入匯出設定</p><p><img src="03.jpg" alt="03.jpg"></p><p>產生的設定檔為一個 <strong>.jar</strong> 副檔名類型的檔案，使用時就是直接匯入</p><p>關於此設定可以看 <a href="https://www.jetbrains.com/help/idea/exporting-and-importing-settings.html" target="_blank" rel="noopener">Exporting and Importing Settings</a> 了解更多細節</p><h2 id="Rider-Settings"><a href="#Rider-Settings" class="headerlink" title="Rider Settings"></a>Rider Settings</h2><p>如果你是要分享一些 Code Snippet 或是針對 IDE 的開發設定，則可透過 Rider Settings 協助你與分享或是引入至當前環境</p><p>可分為兩種：</p><ul><li><p>directory-based settings format:</p><p>  這與 IntelliJ 平台內的前端開發有關，如 CSS, HTML, JS 等 Editor 內配置與設定.</p></li><li><p>Layer-based settings format:</p><p>  使用與 <em>Resharper</em> 相同的 <em>layer-based</em>, 這個設定也可以匯入或匯出 ReSharper 內做使用</p></li></ul><p>在偏好設定處的設定可以根據圖示分辨該設定屬於哪一種設定：</p><p><img src="code_style_settings.png" alt="code_style_settings.png"></p><p>也可以從偏好設定的下方新增或調整當前的設定:</p><p><img src="02.jpg" alt="02.jpg"></p><p>更多細節可以至官方看更多詳細說明 <a href="https://www.jetbrains.com/help/rider/Rider_Settings.html" target="_blank" rel="noopener">Rider Settings</a></p><h2 id="Window-Layout"><a href="#Window-Layout" class="headerlink" title="Window Layout"></a>Window Layout</h2><p>最後是本篇的主要分享，如果你只是要簡單的想要跨專案的在本機有一致的 Window Laout，則可透過上方 Window 分類內的 Default Layout 功能達到</p><p>使用上只需儲存當前調整完的視窗版面，如我將 NuGet 與 Terminal 從原本的下方呈現更改至右方，並按下 <em>Store Current Layout as Default </em></p><p><img src="05.jpg" alt="05.jpg"></p><p>接著在你原先不符合預期的專案內按下上方 Window &gt; Reset to Default Layout 即可統一呈現了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄如何使用 Rider 分享當前設定與視窗調整的樣貌到不同專案或是解決方案內&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="Rider" scheme="https://blackie1019.github.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title>Basic MariaDB/MySQL Stored Procedure with .NET Standard</title>
    <link href="https://blackie1019.github.io/2018/10/08/Basic-MariaDB-MySQL-Stored-Procedure-with-NET-Standard/"/>
    <id>https://blackie1019.github.io/2018/10/08/Basic-MariaDB-MySQL-Stored-Procedure-with-NET-Standard/</id>
    <published>2018-10-08T06:27:04.000Z</published>
    <updated>2021-06-15T03:56:53.061Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用 <em>MySqlConnector</em> 讓 .NET Standard/.NET Core 可以對 MariaDB/MySQL 進行基本的 Stored Procedure 操作．</p><a id="more"></a><p>延續前一篇的<a href="http://blackie1019.github.io/2018/10/05/Basic-MariaDB-MySQL-CRUD-with-NET-Standard/">Basic MariaDB/MySQL CRUD with .NET Standard</a></p><p>關聯式資料庫依定會遇到 <em>Stored Procedure</em> 的使用，一個 SP 的組成為下：</p><p><img src="00.png" alt="00.png"></p><p>而在 MySQL/MariaDB 把 <em>Stored Procedures</em> 與 <em>Stored Functions</em> 合稱為 <em>Stored Routines</em>：</p><ul><li><p>Stored Procedures</p><p>  官方解釋為:<br>  `Stored Procedures Routine invoked with a CALL statement.</p><p>  是一個可預先宣告的 SQL 語句，可透過 <em>CALL</em> 來呼叫．所以 <em>Stored Procedures</em> 可單獨做使用。</p></li><li><p>Stored Functions</p><p>  官方解釋為:<br>  `Stored Functions Defined Functions for use with SQL Statements.</p><p>  是一個預先定義好的函示，可在任一段 SQL 語句中呼叫使用．所以 <em>Stored Functions</em> 必須依賴在有 <em>Stored Procedures</em> 的情境下做使用(非硬規定)</p></li></ul><p>國外知名論壇也有討論兩者的差異與整理如下：</p><p><img src="01.jpg" alt="01.jpg"></p><p>而如果要撰寫一個 SP 包含資料回傳的話有 output 與 return value 兩種寫法</p><h2 id="基本-SP-撰寫-使用-output"><a href="#基本-SP-撰寫-使用-output" class="headerlink" title="基本 SP 撰寫 - 使用 output"></a>基本 SP 撰寫 - 使用 output</h2><p>這邊如果要定義一個 SP 的可以透過下面的範例格式在資料庫實體執行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> QUERY_USERS_COUNT (<span class="keyword">OUT</span> param1 <span class="built_in">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> param1 <span class="keyword">FROM</span> <span class="keyword">User</span>;</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>以上寫法的第一行 <em>DELIMITER //</em> 主要是將換行字元從預設的 <strong>;</strong> 換為 <strong>//</strong> 避免在建立 SP 產生錯誤，詳細內容可以參考<a href="https://ithelp.ithome.com.tw/articles/10032363" target="_blank" rel="noopener">只談MySQL (第16天) Stored Procedure及Function</a>。而最後一行同理就是將其換行字元換為原先的 <strong>;</strong></p><p>而上述語法可以看到我們用 <em>OUT</em> 當作外部宣告的參數傳入後在運行完整個查詢後將總數填入此  <em>param1</em> 內，所以今天我們在 MariaDB/MySQL 的 console 或是工具呼叫取用時反而要用下方語法：</p><pre><code>CALL QUERY_USERS_COUNT(@a);SELECT @a;</code></pre><p>這邊以 Jetbrains 的跨平台資料庫 IDE - <a href="https://www.jetbrains.com/datagrip/" target="_blank" rel="noopener">datagrip</a> 為例做操作：</p><p><img src="02.jpg" alt="02.jpg"></p><p>而對應的 C# 程式碼為:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">GetUserCountBySPWithOutputValue</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">        <span class="comment">// Calling SP with output</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> MySqlCommand())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> parameter = <span class="keyword">new</span> MySqlParameter(<span class="string">"@param1"</span>,MySqlDbType.Int32);</span><br><span class="line">            parameter.Direction = ParameterDirection.Output;</span><br><span class="line">            </span><br><span class="line">            cmd.Connection = conn;</span><br><span class="line">            cmd.CommandType = CommandType.StoredProcedure;</span><br><span class="line">            cmd.CommandText = <span class="string">"QUERY_USERS_COUNT"</span>;</span><br><span class="line">            cmd.Parameters.Add(parameter);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">await</span> cmd.ExecuteNonQueryAsync();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Convert.ToInt32(parameter.Value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本-SP-撰寫-使用-return-value"><a href="#基本-SP-撰寫-使用-return-value" class="headerlink" title="基本 SP 撰寫 - 使用 return value"></a>基本 SP 撰寫 - 使用 return value</h2><p>而如果將上述語法改為 <em>return value</em> 則為:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> LabMariabDB.QUERY_USERS_COUNT_WITH_RETURNVALUE()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="string">"Count"</span> <span class="keyword">FROM</span> <span class="keyword">User</span>;</span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>而這邊呼叫也相對簡單一點：</p><pre><code>CALL QUERY_USERS_COUNT_WITH_RETURNVALUE();</code></pre><p>而對應的 C# 程式碼為:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">GetUserCountBySPWithReturnValue</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">        <span class="comment">// Calling SP with return value</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> MySqlCommand())</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            cmd.Connection = conn;</span><br><span class="line">            cmd.CommandType = CommandType.StoredProcedure;</span><br><span class="line">            cmd.CommandText = <span class="string">"QUERY_USERS_COUNT_WITH_RETURNVALUE"</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">await</span> cmd.ExecuteReaderAsync();</span><br><span class="line">            <span class="keyword">await</span> reader.ReadAsync();</span><br><span class="line">            <span class="keyword">return</span> reader.GetInt32(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而完整的範例與測試可以參考：<a href="https://github.com/blackie1019/dotnet-mariadb-lab" target="_blank" rel="noopener">dotnet-mariadb-lab</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.essentialsql.com/what-is-a-stored-procedure/" target="_blank" rel="noopener">Learn about Stored Procedures</a></li><li><a href="https://mariadb.com/kb/en/stored-procedure-overview/" target="_blank" rel="noopener">Stored Procedure Overview</a></li><li><a href="https://mariadb.com/kb/en/library/stored-function-overview/" target="_blank" rel="noopener">Stored Function Overview</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用 &lt;em&gt;MySqlConnector&lt;/em&gt; 讓 .NET Standard/.NET Core 可以對 MariaDB/MySQL 進行基本的 Stored Procedure 操作．&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term=".NET Standard" scheme="https://blackie1019.github.io/tags/NET-Standard/"/>
    
      <category term="MySQL" scheme="https://blackie1019.github.io/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="https://blackie1019.github.io/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>Basic MariaDB/MySQL CRUD with .NET Standard</title>
    <link href="https://blackie1019.github.io/2018/10/05/Basic-MariaDB-MySQL-CRUD-with-NET-Standard/"/>
    <id>https://blackie1019.github.io/2018/10/05/Basic-MariaDB-MySQL-CRUD-with-NET-Standard/</id>
    <published>2018-10-05T16:10:38.000Z</published>
    <updated>2021-06-15T03:56:53.053Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用 <em>MySqlConnector</em> 讓 .NET Standard/.NET Core 可以對 MariaDB/MySQL 進行基本的操作．</p><a id="more"></a><p>最近開始學習一些非微軟且 Open Source的技術，在 RDBMS 的選項中選擇使用 <a href="https://mariadb.com/" target="_blank" rel="noopener">MariaDB</a>．今天就分享如何讓 .NET 也能基本的使用CRUD.</p><h2 id="About-MariaDB"><a href="#About-MariaDB" class="headerlink" title="About MariaDB"></a>About MariaDB</h2><p>MariaDB 資料庫管理系統是MySQL的一個分支，主要由開源社群在維護，採用 <strong>GPL</strong> 授權授權。MariaDB 是由MySQL的創始人 Ulf Michael Widenius 主導開發並以他女兒的名字為該專案命名．</p><p>MariaDB 的特色是 MariaDB 的 API 和協定相容 MySQL，但又擴充了一些功能，以支援原生的非阻塞操作和進度報告。這也讓當前使用MySQL的連結器、程式庫和應用程式也將可以在 MariaDB 正常運作．</p><p>整個 MariaDB 的架構可以參考下圖：</p><p><img src="01.jpg" alt="01.jpg"></p><p>更深入的介紹可以參考<a href="https://www.slideshare.net/bytebot/mariadb-indepth-hands-on-training-in-seoul" target="_blank" rel="noopener">MariaDB: in-depth (hands on training in Seoul)</a></p><h2 id="How-to-operate-Data-via-NET-with-MariaDB"><a href="#How-to-operate-Data-via-NET-with-MariaDB" class="headerlink" title="How to operate Data via .NET with MariaDB"></a>How to operate Data via .NET with MariaDB</h2><p>由上面簡單的介紹可以知道 MariaDB 基本上跟 MySQL 是相同但跟先進，且所有工具都能直接沿用的． </p><p>所以這邊直接切入本篇重點使用 <a href="https://github.com/mysql-net/MySqlConnector" target="_blank" rel="noopener">MySqlConnector</a> 來協助 .NET 操作 MariaDB 的資料．</p><p>MySqlConnector 不是 MySQL 官方推出的套件，但號稱比官方效能更好且完美的支援常見的 ORM 框架如：Dapper, NReco.Data, Paradigm ORM, ServiceStack.OrmLite 與 SimpleStack.Orm 等。</p><p>而最棒的是他有實作非同步的介面讓開發更為方便。</p><h3 id="Host-MariaDB-on-Docker"><a href="#Host-MariaDB-on-Docker" class="headerlink" title="Host MariaDB on Docker"></a>Host MariaDB on Docker</h3><p>這邊的範例使用 Docker 來運行 MariaDB, 操作上只有兩步驟：</p><ol><li><p>拉取 MariaDB image</p><pre><code>docker pull mariadb</code></pre></li><li><p>運行一個 Instance 並設定密碼與 port 對外</p><pre><code>docker run -p 3306:3306 --name lab-mariadb -e MYSQL_ROOT_PASSWORD=pass.123 -d mariadb</code></pre></li></ol><h3 id="MariaDB-CRUD-via-MySqlConnector"><a href="#MariaDB-CRUD-via-MySqlConnector" class="headerlink" title="MariaDB CRUD via MySqlConnector"></a>MariaDB CRUD via MySqlConnector</h3><p>接著開一個 .NET Standard 專案後從 <a href="https://www.nuget.org/packages/MySqlConnector/" target="_blank" rel="noopener">nuget 加入 MySqlConnector</a></p><pre><code>dotnet add package MySqlConnector</code></pre><p>接著我們簡單地透過以下的樣式就可以建立第一個 Read 的操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserRepository</span> : <span class="title">IUserRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;UserRepository&gt; Lazy =</span><br><span class="line">        <span class="keyword">new</span> Lazy&lt;UserRepository&gt;(() =&gt; <span class="keyword">new</span> UserRepository());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserRepository Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> Lazy.Value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _connStrinng;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserRepository</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _connStrinng = <span class="string">"Server=localhost;User ID=root;Password=pass.123;Database=LabMariabDB"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;UserEntity&gt; <span class="title">GetUserById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> MySqlCommand())</span><br><span class="line">            &#123;</span><br><span class="line">                cmd.Connection = conn;</span><br><span class="line">                cmd.CommandText =</span><br><span class="line">                    <span class="string">"SELECT Id, Name, BalanceAmount, DateCreated, DateUpdated FROM User WHERE Id = @Id"</span>;</span><br><span class="line">                cmd.Parameters.AddWithValue(<span class="string">"Id"</span>, id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> reader = <span class="keyword">await</span> cmd.ExecuteReaderAsync();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Retrieve first rows</span></span><br><span class="line">                <span class="keyword">await</span> reader.ReadAsync();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> UserEntity()</span><br><span class="line">                &#123;</span><br><span class="line">                    Id = reader.GetInt16(<span class="number">0</span>),</span><br><span class="line">                    Name = reader.GetString(<span class="number">1</span>),</span><br><span class="line">                    BalanceAmount = reader.GetDecimal(<span class="number">2</span>),</span><br><span class="line">                    DateCreated = reader.GetDateTime(<span class="number">3</span>),</span><br><span class="line">                    DateUpdated = reader.IsDBNull(<span class="number">4</span>) ? (DateTime?) <span class="literal">null</span> : reader.GetDateTime(<span class="number">4</span>),</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面可以看到步驟依序為：</p><ol><li>設定一個連線字串，並提供主機 host 、連線帳號與密碼、預設連入的 DB 名稱</li><li>透過連線字串建立一個 <em>MySqlConnection</em></li><li>透過 <em>conn.OpenAsync();</em> 以非同步的方式開啟連線</li><li>接著建立 <em>MySqlCommand</em> 物件後放入下面屬性資料：<ol><li>使用的連線實體(Connection)</li><li>執行的指令(CommandText)</li><li>避免 SQL Injection 的參數化傳值(Parameters)</li></ol></li><li>接著就是看操作指令的回傳類型決定是呼叫有回傳值的 <em>cmd.ExecuteReaderAsync()</em> 或是無回傳值的 <em>cmd.ExecuteNonQueryAsync()</em></li><li>如果是有回傳值的就是透過 reader.ReadAsync() 一筆筆讀出資料</li><li>可透過不同型別的資料去給予回傳的欄位index 即可。而且欄位資料可以透過 <em>reader.IsDBNull</em> 確認當前回傳是否為 null 並進行 nullable 處理</li></ol><p>以上就是一個基本的流程，所以同理補上新增的範例如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">CreateUser</span>(<span class="params">UserDto inputObj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">        <span class="comment">// Insert some data</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> MySqlCommand())</span><br><span class="line">        &#123;</span><br><span class="line">            cmd.Connection = conn;</span><br><span class="line">            cmd.CommandText = <span class="string">"INSERT INTO User (Name) VALUES (@Name)"</span>;</span><br><span class="line">            cmd.Parameters.AddWithValue(<span class="string">"Name"</span>, inputObj.Name);</span><br><span class="line">            <span class="keyword">await</span> cmd.ExecuteNonQueryAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">UpdateUser</span>(<span class="params">UserDto inputObj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Insert some data</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> MySqlCommand())</span><br><span class="line">        &#123;</span><br><span class="line">            cmd.Connection = conn;</span><br><span class="line">            cmd.CommandText =</span><br><span class="line">                <span class="string">"UPDATE User SET Name = @Name, BalanceAmount = @BalanceAmount, DateUpdated = NOW() WHERE Id = @Id"</span>;</span><br><span class="line">            cmd.Parameters.AddWithValue(<span class="string">"Name"</span>, inputObj.Name);</span><br><span class="line">            cmd.Parameters.AddWithValue(<span class="string">"BalanceAmount"</span>, inputObj.BalanceAmount);</span><br><span class="line">            cmd.Parameters.AddWithValue(<span class="string">"Id"</span>, inputObj.Id);</span><br><span class="line">            <span class="keyword">await</span> cmd.ExecuteNonQueryAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">DeleteUser</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> MySqlConnection(_connStrinng))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> conn.OpenAsync();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Insert some data</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> MySqlCommand())</span><br><span class="line">        &#123;</span><br><span class="line">            cmd.Connection = conn;</span><br><span class="line">            cmd.CommandText =</span><br><span class="line">                <span class="string">"DELETE FROM User WHERE Id = @Id"</span>;</span><br><span class="line">            cmd.Parameters.AddWithValue(<span class="string">"Id"</span>, id);</span><br><span class="line">            <span class="keyword">await</span> cmd.ExecuteNonQueryAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊參考了官方的建議使用在每一個操作後就透過 conn 外面包裹的 using 架構，直接 Dispose 時關閉 DB 連線，避免有漏關的狀況發生。</p><p>而上面的程式碼寫法與相關注意事項可以參考以下三篇文章的說明:</p><ul><li><a href="https://derekwill.com/2015/02/17/proper-etiquette-for-using-mysql-in-c-part-of-1-of-3/" target="_blank" rel="noopener">Proper Etiquette for using MySQL in C# (Part of 1 of 3) – IDisposable</a></li><li><a href="https://derekwill.com/2015/04/01/proper-etiquette-for-using-mysql-in-c-part-of-2-of-3/" target="_blank" rel="noopener">Proper Etiquette for using MySQL in C# (Part of 2 of 3) – Parameterized Queries</a></li><li><a href="https://derekwill.com/2015/05/17/proper-etiquette-for-using-mysql-in-c-part-of-3-of-3-dbdatareader/" target="_blank" rel="noopener">Proper Etiquette for using MySQL in C# (Part of 3 of 3) – DbDataReader</a></li></ul><p>而完整的範例與測試可以參考：<a href="https://github.com/blackie1019/dotnet-mariadb-lab" target="_blank" rel="noopener">dotnet-mariadb-lab</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.tutorialspoint.com/mysql/" target="_blank" rel="noopener">MySQL Tutorial</a></li><li><a href="https://mysql-net.github.io/MySqlConnector/" target="_blank" rel="noopener">MySqlConnector - Documents</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用 &lt;em&gt;MySqlConnector&lt;/em&gt; 讓 .NET Standard/.NET Core 可以對 MariaDB/MySQL 進行基本的操作．&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term=".NET Standard" scheme="https://blackie1019.github.io/tags/NET-Standard/"/>
    
      <category term="MySQL" scheme="https://blackie1019.github.io/tags/MySQL/"/>
    
      <category term="MariaDB" scheme="https://blackie1019.github.io/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>[Rider] Introduce live templates &amp; file templates</title>
    <link href="https://blackie1019.github.io/2018/10/04/Rider-Introduce-live-templates-file-templates/"/>
    <id>https://blackie1019.github.io/2018/10/04/Rider-Introduce-live-templates-file-templates/</id>
    <published>2018-10-04T08:51:42.000Z</published>
    <updated>2021-06-15T03:56:53.433Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄 Rider 如何透過 <em>Live templates</em> 與 <em>File templates</em> 增加開發效率<br><a id="more"></a></p><p>Ｒider 在 <strong>2018.2</strong> 版本推出了兩個新功能 <em>Live templates</em> 與 <em>File templates</em> 的流程改進，透過這兩個功能我們可以<br>處理重複內容、建立程式碼樣板和各項語言撰寫前的宣告或是呈現的預設樣式，原文介紹：<a href="https://blog.jetbrains.com/dotnet/2018/09/06/live-templates-file-templates-rider-2018-2/" target="_blank" rel="noopener">Live templates and file templates in Rider 2018.2</a>，這邊就簡單分享一下如何使用這兩個功能．</p><h2 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live Templates"></a>Live Templates</h2><p>這個功能可以很快速的幫我們透過以建立的程式碼樣板帶入當前程式區塊，類似code snipet 的效果，但更為強大的是可以動態的決定一些帶入參數與語言結構．</p><p>這邊我們很快的輸入在建立一份 C# 函示如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> datas = <span class="keyword">new</span>[]&#123;<span class="string">"test1"</span>,<span class="string">"test2"</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當我們建立以上內容後可以透過在下一行開始輸入 foreach 等已建立的預設 live templates 關鍵字建立樣板：</p><p><img src="1.png" alt="1.png"></p><p>接著可以按下 <em>tab</em> 或是 <em>enter</em> 引入這個樣板.</p><p>而當樣板被引入後，即可輸入前面宣告的變數 datas． 這邊只要輸入前幾個想選擇的變數前面的名稱，當選項已經反白鎖定了就可以按下 <em>tab</em> 自動帶入並移動到前方再度詢問是否要變更設定, 此時按下 <em>tab</em> 則會產生預設的迴圈內變數，直接按下 <em>tab</em> 就可以完成整個迴圈設定：</p><p><img src="2.png" alt="2.png"></p><p>透過以上方法我們能更快速的實作常用的程式碼區塊．</p><p>而預設建立的 live templates 樣板可以從 Preferences &gt; Editor | Live Templates 這邊看到：</p><p><img src="3.png" alt="3.png"></p><p><img src="4.png" alt="4.png"></p><p>而從設定中我們也可以看到有一個選項是 Generate, Surround or Both, 上面的範例就是一個 Generate 的使用方式，而 Surround 的用法則是在你原本想要再迴圈內運行的區段按下快捷鍵 <em>Code | Surround With… </em>(Windows 為 Ctrl+E,U 而 macOS 為 ⌘ ⌥ T))</p><p>這邊就可以這邊就可以如下叫出快捷並選擇要包裹的類型為哪一個樣板：</p><p><img src="5.png" alt="5.png"></p><p>整套原文的做法可以參考這邊示範:</p><p><img src="https://d3nmt5vlzunoa1.cloudfront.net/dotnet/files/2018/08/templates-invoke.gif" alt="demo"></p><h2 id="File-Templates"><a href="#File-Templates" class="headerlink" title="File Templates"></a>File Templates</h2><p>而不同於 <em>live templates</em> 是在已經建立的程式檔案中方便插入常見的程式碼樣式或區塊，<em>File Templates</em> 更加用於建立一份已知的預設檔案樣板，這邊已先前介紹過的 <a href="https://blackie1019.github.io/2017/04/03/Singleton-Pattern-Implementation-In-CSharp/">Singleton Pattern Implementation in C#</a> 為例子, 建立一個 Singleton 的檔案大概如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Lab.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TestHelper1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;TestHelper1&gt; lazy =</span><br><span class="line">            <span class="keyword">new</span> Lazy&lt;TestHelper1&gt;(() =&gt; <span class="keyword">new</span> TestHelper1());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> TestHelper1 Instance</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> lazy.Value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">TestHelper1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從上面的檔案我們就可以建立一個 <em>Singleton Helper</em> 的樣版，以便之後快速建立向同框架或程式碼結構的其他檔案．</p><p>首先到  Preferences &gt; Editor | File Templates ，我們就可以建立一個新的樣版並給她以下設定：</p><p><img src="6.png" alt="6.png"></p><p>其中畫面類似程式碼區塊的就是我們剛剛擷取的樣版：</p><pre><code>using System;$HEADER$namespace $NAMESPACE${public sealed class $CLASS$ {        private static readonly Lazy&lt;$CLASS$&gt; lazy =            new Lazy&lt;$CLASS$&gt;(() =&gt; new $CLASS$());        public static $CLASS$ Instance { get { return lazy.Value; } }        private $CLASS$(){$END$}}}</code></pre><p>將一些需要帶入的專案變數用特殊的寫法包起來並透額外透過下面的步驟逐一設定(這邊可以參考已經建立好的預設樣板各變數是取用什麼對應)：</p><p><img src="7.png" alt="7.png"></p><p>到這邊確定完後記得要點選右邊的閃電標記並將他移入當前使用才可生效：</p><p><img src="8.png" alt="8.png"></p><p>最後只要在剛剛樣板可以生效的轉案類型，在新增檔案時可以從 context 看到有多一個剛剛建立的樣板選項：</p><p><img src="9.png" alt="9.png"></p><p>接下來只要輸入你想要的檔案名稱，他就會以該名稱建立一個同名的 <em>Singleton</em> 模式的類別供使用．</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄 Rider 如何透過 &lt;em&gt;Live templates&lt;/em&gt; 與 &lt;em&gt;File templates&lt;/em&gt; 增加開發效率&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="Rider" scheme="https://blackie1019.github.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title>macOS occurred problem when installation -  missing xcrun issue</title>
    <link href="https://blackie1019.github.io/2018/10/04/macOS-occurred-problem-when-installation-missing-xcrun-issue/"/>
    <id>https://blackie1019.github.io/2018/10/04/macOS-occurred-problem-when-installation-missing-xcrun-issue/</id>
    <published>2018-10-04T01:26:25.000Z</published>
    <updated>2021-06-15T03:56:53.833Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何解決在 macOS 安裝其他軟體或工具遇到 missing xcrun 的問題</p><a id="more"></a><p>昨天將手上 macbook 升級至最新的 macOS:Mojave 後，透過 <em>homebrew</em> 進行套件更新時就會發生  missing xcrun 的問題: <strong>invalid active developer path</strong>，導致 git 指令不能正常執行成功．詳細的錯誤如下：</p><pre><code>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</code></pre><p>查了一下相關資料，有可能發師的原因是 xcode 的套件位置移動或是位置不正確了，透過以下指令可以重新設定相關設定：</p><pre><code>xcode-select --install</code></pre><p>接著會跳出視窗一步步按下同意與確認即可．</p><p>而當我們再次使用 homebrew 進行更新後即可以看到正確的回應</p><p><img src="1.png" alt="1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何解決在 macOS 安裝其他軟體或工具遇到 missing xcrun 的問題&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="macOS" scheme="https://blackie1019.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Short-cut for C# Implement Methods of an Interface or Abstract Class</title>
    <link href="https://blackie1019.github.io/2018/09/16/Short-cut-for-C-Sharp-Implement-Methods-of-an-Interface-or-Abstract-Class/"/>
    <id>https://blackie1019.github.io/2018/09/16/Short-cut-for-C-Sharp-Implement-Methods-of-an-Interface-or-Abstract-Class/</id>
    <published>2018-09-16T02:20:41.000Z</published>
    <updated>2021-06-15T03:56:53.505Z</updated>
    
    <content type="html"><![CDATA[<p>記錄如何在開發工具使用快捷鍵實作繼承抽象類別與方法</p><a id="more"></a><p>在 <em>OOP</em> 的開發裡面，繼承是一定會使用到的手法，而當我們繼承抽象類別與介面要一一找出必要的實作時難免有點麻煩．</p><p>以往我們最常用的快捷鍵莫過於直接輸入 <em>ctor</em> 並按下 <em>tab</em> 後幫我們產生類別建構子:</p><p><img src="ctor.jpg" alt="ctor.jpg"></p><p>而現代的 IDE 都已經內建快捷鍵協助快速實作方法，免去我們打字的困擾．</p><h2 id="Rider-⌘-N-gt-select-Implement-method-or-⌃-I"><a href="#Rider-⌘-N-gt-select-Implement-method-or-⌃-I" class="headerlink" title="Rider : ⌘+N &gt; select Implement method or ⌃+I"></a>Rider : ⌘+N &gt; select Implement method or ⌃+I</h2><p>在 Rider 當中我們可以透過滑鼠右鍵的 <em>Generate</em> 或是 <em>⌘+N</em> &gt; select Implement method 的方式：</p><p><img src="01.jpg" alt="01.jpg"></p><p><img src="02.jpg" alt="02.jpg"></p><p>當然我們也可以直接按下快捷鍵 <em>⌃+I</em> 省去上面的步驟，直接選擇我們要實作的方法來幫我們自動產生程式碼：</p><p><img src="03.jpg" alt="03.jpg"></p><p>完成後，產生的程式碼暫時透過丟出 <strong>System.NotImplementedException()</strong> 的方式來完成實作：</p><p><img src="04.jpg" alt="04.jpg"></p><h2 id="Visual-Studio-Ctrl"><a href="#Visual-Studio-Ctrl" class="headerlink" title="Visual Studio :  Ctrl+."></a>Visual Studio :  Ctrl+.</h2><p>而 VS 其實很早就支援這樣的快捷鍵，一樣可以透過滑鼠右鍵選擇 <em>Implement Abstract Metohd</em> 或是直接按下 <em>Ctrl+.</em>，呼叫出以下畫面：</p><p><img src="05.png" alt="05.png"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.jetbrains.com/help/idea/implementing-methods-of-an-interface.html" target="_blank" rel="noopener">Implement Methods of an Interface or Abstract Class</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/ide/reference/implement-abstract-class?view=vs-2017" target="_blank" rel="noopener">Implement an abstract class in Visual Studio</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄如何在開發工具使用快捷鍵實作繼承抽象類別與方法&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term="Visual Studio" scheme="https://blackie1019.github.io/tags/Visual-Studio/"/>
    
      <category term="Rider" scheme="https://blackie1019.github.io/tags/Rider/"/>
    
  </entry>
  
  <entry>
    <title>Use Portainer Manage Multiple Docker Registry </title>
    <link href="https://blackie1019.github.io/2018/09/05/Use-Portainer-Manage-Multiple-Docker-Registry/"/>
    <id>https://blackie1019.github.io/2018/09/05/Use-Portainer-Manage-Multiple-Docker-Registry/</id>
    <published>2018-09-05T04:31:46.000Z</published>
    <updated>2021-06-15T03:56:53.525Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下如何使用 Portainer 輕鬆管理多個 Docker Registry</p><a id="more"></a><p>Docker 是近年必備的開發技能之一，有不少企業也將此技術放置正式環境上作部署與運作．如果今天有需要從非官方的 docker registry（也就是不是從 <em>hub</em>, https//hub.docker.com/) 就會需要額外進行 <em>login</em> 並在 <em>pull</em> 時搭配指定的 registry 位置才可以成功取得，以下用 <a href="https://registry.access.redhat.com" target="_blank" rel="noopener">Redhat regisry</a> 為例 :</p><pre><code>docker login registry.access.redhat.com</code></pre><p><img src="01_1.jpg" alt="01_1"></p><p>登入成功後即可拉取映像檔案，這邊以<a href="https://access.redhat.com/containers/?tab=images&amp;platform=docker#/registry.access.redhat.com/dotnet/dotnet-20-runtime-rhel7" target="_blank" rel="noopener">.NET Core 2.0 Runtime on RHEL</a>為例：</p><pre><code>docker pull registry.access.redhat.com/dotnet/dotnet-20-runtime-rhel7</code></pre><p><img src="01_2.jpg" alt="01_2"></p><p>如此便可取得非官網的 registry 檔案．但每次都要打上前綴的 registry url 實在很煩人，這時我們就拿出上次介紹的 <a href="http://blackie1019.github.io/2018/08/29/Portainer-Simple-and-useful-management-UI-for-Docker/">Portainer - Simple and useful management UI for Docker</a> </p><h2 id="Add-New-Registry-into-Portainer"><a href="#Add-New-Registry-into-Portainer" class="headerlink" title="Add New Registry into Portainer"></a>Add New Registry into Portainer</h2><p>運行 Portainer 後可以在 Settings&gt; Registries 找到新增 Registry 的地方：</p><p><img src="02.jpg" alt="02"></p><p><img src="03.jpg" alt="03"></p><p><img src="04.jpg" alt="04"></p><p>當設定好後，可以到 <em>Images</em> 選擇拉取一個新的 image ，這邊選擇剛剛的註冊的 registry 並輸入指定的 image 名稱即可：</p><p><img src="05.jpg" alt="05"></p><p>是不是很簡單！趕快改用 <em>Portainer</em> 做你的容器管理工具吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一下如何使用 Portainer 輕鬆管理多個 Docker Registry&lt;/p&gt;
    
    </summary>
    
      <category term="Virtualization" scheme="https://blackie1019.github.io/categories/Virtualization/"/>
    
    
      <category term="Docker" scheme="https://blackie1019.github.io/tags/Docker/"/>
    
      <category term="Container" scheme="https://blackie1019.github.io/tags/Container/"/>
    
      <category term="Docker Registry" scheme="https://blackie1019.github.io/tags/Docker-Registry/"/>
    
  </entry>
  
  <entry>
    <title>gitignore command line and rider .gitignore plugin </title>
    <link href="https://blackie1019.github.io/2018/09/05/gitignore-command-line-and-rider-gitignore-plugin/"/>
    <id>https://blackie1019.github.io/2018/09/05/gitignore-command-line-and-rider-gitignore-plugin/</id>
    <published>2018-09-05T02:10:27.000Z</published>
    <updated>2021-06-15T03:56:53.765Z</updated>
    
    <content type="html"><![CDATA[<p>分享 git ignore CLI 工具與 Rider 的 .gitignore 擴充套件(plugin)</p><a id="more"></a><p>早先在 <a href="http://blackie1019.github.io/2017/03/22/Visaul-Studio-Code-Quick-Add-gitingore-File/">Visaul Studio Code Quick Add gitingore File</a>  有介紹過 vscode 的 extension 去協助我們針對語言或專案特性快速產生 <em>.gitignore</em>，省去繁雜的查詢與貼上．</p><p>由於最近使用 <a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener">rider</a> 作為主要 <em>C#</em> 開發工具，所以找了上面的擴充套件 - <a href="https://plugins.jetbrains.com/plugin/7495--ignore" target="_blank" rel="noopener">Plugins - .ignore</a>.</p><p>該套件目前不只支援 Rider ，也支援以下 IDE:</p><ul><li>IntelliJ IDEA  </li><li>PhpStorm  </li><li>WebStorm  </li><li>PyCharm  </li><li>RubyMine  </li><li>AppCode  </li><li>CLion </li><li>GoLand  </li><li>DataGrip  </li><li>Rider  </li><li>MPS  </li><li>Android Studio</li></ul><p>如果有使用 <em>jetbrains</em> 家族的其他產品也非常推薦下載．</p><h2 id="Install-ignore-plugin-on-Rider"><a href="#Install-ignore-plugin-on-Rider" class="headerlink" title="Install .ignore plugin on Rider"></a>Install .ignore plugin on Rider</h2><p>打開 Rider 先至 preferences &gt; Plugins ：</p><p><img src="01.png" alt="01"></p><p>選擇下方的 Browse Repositories 或是手動選擇加入下載的套件. 這邊以 Browse Repositories 為例，進入後上方輸入你要查詢的套件並按下安裝即可：</p><p><img src="02.png" alt="02"></p><p>安裝好後會在你專案(.csproject)內透過右鍵或是新增檔案快速加入 .gitignore.</p><p><img src="09.png" alt="09"></p><p> 但如果在方案(.sln)則反灰無法使用： </p><p><img src="03.png" alt="03"></p><p>如果需要在方案建立則可以透過以下方法</p><h2 id="Use-gitignore-io-Command-Line-Tool"><a href="#Use-gitignore-io-Command-Line-Tool" class="headerlink" title="Use gitignore.io Command Line Tool"></a>Use gitignore.io Command Line Tool</h2><p>而 <a href="https://www.gitignore.io/" target="_blank" rel="noopener">gitignore.io</a> 其實近年也出了自己的 CLI(Command Line Tool) - <a href="https://github.com/joeblau/gitignore.io" target="_blank" rel="noopener">gi</a> ，可以讓使用在 bash, zsh, fish 或是 windows cmd 與 powershell 下都能快速的產生 .gitignore 檔案．</p><p>安裝上就參考你所需要安裝的環境執行指令，這邊以 macOS 的 zsh 為例，到 zsh 貼上下面指令即可：</p><pre><code>echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</code></pre><p><img src="04.png" alt="04"></p><p>安裝好後可以透過以下指令顯示所有 .gitignore 樣板：</p><pre><code>gi list</code></pre><p><img src="05.png" alt="05"></p><p>透過以下指令即可將指定樣板加入選定的位置：</p><pre><code>git visualstudio &gt;&gt; .gitignore</code></pre><p><img src="06.png" alt="06"></p><p>這邊可以將一個以上的樣板同時加入</p><p>上方指令運作完後透過顯示全部檔案即可看到檔案成功加入</p><p><img src="07.png" alt="07"></p><p>接著，可以回到 <em>Rider</em> 透過顯示所有檔案看到剛剛被加入的 <em>.gitignore</em></p><p><img src="08.png" alt="08"></p><p>這邊不管是透過第一個方法還是第二個方法都會幫你加入一樣的 <em>.gitignore</em>, 如果是針對 <em>rider</em> 要客製化 git ignore 檔案的話只需加入下面至 <em>.gitignore</em>：</p><pre><code># JetBrains Rider.idea/*.sln.iml</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享 git ignore CLI 工具與 Rider 的 .gitignore 擴充套件(plugin)&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="Rider" scheme="https://blackie1019.github.io/tags/Rider/"/>
    
      <category term="git" scheme="https://blackie1019.github.io/tags/git/"/>
    
      <category term="git ignore" scheme="https://blackie1019.github.io/tags/git-ignore/"/>
    
  </entry>
  
  <entry>
    <title>[Git] Switch from HEAD to master branch cause to disappear of part of the project</title>
    <link href="https://blackie1019.github.io/2018/08/31/Git-Switch-from-Head-branch-to-Master-branch-cause-to-disappear-of-part-of-the-project/"/>
    <id>https://blackie1019.github.io/2018/08/31/Git-Switch-from-Head-branch-to-Master-branch-cause-to-disappear-of-part-of-the-project/</id>
    <published>2018-08-31T10:31:28.000Z</published>
    <updated>2021-06-15T03:56:53.233Z</updated>
    
    <content type="html"><![CDATA[<p>記錄如何解決 Git 從 HEAD 切換到 master 分支部分交付不見/不見的問題</p><a id="more"></a><p>前陣子再一個經常操作的專案上做了 git commit 後，從當前的 HEAD 切換到 master 分支，部分交付的 commits 在 HEAD 操作的就全部遺失了，在 git cli 或 sourcetree 上都無法透過指令顯示不見的 HEAD 分支．</p><p>後來想到 Git <em>commit</em> 的特性，就透過 git reflog 指令然觀看全部 git 的操作記錄，裡面詳細記載你曾經下過的 git 指令:</p><pre><code>git reflog</code></pre><p><img src="git002.png" alt="git002.png"></p><p>這邊找到了移動到 master 分支前的一個 commit 的雜湊值(hash)為 596f379….(後面省略)．</p><p>這邊可以馬上透過建立 tag 的指令將當前消失的 commits 顯示出來：</p><pre><code>git tag emergency 596f379</code></pre><p><img src="git003.png" alt="git003.png"></p><p>當完成後回到 SouceTree 就可以看到結果如下：</p><p><img src="git001.png" alt="git001.png"></p><h2 id="Why-HEAD-branch-commits-disappeared"><a href="#Why-HEAD-branch-commits-disappeared" class="headerlink" title="Why HEAD branch commits disappeared"></a>Why HEAD branch commits disappeared</h2><p>這邊說明一下 HEAD 分支與那些 commits 原先之所以在切換到 master 會完全消失的原因在於：</p><ul><li>任何 commit 需要有一個以上的 <em>label</em></li><li>所屬哪一個 <strong>branch</strong> 屬於一個 <em>label</em></li><li>commit 被標示一個 <strong>tag</strong> 屬於一個 <em>label</em></li><li>HEAD 是一個 <strong>tag</strong></li></ul><p>詳細內容可以參考 <a href="https://git-scm.com/book/zh-tw/v1/Git-%E5%85%A7%E9%83%A8%E5%8E%9F%E7%90%86-Git-References" target="_blank" rel="noopener">Git-內部原理-Git-References</a>.</p><p>當 HEAD 往新的 master branch 移動時，先前的 commit 因為沒有任何所屬的 branch, 所以除非給予一個 tag ，不然就真的消失了（其實是看不到而已)。而透過 <strong>git reflog</strong> 指令可以顯示所有操作的內容，從此指令我們就可以抓到消失的 sha1 ，並透過 <strong>git tag</strong> 指令給予一個 <em>label</em> 將所有相關 commits 顯示出來。</p><p>一個很久沒遇到的問題，這邊筆記一下以免下次又找半天．</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://community.atlassian.com/t5/Sourcetree-questions/Switch-from-Head-to-Master-cause-to-disappear-of-part-of-the/qaq-p/344387#U880366" target="_blank" rel="noopener">Switch from Head to Master cause to disappear of part of the project</a></li><li><a href="https://git-scm.com/book/zh-tw/v1/Git-%E5%85%A7%E9%83%A8%E5%8E%9F%E7%90%86-%E7%B6%AD%E8%AD%B7%E5%8F%8A%E8%B3%87%E6%96%99%E5%BE%A9%E5%8E%9F" target="_blank" rel="noopener">Git-內部原理-維護及資料復原</a></li><li><a href="https://blog.wu-boy.com/2015/07/undo-git-reset-hard/" target="_blank" rel="noopener">git tips 找尋遺失的 commit 紀錄</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記錄如何解決 Git 從 HEAD 切換到 master 分支部分交付不見/不見的問題&lt;/p&gt;
    
    </summary>
    
      <category term="CI&amp;CD" scheme="https://blackie1019.github.io/categories/CI-CD/"/>
    
    
      <category term="Git" scheme="https://blackie1019.github.io/tags/Git/"/>
    
      <category term="Source Control" scheme="https://blackie1019.github.io/tags/Source-Control/"/>
    
  </entry>
  
</feed>
