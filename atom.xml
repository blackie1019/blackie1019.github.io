<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blackie&#39;s Failed Notes</title>
  <subtitle>Ever tried. Ever failed. No matter. Try Again. Fail again. Fail better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blackie1019.github.io/"/>
  <updated>2016-08-22T13:47:23.659Z</updated>
  <id>http://blackie1019.github.io/</id>
  
  <author>
    <name>Blackie Tsai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HttpWebRequest Timeout and ReadWriteTimeout</title>
    <link href="http://blackie1019.github.io/2016/08/22/HttpWebRequest-Timeout-and-ReadWriteTimeout/"/>
    <id>http://blackie1019.github.io/2016/08/22/HttpWebRequest-Timeout-and-ReadWriteTimeout/</id>
    <published>2016-08-22T08:26:34.000Z</published>
    <updated>2016-08-22T13:47:23.659Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何正確的使用在Asp.Net中的HttpWebRequest兩個Timeout，Timeout與ReadWriteTimeout。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在開始前要先談一下TCP datagrams 與 Chunked transfer encoding。</p>
<h3 id="TCP-datagrams"><a href="#TCP-datagrams" class="headerlink" title="TCP datagrams"></a>TCP datagrams</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/tcp.png" alt="tcp"></p>
<p>使用TCP協議來傳輸數據的HTTP是Web服務器和客戶端使用的特殊協議。而TCP在傳輸中會將封包拆成一份IP header與多份TCP segment(TCP header + TCP data)。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/TCP_segment.png" alt="TCP+IPData"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/TCP_IPData.png" alt="TCP+IPData"></p>
<p>簡單來看就是一個header來告訴你連線位置與請求狀況後，會切分成多份封包依序傳輸，當封包都接收完才算完成傳輸，並將傳輸內容整理成真實的檔案。</p>
<h3 id="Chunked-transfer-encoding"><a href="#Chunked-transfer-encoding" class="headerlink" title="Chunked transfer encoding"></a>Chunked transfer encoding</h3><p>分塊傳輸編碼（Chunked transfer encoding）是HTTP中的一種數據傳輸機制，允許HTTP由網頁伺服器發送給客戶端應用的數據可以分成多個部分。分塊傳輸編碼只在HTTP協議1.1版本（HTTP/1.1）中提供。</p>
<p>通常，HTTP應答消息中發送的數據是整個發送的，Content-Length消息頭欄位表示數據的長度。數據的長度很重要，因為客戶端需要知道哪裡是應答消息的結束，以及後續應答消息的開始。</p>
<p>也因為有此機制導致我們在寫程式時需要用一個stream來當緩衝接收所收到資料並把他讀出。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/chunk_transfer.png" alt="Chunked flow"></p>
<h3 id="HttpWebRequest-Timeout"><a href="#HttpWebRequest-Timeout" class="headerlink" title="HttpWebRequest.Timeout"></a>HttpWebRequest.Timeout</h3><p>The time before which the server has to accept the client’s request. Note that this doesn’t include the DNS resolution time, which is managed by the ServicePointManager.</p>
<h3 id="HttpWebRequest-ReadWriteTimeout"><a href="#HttpWebRequest-ReadWriteTimeout" class="headerlink" title="HttpWebRequest.ReadWriteTimeout"></a>HttpWebRequest.ReadWriteTimeout</h3><p>The time before which the client has to receive the entire body of the response from the server. Note that this timeout starts only after the server accepts the request.</p>
<p><strong><em>Default value is 300,000 milliseconds (5 minutes).</em></strong></p>
<p>而無論TCP datagrams或是分塊傳輸編碼的機制將導致我們需要ReadWriteTimeout來判斷是否寫入每一個chunk資料流讀寫都在時間內。</p>
<h2 id="Use-Scenario"><a href="#Use-Scenario" class="headerlink" title="Use Scenario"></a>Use Scenario</h2><h3 id="使用HttpWebRequest-Timeout"><a href="#使用HttpWebRequest-Timeout" class="headerlink" title="使用HttpWebRequest.Timeout"></a>使用HttpWebRequest.Timeout</h3><ul>
<li>判斷Connection是否在指定時間內建立連線</li>
<li>每段封包建立連線限定時間</li>
</ul>
<h3 id="使用HttpWebRequest-ReadWriteTimeout"><a href="#使用HttpWebRequest-ReadWriteTimeout" class="headerlink" title="使用HttpWebRequest.ReadWriteTimeout"></a>使用HttpWebRequest.ReadWriteTimeout</h3><ul>
<li>指定時間內做完single chunk資料流(data streaming)的讀寫</li>
</ul>
<p>簡單來講當我們需要強制在一段時間內做完一個使用HttpWebRequest的回應用TimeoutStream會較佳。</p>
<h2 id="Misconceptions"><a href="#Misconceptions" class="headerlink" title="Misconceptions"></a>Misconceptions</h2><p>但這邊要聲明如果用HttpWebRequest.ReadWriteTimeout則是錯誤的觀念。要達到在限制的下載時間內完成下載否則就拋出例外錯誤的話是需要自己去實作該功能的。 這邊提供一個範例來說明該如何實作:</p>
<p>請求遠端的一個檔案，這邊用<a href="http://engineerhammad.blogspot.tw/2015/04/Download-Test-Files.html" target="_blank" rel="external"><br>DOWNLOAD<br>Download Test Files | 100Kb, 1Mb, 10Mb, 100Mb, 1Gb, 5Gb and 10 Gb.</a>的10MB檔案做範例:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/speed.png" alt="speed"></p>
<p>這邊建置一個MVC空的Action來測試，而執行的範例程式碼如下:</p>
<ul>
<li>設定HttpWebRequest.Timeout 確認連線建立不超過3秒</li>
<li>設定HttpWebRequest.ReadWriteTimeout 確認3秒內做完每一個chunk的讀寫</li>
<li>使用自行建置的TimeoutStream來控制整個下載的過程不超過10秒</li>
</ul>
<pre><code>public ActionResult Test2Speed()
{
    var result = new JObject();
    var request = (HttpWebRequest)WebRequest.Create(&quot;http://speedtest.ftp.otenet.gr/files/test10Mb.db&quot;);
    request.Timeout = 3 * 1000;
    request.ReadWriteTimeout = 3 * 1000;
    try
    {

        using (var pageResponse = request.GetResponse())
        {
            var stream = pageResponse.GetResponseStream();
            using (var myStreamReader = new StreamReader(new TimeOutStream(stream, 10 * 1000), Encoding.GetEncoding(&quot;UTF-8&quot;)))
            {
                var data = myStreamReader.ReadToEnd();
                result.Add(&quot;content&quot;, &quot;success&quot;);
            }
        }
    }
    catch (TimeOutException e)
    {
        result.Add(&quot;content&quot;, e.Message);
    }
    catch (Exception e)
    {
        result.Add(&quot;content&quot;, e.Message);
        result.Add(&quot;stack&quot;, e.StackTrace);
    }
    return this.Content(JsonConvert.SerializeObject(result), &quot;application/json&quot;);
}
</code></pre><p>這邊建置一個TimeOutStream繼承Stream，並設定一個計時器，在逾時時會丟出例外(TimeOutException)</p>
<pre><code>public class TimeOutStream : Stream
{
    private Stream inner;
    private System.Timers.Timer timer;

    private Exception ex;

    public TimeOutStream(Stream inner, int fetchTimeoutInMs)
    {
        this.timer = new System.Timers.Timer();
        this.timer.Enabled = true;
        this.timer.AutoReset = false;
        this.timer.Interval = fetchTimeoutInMs;
        this.timer.Elapsed += this.TimeOutEvent;
        this.inner = inner;
        this.timer.Start();
    }

    public override void Flush()
    {
        this.inner.Flush();
    }

    public override long Seek(long offset, SeekOrigin origin)
    {
        this.ThrowException();
        return this.inner.Seek(offset, origin);
    }

    public override void SetLength(long value)
    {
        this.inner.SetLength(value);
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        this.ThrowException();
        var result = inner.Read(buffer, offset, count);

        /* HERE I COULD CALL A CUSTOM EVENT */
        return result;
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
        this.ThrowException();
        this.inner.Write(buffer,offset,count);
    }

    public override bool CanRead {
        get
        {
            return this.inner.CanRead;
        }
    }

    public override bool CanSeek
    {
        get
        {
            return this.inner.CanSeek;
        }
    }

    public override bool CanWrite
    {
        get
        {
            return this.inner.CanWrite;
        }
    }

    public override long Length
    {
        get
        {
            return this.inner.Length;
        }
    }

    public override long Position
    {
        get
        {
            return this.inner.Position;
        }

        set
        {
            this.inner.Position = value;
        }
    }

    private void TimeOutEvent(object sender, ElapsedEventArgs eArgs)
    {
        this.ex = new TimeOutException(&quot;Timeout exception&quot;);
        this.timer.Stop();
    }

    private void ThrowException()
    {
        if (this.ex!=null)
        {
            throw this.ex;
        }
    }
}
</code></pre><p>這邊自行定義TimeOutException</p>
<pre><code>public class TimeOutException : Exception
{
    public TimeOutException()
    {
    }

    public TimeOutException(string message)
        : base(message)
    {
    }

    public TimeOutException(string message, Exception inner)
        : base(message, inner)
    {
    }
}
</code></pre><p>結果如下:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/HttpWebRequest-Timeout-and-ReadWriteTimeout/Exception.png" alt="exception"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.google.com.tw/search?q=TCP/IP+HTTP&amp;espv=2&amp;biw=1745&amp;bih=828&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjno9vGkdXOAhUBu5QKHckZDO0Q_AUIBigB&amp;dpr=1.1#imgrc=3zlIHfpxOE1UGM%3A" target="_blank" rel="external">TCP/IP, Winsock, and WinInet</a></li>
<li><a href="http://stackoverflow.com/questions/7250983/httpwebrequests-timeout-and-readwritetimeout-what-do-these-mean-for-the-unde" target="_blank" rel="external">HttpWebRequest’s Timeout and ReadWriteTimeout — What do these mean for the underlying TCP connection?</a></li>
<li><a href="http://stackoverflow.com/questions/1410602/how-do-set-a-timeout-for-a-method/1533975#1533975" target="_blank" rel="external">how do set a timeout for a method</a></li>
<li><a href="http://lnbogen.com/2008/10/14/httpwebrequest-avoiding-the-pitfalls/" target="_blank" rel="external">HttpWebRequest, avoiding the pitfalls</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/SSPREK_6.1.0/com.ibm.itame.doc_6.1/am61_webseal_admin91.htm" target="_blank" rel="external">HTTP Fragment</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank" rel="external">分塊傳輸編碼</a></li>
<li><a href="https://doc.micrium.com/display/httpref/Chunked+Transfer+Encoding" target="_blank" rel="external">Chunked Transfer Encoding</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何正確的使用在Asp.Net中的HttpWebRequest兩個Timeout，Timeout與ReadWriteTimeout。&lt;/p&gt;
    
    </summary>
    
      <category term="Asp.Net" scheme="http://blackie1019.github.io/categories/Asp-Net/"/>
    
    
      <category term="C#" scheme="http://blackie1019.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>reCAPTCHA for .NET</title>
    <link href="http://blackie1019.github.io/2016/08/22/reCAPTCHA-for-NET/"/>
    <id>http://blackie1019.github.io/2016/08/22/reCAPTCHA-for-NET/</id>
    <published>2016-08-22T02:59:06.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>reCAPTCHA計畫原本是由卡內基美濃大學所發展的系統，後來普遍被發展到防止非人為行為的自動程式上，包含Facebook與Twitter都有使用。此篇跟大家分享如何在Asp.Net上使用<br>reCAPTCHA for .NET來實現該功能。</p>
<a id="more"></a>
<h2 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h2><blockquote>
<p>為了驗證人類所輸入的文字是正確的，而不是隨意輸入，有兩個字會被顯示出來；一個是光學文字辨識軟體無法辨別的字，另一個是一個已經知道正確答案的字。如果使用者正確的回答出已知正確答案的字，那麼就假設所輸入的另一個光學辨識軟體無法辨識的字是認真的檢視後被輸入而非隨便輸入。</p>
</blockquote>
<p>官方解說可以參考這部影片:</p>
<iframe width="560" height="315" src="http://www.youtube.com/embed/jwslDn3ImM0" frameborder="0" allowfullscreen></iframe>

<p>架構流程:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/Recaptcha-api-diagram.gif" alt="流程"></p>
<h2 id="Google-reCAPTCHA-演進"><a href="#Google-reCAPTCHA-演進" class="headerlink" title="Google reCAPTCHA 演進"></a>Google reCAPTCHA 演進</h2><p>其實目前Google的reCAPTCHA已經經過三次的演進，改變的目的都是降低人為辨識失敗率跟加速過程，避免在防止機器人的時候讓真的操作者使用者經驗更差。</p>
<h3 id="第一代"><a href="#第一代" class="headerlink" title="第一代"></a>第一代</h3><p>reCAPTCHA問題的所需的文字圖片，首先會由reCAPTCHA計畫網站利用Javascript API取得[6]，在終端使用者回答問題後，伺服器再連回reCAPTCHA計畫的主機驗證使用者的輸入是否正確。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_1_o.jpg" alt="g1_ori"></p>
<p>2012年起，reCAPTCHA除了原來的文字掃描圖片外，也採用Google街景拍攝的門牌號碼相片</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_1.jpg" alt="g1"></p>
<h3 id="第二代"><a href="#第二代" class="headerlink" title="第二代"></a>第二代</h3><p>更新後的版本改用圖片來取代文字辨識率較差的問題，但有時圖片也不是真的很容易辨識..因為常常會有模擬兩可的答案…(畢竟不是自己拍的圖片呀)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_2.jpg" alt="g2"></p>
<h3 id="第三代"><a href="#第三代" class="headerlink" title="第三代"></a>第三代</h3><p>最新的版本在2014年底推出，這版只要勾選I’m not a rebot即可!是不是更簡單了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/reCaptcha_3.png" alt="g3"></p>
<h2 id="reCAPTCHA-for-NET"><a href="#reCAPTCHA-for-NET" class="headerlink" title="reCAPTCHA for .NET"></a>reCAPTCHA for .NET</h2><p><a href="https://github.com/tanveery/recaptcha-net" target="_blank" rel="external">recaptcha-net</a>，這是Nuget上面的一個專案可讓.Net 同時支援Google reCAPTCHA Version 1與Version 2。設定與使用都相當簡單</p>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul>
<li>Render recaptcha control (HTML) with appropriate options for pre-defined themes and culture (language).</li>
<li>Verify user’s answer to recaptcha’s challenge.</li>
<li>Supports ASP.NET Web Forms and ASP.NET MVC.</li>
<li>Supprts reCAPTCHA version 1 and version 2 in a seamless fashion.</li>
<li>One of the most well-documented reCAPTCHA libraries in the open source community.</li>
</ul>
<h3 id="Creating-a-reCAPTCHA-API-Key"><a href="#Creating-a-reCAPTCHA-API-Key" class="headerlink" title="Creating a reCAPTCHA API Key"></a>Creating a reCAPTCHA API Key</h3><ul>
<li>前往<a href="https://www.google.com/recaptcha" target="_blank" rel="external">Google’s reCAPTCHA</a></li>
<li>點選Get reCAPTCHA. 此時會需要你登入Google帳號綁定該服務.</li>
<li>選擇註冊一個新網站(domain)並輸入一個識別名稱(tag/label)給該網站.</li>
<li>新增成功後會獲得一組 <em>Site Key</em> 與 <em>Secret Key</em>，這部分等等要被我們放進網站的 web.config 中設定.</li>
</ul>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ol>
<li><p>安裝reCAPTCHA Nuget Package</p>
<pre><code>Install-Package RecaptchaNet
</code></pre></li>
<li><p>將 reCAPTCHA Key 放入 Web.config File</p>
<p> 這邊範例放的是Version 2，如果要改成Version 1只需改成1就好</p>
<pre><code>&lt;appSettings&gt;
    &lt;add key=&quot;recaptchaPublicKey&quot; value=&quot;Your site key&quot; /&gt;
    &lt;add key=&quot;recaptchaPrivateKey&quot; value=&quot;Your secret key&quot; /&gt;
    &lt;add key=&quot;recaptchaApiVersion&quot; value=&quot;2&quot; /&gt;
&lt;/appSettings&gt;
</code></pre></li>
</ol>
<h3 id="Added-Code"><a href="#Added-Code" class="headerlink" title="Added Code"></a>Added Code</h3><p>這邊官方提供兩個版本:WebForm與Web MVC(目前無WebAPI版本)。這邊因為不推廣WebForm了所以只講Web MVC的使用，如下:</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>這邊簡單定義一個Model作為稍後傳入的資料結構，這邊設定為[Required]則表示稍後後段會驗證該參數是否有值，如果沒有給值則會視同表單驗證失敗</p>
<pre><code>namespace BKPlatform.App.MemberSite.Site.Models
{
    using System.ComponentModel.DataAnnotations;

    public class MemberRegistrationModel
    {
        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        public string MemberCode { get; set; }

    }
}
</code></pre><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>使用上需載入Namespace</p>
<pre><code>using Recaptcha.Web;
using Recaptcha.Web.Mvc;
</code></pre><p>然後加入新的Routing Action - RegisterMember</p>
<pre><code>public ActionResult RegisterMember([FromBody] MemberRegistrationModel model)
{
    var recaptchaHelper = this.GetRecaptchaVerificationHelper();
    if (String.IsNullOrEmpty(recaptchaHelper.Response))
    {
        this.ModelState.AddModelError(&quot;&quot;, &quot;Captcha answer cannot be empty.&quot;);
        return View(model);
    }

    var recaptchaResult = recaptchaHelper.VerifyRecaptchaResponse();

    if (recaptchaResult != RecaptchaVerificationResult.Success)
    {
        this.ModelState.AddModelError(&quot;&quot;, &quot;Incorrect captcha answer.&quot;);
        return View(model);
    }

    if (this.ModelState.IsValid)
    {
        return RedirectToAction(&quot;Index&quot;);
    }

    return View(model);
}
</code></pre><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>這邊在頁面只要透過官方寫好的Helper簡單的載入即可，記得要先載入google recaptcha的JavaScript API(這邊使用Layout客製的headScripts區域在head載入)</p>
<pre><code>@model BKPlatform.App.MemberSite.Site.Models.MemberRegistrationModel
@using Recaptcha.Web.Mvc
@{
    Layout = &quot;~/Views/Shared/_Layout.cshtml&quot;;
}

@section headScripts{
    &lt;script src=&apos;https://www.google.com/recaptcha/api.js&apos;&gt;&lt;/script&gt;
}

&lt;h2&gt;User Registration Form&lt;/h2&gt;

@using (Html.BeginForm())
{
    @Html.ValidationSummary()
    &lt;p&gt;
        &lt;label&gt;Member Code:&lt;/label&gt;
        @Html.PasswordFor(m =&gt; m.MemberCode)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;First name:&lt;/label&gt;
        @Html.TextBoxFor(m =&gt; m.FirstName)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;Last name:&lt;/label&gt;
        @Html.TextBoxFor(m =&gt; m.LastName)
    &lt;/p&gt;

    @Html.Recaptcha(theme: Recaptcha.Web.RecaptchaTheme.Clean);

    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
}
</code></pre><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p>這邊就是我們完成的畫面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/reCAPTCHA-for-NET/result.gif" alt="result"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/ReCAPTCHA" target="_blank" rel="external">ReCAPTCHA</a></li>
<li><a href="http://www.ithome.com.tw/news/92757" target="_blank" rel="external">Google釋出新版reCAPTCHA機制，只要點「我不是機器人」！</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;reCAPTCHA計畫原本是由卡內基美濃大學所發展的系統，後來普遍被發展到防止非人為行為的自動程式上，包含Facebook與Twitter都有使用。此篇跟大家分享如何在Asp.Net上使用&lt;br&gt;reCAPTCHA for .NET來實現該功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Asp.Net" scheme="http://blackie1019.github.io/categories/Asp-Net/"/>
    
    
      <category term="Web MVC/WebApi" scheme="http://blackie1019.github.io/tags/Web-MVC-WebApi/"/>
    
      <category term="CAPTCHA" scheme="http://blackie1019.github.io/tags/CAPTCHA/"/>
    
  </entry>
  
  <entry>
    <title>SignalR tuning experience</title>
    <link href="http://blackie1019.github.io/2016/08/20/signalr-tuning-experience/"/>
    <id>http://blackie1019.github.io/2016/08/20/signalr-tuning-experience/</id>
    <published>2016-08-20T16:01:00.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>整理使用SignalR的一些經驗與調校內容</p>
<a id="more"></a>
<p>使用SignalR作為公司處理client-server的訊息傳遞的功能已經好一陣子，這邊整理一下相關知識。</p>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="Web-Browser-Support"><a href="#Web-Browser-Support" class="headerlink" title="Web Browser Support"></a>Web Browser Support</h3><p>Applications that use SignalR in browsers must use jQuery version 1.6.4 or major later versions (such as 1.7.2, 1.8.2, or 1.9.1).</p>
<p>SignalR can be used in the following browsers:</p>
<ul>
<li>Microsoft Internet Explorer versions 8, 9, 10, and 11. Modern, Desktop, and Mobile versions are supported.</li>
<li>Mozilla Firefox: current version - 1, both Windows and Mac versions.</li>
<li>Google Chrome: current version - 1, both Windows and Mac versions.</li>
<li>Safari: current version - 1, both Mac and iOS versions.</li>
<li>Opera: current version - 1, Windows only.</li>
<li>Android browser</li>
</ul>
<h3 id="Application-Support"><a href="#Application-Support" class="headerlink" title="Application Support"></a>Application Support</h3><p>SignalR can be hosted in standalone Windows client or Silverlight applications. Windows Desktop and Silverlight SignalR applications</p>
<ul>
<li>Applications using .NET 4 are supported on Windows XP SP3 or later.</li>
<li>Applications using .NET Framework 4.5 are supported on Windows Vista or later.</li>
</ul>
<h3 id="Transport-Medium"><a href="#Transport-Medium" class="headerlink" title="Transport Medium"></a>Transport Medium</h3><p>SignalR提供四種傳輸方式，依據瀏覽器的支援你可以自行設定(預設四種都支援，但會有先後順序的使用，Websocket最優先!)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/signalr-tuning-experience/type.png" alt="type"></p>
<ul>
<li><p>HTML 5 transports</p>
<ul>
<li>WebSocket</li>
<li>Server-Sent Events</li>
</ul>
</li>
<li><p>Comet transports</p>
<ul>
<li>Forever Frame</li>
<li>Long Polling</li>
</ul>
</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/signalr-tuning-experience/support.png" alt="support"></p>
<h3 id="Config-Transport"><a href="#Config-Transport" class="headerlink" title="Config Transport"></a>Config Transport</h3><p>我們可以手動設定自己要的Transport</p>
<pre><code>$.connection.hub.start({ transport: [&apos;longPolling&apos;] });
</code></pre><h3 id="Logging-and-Monitoring-Transports-in-SignalR"><a href="#Logging-and-Monitoring-Transports-in-SignalR" class="headerlink" title="Logging and Monitoring Transports in SignalR"></a>Logging and Monitoring Transports in SignalR</h3><p>SignlaR本身可以開啟Logging機制，只要透過簡單的設定打開即可</p>
<pre><code>$.connection.hub.logging = true;
</code></pre><h2 id="Tuning-Experience"><a href="#Tuning-Experience" class="headerlink" title="Tuning Experience"></a>Tuning Experience</h2><p>以下是正式環境上遇到的問題跟處理的方式:</p>
<ul>
<li>Reducing message size. All messaging solution concern size, smaller is better.</li>
<li><p>Use latest SignalR to solved connection increase issue.</p>
<p>  To fix known knowing issue of early version, suggest to upgrade signalR to latest stable version. *SignalR 2 is only supported on .NET Famework 4.5 or higher version.</p>
<ul>
<li><a href="https://github.com/SignalR/SignalR/issues/1790" target="_blank" rel="external">https://github.com/SignalR/SignalR/issues/1790</a></li>
<li><a href="https://github.com/SignalR/SignalR/issues/2950" target="_blank" rel="external">https://github.com/SignalR/SignalR/issues/2950</a></li>
</ul>
</li>
<li><p>Update windows service pack for SinglaR connection issue(Window Server 2012 以上不需要特別安裝)</p>
<p>  <a href="https://support.microsoft.com/en-us/kb/980368" target="_blank" rel="external">Update for Windows Server 2008/2008 R2 with IIS 7/7.5 endless connection with a period</a></p>
</li>
<li><p>Web request optimized</p>
<ul>
<li>Move static file to CDN(JS, CSS, png, audio file and etc…)</li>
<li>Concatenate request to less request(only one request to retrieve data is best)</li>
</ul>
</li>
<li><p>SignalR web socket issue, caused Network setting limitation.</p>
<p>  Found SignalR using unsupported transport type and create a lot of connection.</p>
<ul>
<li><p>Short-term: To turn off web socket from SignalR, pass the transport type(longPolling, foreverFrame, serverSentEvents, webSocket) you want.</p>
<pre><code>$.connection.hub.start({ transport: [&apos;longPolling&apos;] });
</code></pre></li>
<li><p>Long-term: Using sub-domain and update system architecture to support SignalR with Web Socket Issue.</p>
</li>
</ul>
</li>
<li><p>Avoid unobserved exceptions stop application due to too many connection from SignalR in global.asax.cs</p>
<pre><code>protected void Application_Start()
{

    this.RegisterUnobservedTaskException();
}

private void RegisterUnobservedTaskException()
{
    TaskScheduler.UnobservedTaskException += (s, e) =&gt;
    {
        e.SetObserved();
        e.Exception.Handle(
            t =&gt;
            {
                this.log.Exception(string.Format(&quot;UnobservedTaskException happen on Message={0}&quot;, e.Exception.Message));
                return true;
            });
    };
}
</code></pre></li>
</ul>
<h2 id="SignalR-ScaleOut-Design"><a href="#SignalR-ScaleOut-Design" class="headerlink" title="SignalR ScaleOut Design"></a>SignalR ScaleOut Design</h2><p>If still have connection issue, review web application design for SignalR scaleout design.</p>
<p><a href="http://www.asp.net/signalr/overview/performance/scaleout-in-signalr" target="_blank" rel="external">ScaleOut In SignalR</a></p>
<h2 id="Performance-Tuning-with-IIS-and-net-framework"><a href="#Performance-Tuning-with-IIS-and-net-framework" class="headerlink" title="Performance Tuning with IIS and .net framework"></a>Performance Tuning with IIS and .net framework</h2><p>Sharing the tuning guide of official post.</p>
<p><a href="https://github.com/SignalR/SignalR/wiki/Performance" target="_blank" rel="external">Performance Tuning SignalR</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr" target="_blank" rel="external">Introduction to SignalR</a></li>
<li><a href="http://dailydotnettips.com/2014/03/20/identifying-the-signalr-transport-medium/" target="_blank" rel="external">Identifying the SignalR Transport Medium</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/supported-platforms" target="_blank" rel="external">SignalR Supported Platforms</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理使用SignalR的一些經驗與調校內容&lt;/p&gt;
    
    </summary>
    
      <category term="Asp.Net" scheme="http://blackie1019.github.io/categories/Asp-Net/"/>
    
    
      <category term="SignalR" scheme="http://blackie1019.github.io/tags/SignalR/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI build daily with nightli.es</title>
    <link href="http://blackie1019.github.io/2016/08/19/Travis-CI-build-daily-with-nightli-es/"/>
    <id>http://blackie1019.github.io/2016/08/19/Travis-CI-build-daily-with-nightli-es/</id>
    <published>2016-08-19T16:01:00.000Z</published>
    <updated>2016-08-22T13:47:23.659Z</updated>
    
    <content type="html"><![CDATA[<p>協助Travis CI建立每24小時至少建置一次的行為，確保外部套件或內部程序可正常被建置</p>
<a id="more"></a>
<p>在開發時難免會有用到別人套件的情況，而使用Travis CI雖然可以幫我們在push code到remote repository時，即時建立專案編譯與發佈至對應的位置，但如果我們有遇到使用的Library會不定時建置同一版本時你就需要<a href="https://nightli.es/" target="_blank" rel="external">nightli.es</a>協助，可以每天至少建置一次的Travis CI排程。</p>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>使用上很簡單只要上<a href="https://nightli.es/" target="_blank" rel="external">nightli.es</a>後登入你的github帳號並設定要建立daily build的專案，將他turn on即可。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Travis-CI-build-daily-with-nightli-es/1.png" alt="turn on"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本部落格是用Hexo來建立的，而Hexo在建立文章時可以加入date來指定該文章的時間。但卻點是如果要將該篇文章正常的被建置至首頁節錄顯示或是新增至routing則一定要經過編譯與重新發佈。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Travis-CI-build-daily-with-nightli-es/2.png" alt="date"></p>
<p>此時，就是需要nightli.es協助我們建立每天執行一次daily build來確保每天的文章都正常地顯示在首頁上。</p>
<p>而此篇文章也是前一天預先寫好跟透過daily build來發佈的歐! 有需求的朋友快點來嘗試看看吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;協助Travis CI建立每24小時至少建置一次的行為，確保外部套件或內部程序可正常被建置&lt;/p&gt;
    
    </summary>
    
      <category term="Continuous Integration" scheme="http://blackie1019.github.io/categories/Continuous-Integration/"/>
    
    
      <category term="Travis CI" scheme="http://blackie1019.github.io/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>Gulp run-sequence - Run a Series of Dependent Gulp Tasks in Order</title>
    <link href="http://blackie1019.github.io/2016/08/19/gulp-run-sequence/"/>
    <id>http://blackie1019.github.io/2016/08/19/gulp-run-sequence/</id>
    <published>2016-08-19T01:00:00.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>讓Gulp可以建立有相依性的系列工作，協助我們解決在有必要依序執行的工作上做更彈性的設置</p>
<a id="more"></a>
<p>當我們在使用Gulp預設的相依性是單一且十分單純的。當我們今天有較為複雜的使用情形就會不堪使用。 </p>
<blockquote>
<p>Runs a sequence of gulp tasks in the specified order. This function is designed to solve the situation where you have defined run-order, but choose not to or cannot use dependencies.</p>
</blockquote>
<p>而<a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="external">run-sequence</a>則是專門解決這樣情形的gulp套件</p>
<h2 id="run-sequence-基本操作"><a href="#run-sequence-基本操作" class="headerlink" title="run-sequence 基本操作"></a>run-sequence 基本操作</h2><p>開始正式使用前先來看一下基本配置</p>
<h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><pre><code>npm install --save-dev run-sequence
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>以下是官方簡單的介紹與載入方式</p>
<p>This will run in this order: </p>
<ol>
<li>build-clean </li>
<li>build-scripts and build-styles in parallel </li>
<li>build-html </li>
<li>Finally call the callback function </li>
</ol>
<p>代碼:</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var runSequence = require(&apos;run-sequence&apos;);
var del = require(&apos;del&apos;);
var fs = require(&apos;fs&apos;);

gulp.task(&apos;build&apos;, function(callback) {
  runSequence(&apos;build-clean&apos;,
              [&apos;build-scripts&apos;, &apos;build-styles&apos;],
              &apos;build-html&apos;,
              callback);
});

gulp.task(&apos;build-clean&apos;, function() {
    // Return the Promise from del() 
    return del([BUILD_DIRECTORY]);
//  ^^^^^^ 
//   This is the key here, to make sure asynchronous tasks are done! 
});

gulp.task(&apos;build-scripts&apos;, function() {
    // Return the stream from gulp 
    return gulp.src(SCRIPTS_SRC).pipe(...)...
//  ^^^^^^ 
//   This is the key here, to make sure tasks run to completion! 
});

gulp.task(&apos;callback-example&apos;, function(callback) {
    // Use the callback in the async function 
    fs.readFile(&apos;...&apos;, function(err, file) {
        console.log(file);
        callback();
//      ^^^^^^^^^^ 
//       This is what lets gulp know this task is complete! 
    });
});
</code></pre><h2 id="Web-development-工作情境"><a href="#Web-development-工作情境" class="headerlink" title="Web development 工作情境"></a>Web development 工作情境</h2><p>接者我們以常見的前端開發來做配置，工作情境需求如下(工作順序如號碼從小到大):</p>
<ol>
<li>清空發布的資料夾</li>
<li>搬移js,css檔案(一起做)</li>
<li>合併js,css檔案(一起做)</li>
<li>最小化js,css檔案(一起做)</li>
<li>清除所有暫存目錄與檔案</li>
</ol>
<h2 id="使用run-sequence建立工作"><a href="#使用run-sequence建立工作" class="headerlink" title="使用run-sequence建立工作"></a>使用run-sequence建立工作</h2><p>直接來看gulpfile.js的設定</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var uglify = require(&apos;gulp-uglify&apos;); // JS最佳化
var cleanCSS = require(&apos;gulp-clean-css&apos;); // CSS最佳化
var concat = require(&apos;gulp-concat&apos;); // 檔案合併
var del = require(&apos;del&apos;); // 清空資料夾
var runSequence = require(&apos;run-sequence&apos;); 

var public_dir = __dirname + &apos;/public&apos;;
var bundle_dir = public_dir + &apos;/bundle&apos;;
var bundle_js = bundle_dir + &apos;/js&apos;
var bundle_css = bundle_dir + &apos;/css&apos;;

gulp.task(&apos;clean&apos;, function() {
    return del([bundle_dir + &apos;/*&apos;]);
});

gulp.task(&apos;copy-js&apos;, function() {
    return gulp.src([
             public_dir + &apos;/vendors/jquery/index.js&apos;,
             public_dir + &apos;/vendors/fastclick/lib/fastclick.min.js&apos;,
             public_dir + &apos;/vendors/jquery_lazyload/jquery.lazyload.js&apos;,
             public_dir + &apos;/vendors/velocity/velocity.min.js&apos;,
             public_dir + &apos;/vendors/velocity/velocity.ui.min.js&apos;,
             public_dir + &apos;/vendors/fancybox/source/jquery.fancybox.pack.js&apos;,
             public_dir + &apos;/js/src/utils.js&apos;,
             public_dir + &apos;/js/src/motion.js&apos;,
             public_dir + &apos;/js/src/bootstrap.js&apos;,
             public_dir + &apos;/js/src/scrollspy.js&apos;,
             public_dir + &apos;/js/src/post-details.js&apos;,
             public_dir + &apos;/js/src/swig/localsearch.js&apos;,
             public_dir + &apos;/js/src/swig/achive-year.js&apos;

        ])
        .pipe(gulp.dest(bundle_js));
})

gulp.task(&apos;minify-js&apos;, function() {
    return gulp.src(bundle_js)
        .pipe(uglify())
        .pipe(gulp.dest(bundle_js));
})

gulp.task(&apos;concat-js&apos;, function() {
    return gulp.src([
             bundle_js + &apos;/index.js&apos;,
             bundle_js + &apos;/fastclick.min.js&apos;,
             bundle_js + &apos;/jquery.lazyload.js&apos;,
             bundle_js + &apos;/velocity.min.js&apos;,
             bundle_js + &apos;/velocity.ui.min.js&apos;,
             bundle_js + &apos;/jquery.fancybox.pack.js&apos;,
             bundle_js + &apos;/utils.js&apos;,
             bundle_js + &apos;/motion.js&apos;,
             bundle_js + &apos;/bootstrap.js&apos;,
             bundle_js + &apos;/scrollspy.js&apos;,
             bundle_js + &apos;/post-details.js&apos;,
             bundle_js + &apos;/localsearch.js&apos;,
             bundle_js + &apos;/achive-year.js&apos;

        ])
        .pipe(concat(&apos;all.min.js&apos;))
        .pipe(gulp.dest(bundle_dir));
});

gulp.task(&apos;copy-css&apos;, function() {
    return gulp.src([
            public_dir + &apos;/vendors/fancybox/source/jquery.fancybox.css&apos;,
            public_dir + &apos;/vendors/font-awesome/css/font-awesome.min.css&apos;,
            public_dir + &apos;/css/main.css&apos;
        ])
        .pipe(gulp.dest(bundle_css));
})

gulp.task(&apos;minify-css&apos;, function() {
    return gulp.src(bundle_css)
        .pipe(cleanCSS({
            debug: true
        }, function(details) {
            console.log(`${details.name}:[${Math.round(details.stats.efficiency *100)}%]${details.stats.originalSize}=&gt;${details.stats.minifiedSize}`);
        }))
        .pipe(gulp.dest(bundle_css));
})

gulp.task(&apos;concat-css&apos;, function() {
    return gulp.src([
            bundle_css + &apos;/jquery.fancybox.css&apos;,
            bundle_css + &apos;/font-awesome.min.css&apos;,
            bundle_css + &apos;/main.css&apos;
        ])
        .pipe(concat(&apos;advance.css&apos;))
        .pipe(gulp.dest(bundle_dir));
});

gulp.task(&apos;finish-task&apos;, function() {
    return del([bundle_js, bundle_css]);
});

gulp.task(&apos;default&apos;, function() {
    runSequence(
        &apos;clean&apos;, 
        [&apos;copy-js&apos;, &apos;copy-css&apos;], 
        [&apos;minify-js&apos;, &apos;minify-css&apos;], 
        [&apos;concat-js&apos;, &apos;concat-css&apos;],
    &apos;finish-task&apos;);
});
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/gulp-run-sequence/1.png" alt="gulp-run-sequence"></p>
<p>以上是不是很簡單就可以建立出複雜的工作事項，並且可以讓他們同步或是依序執行，彈性相當高呢!</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>官方其實有特別註明以下一段話:</p>
<blockquote>
<p>This is intended to be a temporary solution until the release of gulp 4.0 which has support for defining task dependencies in series or in parallel.</p>
</blockquote>
<p>Gulp自身也知道大家都有需要使用相依性工作的情境，而在即將推出的Gulp 4.0裡面其實已經包含了這樣的特性跟解決方法，而這也是大家非常期待的一個新功能。在還沒有正式發布前大家就先用這個套件來解決問題吧。</p>
<p>對Gulp 4.0 其他特性有興趣的朋友可以參考官方發布的<a href="https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md" target="_blank" rel="external">CHANGELOG</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讓Gulp可以建立有相依性的系列工作，協助我們解決在有必要依序執行的工作上做更彈性的設置&lt;/p&gt;
    
    </summary>
    
      <category term="Development&amp;Coding" scheme="http://blackie1019.github.io/categories/Development-Coding/"/>
    
    
      <category term="Gulp" scheme="http://blackie1019.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS del - sDelete Files and Folder</title>
    <link href="http://blackie1019.github.io/2016/08/17/gulp-node-del/"/>
    <id>http://blackie1019.github.io/2016/08/17/gulp-node-del/</id>
    <published>2016-08-17T17:32:24.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>使用NodeJS的<a href="https://www.npmjs.com/package/del" target="_blank" rel="external">del</a>模組來協助Gulp快速地設定需清理的檔案與目錄夾</p>
<a id="more"></a>
<p>在使用Gulp時最常見的需求就是先清空目標目錄內的檔案或是將暫存檔案移除，這邊分享給大家使用del來取代fs module。</p>
<h2 id="del-基本操作"><a href="#del-基本操作" class="headerlink" title="del 基本操作"></a>del 基本操作</h2><h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><pre><code>$ npm install --save del
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>這邊示範的內容為:</p>
<ul>
<li>刪除tmp目錄下的所有.js檔案</li>
<li>但須保留unicorn.js</li>
</ul>
<p>代碼:</p>
<pre><code>var del = require(&apos;del&apos;);

del([&apos;tmp/*.js&apos;, &apos;!tmp/unicorn.js&apos;]).then(paths =&gt; {
    console.log(&apos;Deleted files and folders:\n&apos;, paths.join(&apos;\n&apos;));
});
</code></pre><h3 id="del-cli"><a href="#del-cli" class="headerlink" title="del-cli"></a>del-cli</h3><p>如果有需要透過指令來加速開發或日常使用的，可以參考<a href="https://github.com/sindresorhus/del-cli" target="_blank" rel="external">del-cli</a></p>
<p>但因為del的刪除是永久性的刪除，如果是還有可能會需要還原的可能要參考<a href="https://github.com/sindresorhus/trash-cli" target="_blank" rel="external">trash-cli</a>。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在目前的使用上我是最常拿del來幫我做gulp建置前的清除與建置後的暫存檔案清楚，確保發布的專案沒有帶到不必要的內容。</p>
<p>不同於Grunt，因為Gulp是以JavaScript為主的Task manager，所以在使用上我們就能借用NodeJS已經有的模組來開發而無須重複製造輪子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用NodeJS的&lt;a href=&quot;https://www.npmjs.com/package/del&quot;&gt;del&lt;/a&gt;模組來協助Gulp快速地設定需清理的檔案與目錄夾&lt;/p&gt;
    
    </summary>
    
      <category term="Development&amp;Coding" scheme="http://blackie1019.github.io/categories/Development-Coding/"/>
    
    
      <category term="NodeJS" scheme="http://blackie1019.github.io/tags/NodeJS/"/>
    
      <category term="Gulp" scheme="http://blackie1019.github.io/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Object and compare with == and ===</title>
    <link href="http://blackie1019.github.io/2016/08/16/javascript-object-compare-equal-with-value-and-reference/"/>
    <id>http://blackie1019.github.io/2016/08/16/javascript-object-compare-equal-with-value-and-reference/</id>
    <published>2016-08-16T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript的世界裡面應該用===來比對真實的值是否相等，而非使用==。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>會想寫這篇是因從去年看了兩本JavaScript必讀聖經後，在昨天又購入了<a href="http://www.tenlong.com.tw/items/9863470120?item_id=887445" target="_blank" rel="external">JavaScript深入精要</a>第三本聖經，第一章開宗明義地讓我了解了這些觀念，這些以前一直讓我感到困惑或是不甚理解的地方(此文章原撰寫在2014/1/4)。</p>
<h2 id="and"><a href="#and" class="headerlink" title="== and ==="></a>== and ===</h2><p>這邊參考<a href="http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm" target="_blank" rel="external">JavaScript tutorial:<br>Comparison operators
</a></p>
<h3 id=""><a href="#" class="headerlink" title="=="></a>==</h3><blockquote>
<p>The == operator will compare for equality after doing any necessary type conversions.</p>
</blockquote>
<p>寬鬆的相等性(lenient equality)，會先嘗試轉換不同型(type)的值，然後再以嚴格相等性的方式來比較它們。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h3><blockquote>
<p>The === operator will not do the conversion, so if two values are not the same type === will simply return false</p>
</blockquote>
<p>嚴格的相等性(strict equality)，只考量具有同樣型別的值是否相等。</p>
<h2 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h2><p>這邊簡單來看JS個別的判斷後就可以知道差異了</p>
<pre><code>&apos;&apos; == &apos;0&apos;           // false
0 == &apos;&apos;             // true
0 == &apos;0&apos;            // true

false == &apos;false&apos;    // false
false == &apos;0&apos;        // true

false == undefined  // false
false == null       // false
null == undefined   // true

&apos; \t\r\n &apos; == 0     // true
</code></pre><p>簡單來講 === 會測試兩個 values 的類型 (object type)，而==則是會將兩邊轉型成可以判斷的判別式後才進行比對，這會導致我們真的在做比對時容易有誤差。而我們長久以來有部分開發習慣可能是利用這個誤差來做一些判斷如:</p>
<pre><code>if(testObject){
    // do something if testObject != null
}
</code></pre><p>這邊就是用 testObject != null 這樣的判斷來進行。但常見的陷阱卻有下面這些:</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><pre><code>NaN == NaN;        // false
</code></pre><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><pre><code>2 == true;        // 2 === 1, false
2 == false;        // 2 === 0, false

1 == true;        // 1 === 1, true
0 == false;        // 0 === 0, true

&apos;&apos; == false;    // 0 === 0, true
&apos;1&apos; == true ;    // 1 === 1, true
&apos;0&apos; == false;    // 0 === 0, true
&apos;test&apos; == true    // NaN === 1, false 
</code></pre><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><pre><code>{} ==&apos;[object Objec]&apos;;    // true
[&apos;123&apos;] == 123;            // true
[] == 0;                // true
</code></pre><p>看完上面的反例相信你已經吐血了，簡單來講==根本沒有令人信服的案例。有的只是因為轉型帶來比較簡化的判斷而已。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>曾經有一派宣稱如果==能滿足需求，則使用===較為麻煩與不必要。但在某些情況你實在無法去思考到底寫這段判別式的人如果用==是已經預測到他會轉型還是根本沒料想到這樣會發生問題。當在用了比較嚴格的XXLint(ESLint, jsLint, jshint and etc…)工具後習慣用===則是大家的通識。</p>
<h2 id="JS學習推薦"><a href="#JS學習推薦" class="headerlink" title="JS學習推薦"></a>JS學習推薦</h2><p>對於JavaScript學習推薦的書籍三本書分別如下:</p>
<ul>
<li><p>JavaScript設計模式</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/A180.png" alt="JavaScript設計模式"></p>
</li>
<li><p>JavaScript優良部分</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/A302.gif" alt="JavaScript優良部分"></p>
</li>
<li><p>JavaScript深入精要</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/A367.jpg" alt="JavaScript深入精要"></p>
</li>
</ul>
<p>如果看三本沒時間或太麻煩的話，建議直接看下面這本</p>
<ul>
<li><p>Speaking JavaScript｜簡明完整的 JS 精要指南 (Speaking JavaScript)</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/22.jpg" alt="Speaking JavaScript"></p>
</li>
</ul>
<p>除此之外必讀就是Mozilla的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank" rel="external">Core JavaScript 1.5 Guide</a></p>
<p>也另外推薦兩本書可以參考:</p>
<ul>
<li><p>JavaScript高性能</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/s4538004.jpg" alt="JavaScript高性能"></p>
</li>
<li><p>Object-Oriented JavaScript - Second Edition</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/3127OT_Object%20Oriented%20JavaScript.jpg" alt="Object-Oriented JavaScript - Second Edition"></p>
</li>
</ul>
<p>最後強力推薦<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Don’t Know JS</a> 這系列的線上書籍(實體書本也有，英文已經出版，中文要等2017才會出完)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140105/JS_you_dont_know.png" alt="You Don&#39;t Know JS"></p>
<p>如果對JavaScript有興趣，且願意把手弄髒去了解它實際原理的非常推薦你看完這些書籍。</p>
<p>很多人知道台灣的這些學習書籍不算少但大多都入門書，扣除沒能力寫之外也沒幾個出版社願意讓這些大師們出進階的書籍(入門書的銷量就不是很好了，出進階書籍還得了…)，請用行動支持這些願意花人生短短沒幾年的時間來寫書並分享給你經驗的大師，有他們的付出我們才能站在巨人的肩上看得更高更遠。</p>
<p>P.S. 大師包含國外與國內這些願意寫書分喜的作家們</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript的世界裡面應該用===來比對真實的值是否相等，而非使用==。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="Basic JS" scheme="http://blackie1019.github.io/tags/Basic-JS/"/>
    
  </entry>
  
  <entry>
    <title>Isomorphic Javascript with React and NodeJS</title>
    <link href="http://blackie1019.github.io/2016/08/15/isomorphic-javascript-with-react-and-nodejs/"/>
    <id>http://blackie1019.github.io/2016/08/15/isomorphic-javascript-with-react-and-nodejs/</id>
    <published>2016-08-15T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/building-isomorphic-javascript-apps-ndc-2015-12-638.jpg" alt="header-img"></p>
<blockquote>
<p>Isomorphic JavaScript apps are JavaScript applications that can run both client-side and server-side.<br>The backend and frontend share the same code.</p>
</blockquote>
<p>Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構。 此外，Isomorphism的好處有:</p>
<ol>
<li>Faster Perceived Load Times + Better Global UX</li>
<li>Search Engine Indexability</li>
<li>Easier Code Maintenance</li>
</ol>
<p>使用這樣架構最有名的案例則是<a href="http://www.slideshare.net/spikebrehm/the-evolution-of-airbnbs-frontend/56" target="_blank" rel="external">Airbnb</a>本身的產品。</p>
<h2 id="How-to-make-a-web-application"><a href="#How-to-make-a-web-application" class="headerlink" title="How to make a web application"></a>How to make a web application</h2><p>在看開始新的架構時我們先回頭看一下一個網頁應用程式不能或缺的三元素為:</p>
<ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
</ul>
<p>如果是動態網頁需要一些資料處理的能力大就需要再結合後端的程式來幫我們，所以原本的架構就會疊加一個後端的語言(C# or Java or PHP or Ruby or Python or Go..etc)。但如果稍微大型的網頁應用程式在開發上多少都會使用網頁框架來加速與統一開發，如Xuenn使用的.Net MVC或Web form，而這樣又帶入了一個頁面語言Razer或是Web page, 結果則是變成下面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/Front-end.png" alt="front-end"></p>
<p>如先前說的Reuse實務上太難達到了，但如果能透過JavaScript幫忙統一後端開發與頁面使用的開發語言，這樣就可以幫我們重新使用我們已經會的技術與經驗來替換掉C#與Razer/Web pages，可以讓開發少點重複但不同語言的學習，多花時間用同一語言與經驗處理實際且進階的應用。 而架構也會變成如此:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/front-end2.png" alt="front-end2"></p>
<p>我們有了可以Shared的Library，縮減Frontend與Backend開發重複功能的時間也避免了重複犯錯的機會，而Back-end這邊則是可以沿用JavaScript這個語言，用同一個開發語言除了減少學習上的分歧也代表我們能沿用這個語言大部分的解決方案(如最佳化, 測試與部屬等等)，而這也讓我們回歸到最基本的網頁應用程式的三個基礎元素。</p>
<p>接下來我們就從架構到實作一步一步的應用NodeJS與ReactJS來幫我們做出第一個Isomorphic web application.</p>
<h2 id="Technical-Overview"><a href="#Technical-Overview" class="headerlink" title="Technical Overview"></a>Technical Overview</h2><h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h3><p>ReactJS是Facebook打造的framework，專注於解決view的問題，透過Virtual DOM 與單一流向的方式來加速與減少前端開發的問題。以往我們所知用更改一個DOM的Element來呈現畫面改變的這個方法在大型頻繁更新的網站上面是非常可怕的效能瓶頸。可以看到的是ReactJS要解決的是Web開發上面UI呈現的問題，隨者網頁功能越多與越多人互相使用與交流，FB遇到越來越多需要在同一個頁面即時更新的情況，ReactJS就是因此而誕生的一個Framework．</p>
<p>整理以下有幾個的優點:</p>
<ul>
<li>模組化的設計：提高了程式碼的複用性、並且很好地隔離了不同組件的程式碼</li>
<li>提倡單向資料流：無論是Flux或Redux都可將資料與業務邏輯很好的分離</li>
<li>聲明式風格：可讀性高，可以很直覺地透過 Render() 函數的內容來想像頁面是如何被組成的</li>
<li>讓 Server-Side Rendering 這件事變成可能：Isomorphic Web Design, SEO</li>
<li>React Native 統一了行動開發，同時保有原生 APP 的體驗</li>
</ul>
<p>React是一個以JavaScript為主打照的語言，而這也產生一種為JSX的開發語言。當然有人對JavaScript裡面包含HTML這種寫法是非常感冒的，這邊就是要稍微遷就一下了。</p>
<p><em>提醒一下JSX只是一種選項，並非開發ReactJS一定要用JSX。</em></p>
<h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><p>NodeJS本身透過HTTP模組已經可以簡單地去做網頁相關處理，但對於一個較為複雜的網站還是會建議額外加裝網頁應用程式模組，減少重複的開發。這邊我們使用NodeJS上面最常使用的Express作為我們的開發的框架，幫我們架設起第一個NodeJS網站。 如果考慮使用ES6/7，也推薦KOA這個框架。</p>
<h3 id="Express-react-views"><a href="#Express-react-views" class="headerlink" title="Express-react-views"></a>Express-react-views</h3><p>Jade模組是Express.js預設的模版引擎(Template Engine)。Jade最大的特點是語法非常的優雅，這是優點同時也是缺點。因為學習曲線較陡（跟HTML差挺多的），而且難以與其他人（像只懂HTML的設計人員）溝通。所以很多人喜歡把Jade換成更接近HTML的模版引擎，這邊我們會改用React來統一所有跟View相關的使用。</p>
<p>這邊我們使用<a href="https://github.com/reactjs/express-react-views" target="_blank" rel="external">Express-react-views</a> 作為範例。</p>
<p>沒錯，減少Server Side還要學習Jade語言而直接使用React，這也我們其中一個Isomorphic的地方。</p>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/webpack-module-bundler.png" alt="webpack"></p>
<p><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a> 是一個模組打包工具（module bundler），主要功能： </p>
<ul>
<li>將 CSS、圖片與其他資源打包 </li>
<li>打包之前預處理（Less、CoffeeScript、JSX、ES6 等）的檔案 </li>
<li>依 entry 文件不同，把 .js 分拆為多個 .js 檔案</li>
<li>支援熱模組(Hot Module)做即時動態更新，減少開發時繁複的建置時間與步驟 </li>
<li>整合豐富的 loader 可以使用</li>
<li>整合grunt, gulp, bower, karma等前端套件工具</li>
</ul>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/babel.png" alt="babel"></p>
<blockquote>
<p>The compiler for writing next generation JavaScript</p>
</blockquote>
<p>這就是Babel主要的使命，而這邊我們使用它來幫我們達到前端開發模組化的功能，因為NodeJS本身已經有模組化的架構了，但ReactJS則需要透過外部套件來幫助它做到這點。而它所帶來的ECMA6的語言特性與其他好處不在此篇多做說明。</p>
<h2 id="Play-by-Steps"><a href="#Play-by-Steps" class="headerlink" title="Play by Steps"></a>Play by Steps</h2><p>在開始前我們先簡單的描述一下我們要做出來的成品所需要符合的需求,</p>
<ul>
<li>後端:網頁title需顯示該網站建立的時間</li>
<li>前端:頁面顯示時間變化</li>
<li>兩者時間格式必須相同</li>
</ul>
<h3 id="懶人DEMO"><a href="#懶人DEMO" class="headerlink" title="懶人DEMO"></a>懶人DEMO</h3><ol>
<li><ul>
<li>複製程式庫 :<strong> <em><a href="https://github.com/blackie1019/Isomorphic-JavaScript-Example.git" target="_blank" rel="external">https://github.com/blackie1019/Isomorphic-JavaScript-Example.git</a></em></strong></li>
</ul>
</li>
<li><ul>
<li>安裝套件 : <strong><em>npm install</em></strong></li>
</ul>
</li>
<li><ul>
<li>啟動node : <strong><em>npm start</em></strong></li>
</ul>
</li>
<li><ul>
<li>打開瀏覽器瀏覽 : <strong><em><a href="http://localhost:9527" target="_blank" rel="external">http://localhost:9527</a></em></strong></li>
</ul>
</li>
</ol>
<h3 id="Setup教學"><a href="#Setup教學" class="headerlink" title="Setup教學"></a>Setup教學</h3><p><strong><em>以下指令如果在Windows環境下操作，建議執行在Git BASH上面，避免Windows不支援</em></strong></p>
<p>首先先到NodeJS官網下載並安裝，安裝完後在Command Line確認一下版本</p>
<pre><code>$ node -v
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/node%20version.png" alt="node-v"></p>
<p>如果看到有正確的回應版本即代表安裝成功。 接者我們就透過指令並依序輸入資訊(或按enter帶入預設即可)後建立我們的package.json檔案</p>
<pre><code>$ npm init
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/packagejson.png" alt="package.json"></p>
<h4 id="一鍵安裝指令如下"><a href="#一鍵安裝指令如下" class="headerlink" title="一鍵安裝指令如下"></a>一鍵安裝指令如下</h4><pre><code>$ npm install --save express-react-views react react-dom express
</code></pre><h4 id="或是我們一步步解說"><a href="#或是我們一步步解說" class="headerlink" title="或是我們一步步解說:"></a>或是我們一步步解說:</h4><p>接著用NPM來安裝Express模組(安裝 Node 模組時，如果指定了 –save 選項，則會將這些模組新增至 package.json 檔中的 dependencies 清單。之後，當您在該目錄中執行 npm install 時，就會自動安裝相依關係清單中的模組)。</p>
<pre><code>$ npm install express --save
</code></pre><p>我們這邊要修改一下scripts裡面的test，讓我們執行test指令的時候可以幫我們成功運行NodeJS指定的主程式</p>
<pre><code>&quot;test&quot;: &quot;node app.js&quot;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/addexpress.png" alt="addexpress"></p>
<p>接著我們新增一個app.js的檔案作為我們預設的主程式，在這邊我們先簡單用3000 port來起一個Express網頁程式並顯示Hello World!</p>
<pre><code>var express = require(&apos;express&apos;);
var app = express();

app.get(&apos;/&apos;, function (req, res) {
  res.send(&apos;Hello World!&apos;);
});

app.listen(3000, function () {
  console.log(&apos;Example app listening on port 3000!&apos;);
});
</code></pre><p>然後我們回到Command Line輸入透過前面設定好的test指令將我們的Express運行起來</p>
<pre><code>$ npm test
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/helloworld.png" alt="helloworld"></p>
<p>最後我們安裝ReactJS套件，這邊要安裝react與react-dom</p>
<pre><code>$ npm install --save react react-dom
</code></pre><p>然後我們新增一個index.html並放入以下內容後儲存，這邊我們可以直接透過瀏覽器先檢視一下呈現是否如預期</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;React Test&lt;/title&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
    &lt;script&gt;
        var Demo = React.createClass({
                displayName: &quot;HelloMessage&quot;,
                render: function() {
                    return React.createElement(&quot;div&quot;, null, &quot;Hello, world!I am a React App &quot;, null);
                }
            }),
            mountNode = document.getElementById(&apos;app&apos;);

        React.render(React.createElement(Demo, null), mountNode);
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/reacthelloworld.png" alt="helloworld"></p>
<p>目前我們已經成功的把Express與ReactJS分別成功執行了，接下我們就來調整一下把他們合為一體吧。</p>
<p>首先我們稍微調整一下我們目錄結構，讓它們可以分別註冊在不同的資料夾內自動繫結到我們的專案中，請直接參考Express的<a href="http://expressjs.com/en/starter/generator.html" target="_blank" rel="external">Express application generator</a>，以下為建立出來的結構。</p>
<p>接著安裝Express-react-views套件並修改一下原本的app.js，將Express設定ReactJS當作加入的view engines修改內容如下:</p>
<pre><code>$ npm install --save Express-react-views
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/reactappjs.png" alt="expressreactview"></p>
<p>在原本的app.js中移除Jade並加入react為預設View Engine</p>
<pre><code>app.set(&apos;view engine&apos;, &apos;jsx&apos;);
app.engine(&apos;jsx&apos;, require(&apos;express-react-views&apos;).createEngine());
</code></pre><p>將我們剛剛寫的index.html寫成jsx放到views下面</p>
<pre><code>var React = require(&apos;react&apos;);

var AppComponent = React.createClass({
    render: function() {
        return (
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                        &lt;title&gt;React Test&lt;/title&gt;
                        &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
                        &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
                        &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
                        &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                        &lt;div id=&quot;app&quot;&gt;
                        &lt;/div&gt;
                        &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/demo.jsx&quot;&gt;&lt;/script&gt;   
                    &lt;/body&gt;
                &lt;/html&gt;
            );
    }
});

module.exports = AppComponent;
</code></pre><p>接著我們再來組合先前的HelloMessage component轉換成jsx格式，並將原本的內容貼入後做下面修改後存至demo.jsx:</p>
<pre><code>var Demo = React.createClass({
    render: function() {
        return (
               &lt;div&gt;
                    Hello, world!I am a React App.
                &lt;/div&gt;
            );
    }
});

ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&apos;app&apos;));
</code></pre><p>檢視一下我們的Package.json最後的樣子</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/packagejson2.png" alt="package2.json"></p>
<p>開發需求前我們重新檢視一下目前的專案結構</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/Folder.png" alt="folder"></p>
<p>到這邊，我們已經從無到有的建立了專案的底層，接下來就讓我們來開發這次的需求吧</p>
<h3 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h3><p>這邊只有一個需求是將目前的時間顯示到html的title裡面，這邊我們會使用javascripts目錄裡面的date-helper.js來幫我們。</p>
<pre><code>&apos;use strict&apos;;
var helper = {};
helper.getShortDatetime = function() {
    var datetime = new Date();
    return [datetime.getFullYear(),
        (datetime.getMonth() + 1),
        datetime.getDate()
    ].join(&apos;/&apos;) + &apos; &apos; + [
        datetime.getHours(),
        datetime.getMinutes(),
        datetime.getSeconds()
    ].join(&apos;:&apos;);
}

module.exports = helper;
</code></pre><p>將寫的元件引入直接使用<strong>getShortDatetime</strong>來顯示在title後面，修改index.jsx內容如下:</p>
<pre><code>var React = require(&apos;react&apos;);
var dateHelper = require(&apos;../public/javascripts/date-helper&apos;);

var IndexView = React.createClass({
       render: function() {
           return (
                   &lt;html&gt;
                       &lt;head&gt;
                           &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                           &lt;title&gt;{dateHelper.getShortDatetime()} &lt;/title&gt;
                           &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
                           &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
                           &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
                           &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                       &lt;/head&gt;
                       &lt;body&gt;
                           &lt;div id=&quot;app&quot;&gt;
                           &lt;/div&gt;
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/date-helper.js&quot;&gt;&lt;/script&gt;  
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/demo.jsx&quot;&gt;&lt;/script&gt;   
                       &lt;/body&gt;
                   &lt;/html&gt;
               );
       }
   });

module.exports = IndexView;
</code></pre><p>接著再次將網站運行就可以發現title已經被置換了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/title.png" alt="title"></p>
<h3 id="Frontend"><a href="#Frontend" class="headerlink" title="Frontend"></a>Frontend</h3><p>這邊我們同樣將date-helper.js載入後在demo.jsx頁面上顯示我們的時間，內容如下:</p>
<pre><code>var dateHelper = require(&apos;./date-helper.js&apos;);
var Demo = React.createClass({

    getInitialState: function() {
        return {
            dateTime : dateHelper.getShortDatetime()
        };
    },

    render: function() {
        return (
                &lt;div&gt;
                    &lt;p&gt;
                        Hello, world!I am a React App.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Time : {this.state.dateTime}
                    &lt;/p&gt;
                &lt;/div&gt;
            );
    }
});

ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&apos;app&apos;));
</code></pre><p>這次卻出現了JS Error</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/module%20error.png" alt="error"></p>
<p>主要是因為模組化是NodeJS預先就有支援的架構，但ReactJS如果要支援這樣的架構需要透過其他方式達成。這邊示範用Webpack來達成。</p>
<h3 id="加入Webpack與Babel"><a href="#加入Webpack與Babel" class="headerlink" title="加入Webpack與Babel"></a>加入Webpack與Babel</h3><p>安装 Webpack：</p>
<pre><code>npm install -g webpack
</code></pre><p>Webpack 會載入 webpack.config.js 的設定文件來執行。 如果要編譯 JSX，則需安装對應的 loader，這邊我們使用babel-loader與react-hot-loader:     </p>
<pre><code>npm install babel-core babel-loader babel-preset-es2015 babel-preset-stage-0 babel-preset-react react-hot-loader --save-dev
</code></pre><p>新增一份 webpack.config.js ，並將 loaders 指定 babel-loader 編譯副檔名為 .js 或者 .jsx 的檔案，這樣你就可以在這兩種類型的文件中自由使用 JSX 和 ES6 了(這邊避免脫離主題暫時先不講ES6)。</p>
<pre><code>var path = require(&apos;path&apos;);

module.exports = {
    entry: &apos;./src/entry.js&apos;,
    output: {
        path: path.join(__dirname, &apos;/public/javascripts&apos;),
        filename: &apos;bundle.js&apos;
    },
    resolve: {
        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]
    },
    module: {
        loaders: [
            { 
                test: /\.js|jsx$/, 
                exclude: /(node_modules)/, 
                loaders: [
                        &apos;react-hot&apos;,
                        &apos;babel?presets[]=stage-0,presets[]=react,presets[]=es2015&apos;
                    ]
            }
        ]
    }
}
</code></pre><p>接者我們調整一下我們的demo.jsx與date-help.js的路徑，並修改一下載入的位置</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/Folder2.png" alt="folder2"></p>
<p>entry.js則是我們希望webpack載入的入口，這邊我們可以開始加入我們的套件讓他做載入</p>
<pre><code>require(&apos;react&apos;);
require(&apos;react-dom&apos;);
require(&apos;./components/demo.jsx&apos;);
require(&apos;./helper/date-helper.js&apos;);
</code></pre><p>設定完成後可以執行webpack看一下是否正確產出bundle.js到指定目錄</p>
<pre><code>webpack 
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/webpack%20success.png" alt="webpack"></p>
<p>或是監聽編譯指令，動態載入編譯來加速開發</p>
<pre><code>webpack -d --watch
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/webpack%20watch%20success.png" alt="webpack watch"></p>
<p>當編譯成功後我們在使用npm start來啟動我們的網頁看一下畫面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/react%20using%20helper.png" alt="page"></p>
<p>因為我們這邊已經將frontend所有js/jsx打包成一個bundle.js，所以我們也可以將原本index.jsx所載入的套件移除了</p>
<pre><code>var React = require(&apos;react&apos;);
var dateHelper = require(&apos;../src/helper/date-helper&apos;);

var IndexView = React.createClass({
       render: function() {
           return (
                   &lt;html&gt;
                       &lt;head&gt;
                           &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                           &lt;title&gt;{dateHelper.getShortDatetime()} &lt;/title&gt;
                           &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                       &lt;/head&gt;
                       &lt;body&gt;
                           &lt;div id=&quot;app&quot;&gt;
                           &lt;/div&gt;
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/bundle.js&quot;&gt;&lt;/script&gt;   
                       &lt;/body&gt;
                   &lt;/html&gt;
               );
       }
   });

module.exports = IndexView;
</code></pre><h3 id="Updated-On-The-Fly"><a href="#Updated-On-The-Fly" class="headerlink" title="Updated On The Fly"></a>Updated On The Fly</h3><p>這次我們要加入ReactJs的更新事件，讓時間動態在頁面更新。內容如下:</p>
<pre><code>var React = require(&apos;react&apos;);
var ReactDOM = require(&apos;react-dom&apos;);
var dateHelper = require(&apos;../helper/date-helper.js&apos;);

var Demo = React.createClass({

    getInitialState: function() {
        return {
            dateTime : dateHelper.getShortDatetime()
        };
    },

    tick: function() {
        console.log(&apos;test&apos;);
        this.setState({dateTime : dateHelper.getShortDatetime()});
    },

    componentDidMount: function() {
        this.interval = setInterval(this.tick, 1000);
    },

    componentWillUnmount: function() {
        clearInterval(this.interval);
    },

    render: function() {
        return (
                &lt;div&gt;
                    &lt;p&gt;
                        Hello, world!I am a React App.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Time : {this.state.dateTime}
                    &lt;/p&gt;
                &lt;/div&gt;
            );
    }
});
</code></pre><p>ReactDOM.render(<demo>, document.getElementById(‘app’));</demo></p>
<p>最後我們把我們的webpack整合到npm start指令裡面，稍微修改一下package.json如下:</p>
<pre><code>&quot;scripts&quot;: {
    &quot;start&quot;: &quot;webpack &amp;&amp; node ./bin/www&quot;
 }
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/packagejson3.png" alt="update start"></p>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>過程當中我們只運用了兩種語言HTML+JavaScript幫我們完成所有的功能，而其中我們學習如何使用Express與ReactJS這兩個框架以及運用統一的模組化方法Webpack+Babel協助我們開發，而這些都只專注在使用一種語言 - JavaScript。</p>
<h2 id="Isomorphic-JavaScript-VS-Universal-JavaScript"><a href="#Isomorphic-JavaScript-VS-Universal-JavaScript" class="headerlink" title="Isomorphic JavaScript VS Universal JavaScript"></a>Isomorphic JavaScript VS Universal JavaScript</h2><p>使用同一個開發語言做到跨類型的應用程式開發也是Universal JavaScript的核心精神。</p>
<p>不同於Isomorphic JavaScript所強調網頁開發前後端的<em>共構部分</em>可以抽出來被重複使用，Universal JavaScript希望除了網頁應用程式之外，手機或是桌面應用程式是否也可以應用同一個語言做開發，減少跨語言的障礙並且加速開發。</p>
<p>而JavaScript也同時能達到這兩個架構與精神，有興趣的朋友除了瞭解本篇的NodeJS與ReactJS外以下提供不同情境的整理了幾個Framework可以參考:</p>
<h3 id="For-Mobile-Application-Android-iOS"><a href="#For-Mobile-Application-Android-iOS" class="headerlink" title="For Mobile Application(Android, iOS)"></a>For Mobile Application(Android, iOS)</h3><ul>
<li><a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a><ul>
<li>Learn once, write Web and mobile apps with React</li>
<li>Built on React Native: Facebook(iOS, Android), Facebook Ads Manager(iOS, Android), QQ(Android), CBS Sports Franchise Football(Android)…etc</li>
</ul>
</li>
</ul>
<h3 id="For-Disktop-Application-Windows-Mac-Linux"><a href="#For-Disktop-Application-Windows-Mac-Linux" class="headerlink" title="For Disktop Application(Windows, Mac, Linux)"></a>For Disktop Application(Windows, Mac, Linux)</h3><ul>
<li><a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a><ul>
<li>Ship more with less code, Build apps for any device, Integrate technologies you already use</li>
<li>Built on Electron: Atom, Slack, VS Code, Kitematic, Postman…etc </li>
</ul>
</li>
</ul>
<p>是的，跟其他同類型的framework相比，從上面幾個開發出來的Application看來這些技術不是只用在demo或是POC而已!</p>
<p>如果對於React Native有興趣可以參考最近網友分享的這篇文章</p>
<ul>
<li><a href="http://blog.blackbing.net/post/2016/07/24/we-developed-cnyes-app-with-react-native" target="_blank" rel="external">我們用 react-native 開發鉅亨網 app</a></li>
</ul>
<p>想一步步把ReactJS學好的朋友可以關注<a href="https://kdchang.gitbooks.io/react101/" target="_blank" rel="external">從零開始學 ReactJS（ReactJS 101）</a>，作者群之後會陸續從開發環境到開發流程都一步步地帶你學習。</p>
<h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20160724/go%20home.jpg" alt="gohome"></p>
<p>Isomorphic JavaScript的架構則沿用了這樣的精神幫我們整合前後端開發把可以共用的程式重用來達到Do less but get more(=&gt;多點穩定+少點線上支援+早點回家).</p>
<p>這邊也推薦一個台灣Nodejs好手自己寫的isomorphic框架給大家，<a href="http://fred-zone.blogspot.tw/2015/11/lantern-isomorphic.html" target="_blank" rel="external">Lantern 專案：快速打造屬於自己的 Isomorphic 網站服務</a></p>
<p>如果你的專案是用Angular2開發的也別擔心，這邊也有一個官方結合NodeJS或Asp.net Core的類Isomophic框架可以參考，<a href="https://github.com/angular/universal" target="_blank" rel="external">Universal Angular 2</a>.</p>
<p>在現代網頁應用程式開發裡，JavaScript的重要性越來越高了。從一開始的腳本語言讓外人搞不清楚與Java的差別，而後幫我們處理簡單的網頁呈現的邏輯與簡單的操作跑馬燈效果或是畫面驗證等邏輯，經過了jQuery的興起讓我們知道原來光靠JavaScript我們就能幫網頁做到這麼多效果與彈性，而到2009年NodeJS的出現後有不少的企業將他們的網站的後端服務改用JavaScript來取代PHP, Python, Ruby等Interpreted language為了達到同一個開發語言來加速應用，加上Angular與React等front-end framework的出現讓我們更有方法的在開發應用程式。</p>
<p>Isomorphic 一直是 Node.js 開發者的夢想，如果有一個全新的專案需要做網頁應用程式且希望用JavaScript當作主要的開發語言的話不妨就試試看這樣的架構吧!</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/" target="_blank" rel="external">Airbnb: Isomorphic JavaScript: The Future of Web Apps</a></li>
<li><a href="https://strongloop.com/strongblog/node-js-react-isomorphic-javascript-why-it-matters/" target="_blank" rel="external">How to Implement Node + React Isomorphic JavaScript &amp; Why it Matters</a></li>
<li><a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js" target="_blank" rel="external">Build A Real-Time Twitter Stream with Node and React.js</a></li>
<li><a href="https://medium.com/@ghengeveld/isomorphism-vs-universal-javascript-4b47fb481beb#.igikqp97e" target="_blank" rel="external">Isomorphism vs Universal JavaScript</a></li>
<li><a href="http://jmfurlott.com/tutorial-setting-up-a-simple-isomorphic-react-app/" target="_blank" rel="external">Tutorial: Setting Up a Simple Isomorphic React app</a></li>
<li><a href="https://bensmithett.github.io/going-isomorphic-with-react/" target="_blank" rel="external">Going isomorphic with react</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="NodeJS" scheme="http://blackie1019.github.io/tags/NodeJS/"/>
    
      <category term="React" scheme="http://blackie1019.github.io/tags/React/"/>
    
      <category term="isomorphic" scheme="http://blackie1019.github.io/tags/isomorphic/"/>
    
  </entry>
  
  <entry>
    <title>GitLab Build up</title>
    <link href="http://blackie1019.github.io/2015/11/05/gitlab-setup/"/>
    <id>http://blackie1019.github.io/2015/11/05/gitlab-setup/</id>
    <published>2015-11-05T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>This is a step by step tourist for how to build up a GitLab from Bitnami VM</p>
<a id="more"></a>
<h2 id="GitLab-from-Bitnami"><a href="#GitLab-from-Bitnami" class="headerlink" title="GitLab from Bitnami"></a>GitLab from Bitnami</h2><p><a href="https://bitnami.com/stack/gitlab/virtual-machine" target="_blank" rel="external">Download</a></p>
<p><a href="https://wiki.bitnami.com/Applications/BitNami_GitLab?highlight=gitlab" target="_blank" rel="external">Wiki - BitNami GitLab</a></p>
<h2 id="General-Setup"><a href="#General-Setup" class="headerlink" title="General Setup"></a>General Setup</h2><ol>
<li><p>Update your apache for GitLab host to example.com</p>
<pre><code>$ sudo /opt/bitnami/apps/gitlab/bnconfig --machine_hostname example.com
</code></pre></li>
<li><p>Add example.com to host</p>
<pre><code>127.0.0.1    example.com
</code></pre></li>
<li><p>Update GitLab setting to correct host display</p>
<pre><code>$ sudo vi /opt/bitnami/apps/gitlab/htdocs/config/gitlab.yml
host: example.com
</code></pre></li>
<li><p>restart(need do this action once configuration change)</p>
<pre><code>$ sudo /opt/bitnami/ctlscript.sh restart
</code></pre></li>
</ol>
<h2 id="SSH-Setup"><a href="#SSH-Setup" class="headerlink" title="SSH Setup"></a>SSH Setup</h2><ol>
<li><p>Server open SSH setting</p>
<pre><code>$ sudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf
$ sudo start ssh
</code></pre></li>
<li><p>VM open port forwarding</p>
<p> Setting&gt;Network&gt;Port Forwarding</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Git%26GitLab/Port%20Forwarding.png" alt="port"></p>
</li>
<li><p>Client generate Key-pairs</p>
<ul>
<li><p>Linux &amp; Mac</p>
<pre><code>$ sudo ssh-keygen
</code></pre></li>
<li><p>Windows</p>
<p>  <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">PuTTY</a></p>
</li>
</ul>
</li>
<li><p>Bidning Public key to GitLab account</p>
<p> SSH Keys&gt;Add</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Git%26GitLab/ssh%20public.png" alt="SSH public"></p>
</li>
<li><p>Open SourceTree and clone with SSH protocal</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Git%26GitLab/Clone%20with%20ssh.png" alt="Clone wih SSH"></p>
<p> <em>Windows need add private key to computer first, can use <a href="http://the.earth.li/~sgtatham/putty/latest/x86/pageant.exe" target="_blank" rel="external">Pageant</a></em></p>
</li>
</ol>
<h2 id="Get-file-from-Host-to-Client-VM-using-SSH-protocal"><a href="#Get-file-from-Host-to-Client-VM-using-SSH-protocal" class="headerlink" title="Get file from Host to Client VM using SSH protocal"></a>Get file from Host to Client VM using SSH protocal</h2><ul>
<li>Mac &amp; Windows<br>  <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwiN5OSiz_nIAhUGXqYKHZMABNQ&amp;url=https%3A%2F%2Ffilezilla-project.org%2Fdownload.php&amp;usg=AFQjCNEVBwvn5iTFmb5JyjzLrD0yKQsMGg&amp;sig2=dep538VPLoemq1TctetF6g" target="_blank" rel="external">FileZilla - Client</a></li>
<li>Windows<br>  <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwjv1vHDz_nIAhXlJKYKHRzKCFs&amp;url=https%3A%2F%2Fwinscp.net%2Feng%2Fdownload.php&amp;usg=AFQjCNFGy0DbS4A__xFv8ToHgJYyYD3BOw&amp;sig2=HHP95wNoiU9FmIfyCVCzww" target="_blank" rel="external">WinSCP</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a step by step tourist for how to build up a GitLab from Bitnami VM&lt;/p&gt;
    
    </summary>
    
      <category term="Source Control" scheme="http://blackie1019.github.io/categories/Source-Control/"/>
    
    
      <category term="Git" scheme="http://blackie1019.github.io/tags/Git/"/>
    
      <category term="GitLab" scheme="http://blackie1019.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>FLUX架構介紹</title>
    <link href="http://blackie1019.github.io/2015/04/13/flux-intro/"/>
    <id>http://blackie1019.github.io/2015/04/13/flux-intro/</id>
    <published>2015-04-13T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>FLUX是一個由Facebook提出來的開發架構(FLUX 是一個 Pattern 而不是一個正式的框架)，目的是在解決所謂的MVC在大型商業網站所存在的問題，把沒有條理跟亂七八糟的架構做一個流程規範的定義。</p>
<a id="more"></a>
<h2 id="About-FLUX"><a href="#About-FLUX" class="headerlink" title="About FLUX"></a>About FLUX</h2><p>以下內容參考<a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">What is Flux?</a> 這篇的介紹很多，有興趣請先到原文出處學習與感謝分享。</p>
<p>這邊先提到一下兩個主軸:</p>
<h3 id="FLUX希望作到的事情"><a href="#FLUX希望作到的事情" class="headerlink" title="FLUX希望作到的事情"></a>FLUX希望作到的事情</h3><ul>
<li>Use explicit data instead of derived data</li>
<li>Separate data from view state</li>
</ul>
<h3 id="FLUX希望帶來的好處"><a href="#FLUX希望帶來的好處" class="headerlink" title="FLUX希望帶來的好處"></a>FLUX希望帶來的好處</h3><ul>
<li>Improved data consistency</li>
<li>Easier to pinpoint root of a bug</li>
<li>More meaingful unit tests</li>
</ul>
<p>解說可以看一下這部影片Facebook官方用自己的網站解說FLUX的起源與MVC在FB遇到的問題(24分前是FLUX, 24後是ReactJS)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nYkdrAPrdcw?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v" frameborder="0" allowfullscreen></iframe>

<h2 id="MVC與遇到的問題"><a href="#MVC與遇到的問題" class="headerlink" title="MVC與遇到的問題"></a>MVC與遇到的問題</h2><p>在介紹FLUX前，先讓大家了解一下目前普遍在使用的MVC架構</p>
<p><img src="http://fluxxor.com/images/mvc-simple.png" alt="A simple MVC flow"></p>
<p>上面這是一個MVC架構所定義的流程與各流程的內容, 我們將一個網頁程式分為三項組成的要素:</p>
<ul>
<li>Controller</li>
<li>Model</li>
<li>View</li>
</ul>
<p>MVC普遍被大家用在目前的網站開發專案當中，因為它簡單方便的幫我們分別定義了各層需要異動的地方，把關注點隔離開來(separation of concerns，SOC)。但隨這著專案的Controller,Model與View變多沒有限制的流程也讓他產生了一些問題。</p>
<p><img src="http://fluxxor.com/images/mvc-complex.png" alt="A more complex MVC flow"></p>
<p>而上面是一個複雜的MVC流程，這也是比較貼近我們實務上大家遇到的架構</p>
<p>比較起來很快就發現了一點，當我們功能越多，提供的Controller, Model, View關聯愈複雜時，往往會忘了哪一個連去哪一個，這會讓我們的架構定義的越來越發散，久了就不知道什麼才是正確的架構，而這也會讓我們難以維護跟修改，甚至擴大了測試範圍…。</p>
<p>傳統的雙向資料綁定會造成連鎖更新，不容易去預測一個單一互動所造成的改變結果，這也是為什麼擴大了測試範圍的原因。<br>原文如下:</p>
<blockquote>
<p>We found that two-way data bindings led to cascading updates, where changing one object led to another object changing, which could also trigger more updates. As applications grew, these cascading updates made it very difficult to predict what would change as the result of one user interaction. When updates can only change data within a single round, the system as a whole becomes more predictable.</p>
</blockquote>
<h2 id="FLUX介紹"><a href="#FLUX介紹" class="headerlink" title="FLUX介紹"></a>FLUX介紹</h2><p>接著我們先來介紹FLUX的中心思想打造單一的資料流進行方式(one-way data flow)，相對於MVC只定義了三個角色的功能與關係，FLUX更明確的定義了一個資料進行的方式，使得大家更容易遵守規則。</p>
<ul>
<li>####Actions<ul>
<li>Helper methods that facilitate passing data to the Dispatcher</li>
</ul>
</li>
<li>####Dispatcher<ul>
<li>Receives actions and broadcasts payloads to registered callbacks</li>
</ul>
</li>
<li>####Stores<ul>
<li>Containers for application state &amp; logic that have callbacks registered to the dispatcher</li>
</ul>
</li>
<li>####Controller Views&amp;View  <ul>
<li>React Components that grab the state from Stores and pass it down via props to child components.</li>
</ul>
</li>
</ul>
<p>這邊FLUX使用了Dispatcher這樣的一個唯一物件(singleton)來管理一到多個Store，而每個Store可對應一個View的概念來提供呈現所需資料，而當需要增加view的互動功能時，則透過向Dispatcher註冊Action的方式來達到事件的觸發。 整個資料的處理流程就改變為下面的樣貌：</p>
<p><img src="http://fluxxor.com/images/flux-simple.png" alt="A simple flux flow"></p>
<p>這邊要注意，因為FLUX的大前提是建立一個單一的資料進行方式，所以非常不建議為了view的顯示而跳過步驟直接修改Store，這樣又會讓架構跟先前的MVC提的遇到一樣不明確的問題。</p>
<p>與頁面上各控制項的互動如下圖</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/FLUX%2BReactJS/01/FLUX%20flow.png" alt="FLUX control flow"></p>
<p>在FLUX架構上，要避免從Store外部直接改變Store。我們可以透過使用 window.DispatchEvent 送出CustomEvent的方式，並在Store中接收CustomEvent來做到。 簡單來講就是維持他單一變化的flow，避免架構上出現壞味道。</p>
<h2 id="Cowork-with-Web-service"><a href="#Cowork-with-Web-service" class="headerlink" title="Cowork with Web service"></a>Cowork with Web service</h2><p>這邊找到一張先前看到的完整解釋FLUX架構如何跟Web Service的流程圖，下圖顯示了一個資料如何從Web service拿到後到畫面顯示以及如何互動去取得其他資料來呈現。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/FLUX%2BReactJS/01/archieture.png" alt="with service"></p>
<h2 id="手工打造FLUX架構"><a href="#手工打造FLUX架構" class="headerlink" title="手工打造FLUX架構"></a>手工打造FLUX架構</h2><p>這邊就用JS原生的語法來建立一個簡單的FLUX架構的範例吧</p>
<p><a class="jsbin-embed" href="http://jsbin.com/sutuku/20/embed?js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>上面這範例是參考Gasolin大大的文章實作的，請參考<a href="http://blog.gasolin.idv.tw/2014/11/flux-javascript.html" target="_blank" rel="external">使用 FLUX 架構的概念，漸進改善一般 Javascript 程式碼的組織方式</a>這篇好文。</p>
<p>從範例來看Store 與 App 可以分開來測試，這對大型App是很重要的，每個測試環節應該確保該function可以運作。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看起來FLUX真的很單純，用事件註冊與驅動指派的方式來統一管理資料處理的流程，不讓架構在大量增加時有所崩壞，而且應該可以是一種蠻適合JS的開發模式，又可透過原生的JS實作(無論你用什麼框架應該都可以實作)。</p>
<p>在FLUX架構下，搭配View這邊頻繁DOM異動的做法就是Always Re-render! 這也是FB搭配FLUX推出的另外一個JS框架<a href="https://facebook.github.io/react/" target="_blank" rel="external">ReactJS</a>提出Virtual DOM的概念，When data changes, React re-renders the component 透過這樣的方式來改善頻繁的DOM異動。</p>
<p>如果對FLUX有心得的朋友也麻煩指導小弟一下，看看是不是有什麼誤解，也感謝大家的指教。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">What is Flux?</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/05/facebook-mvc-flux" target="_blank" rel="external">Facebook：MVC不适合大规模应用，改用Flux</a></li>
<li><a href="http://blog.roy.tw/2015/02/05/introduction-of-flux" target="_blank" rel="external">Flux 介紹教學</a></li>
<li><a href="http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html" target="_blank" rel="external">Flux: Actions and the Dispatcher</a></li>
<li><a href="https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture" target="_blank" rel="external">Getting to know FLUX the React js architecture</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FLUX是一個由Facebook提出來的開發架構(FLUX 是一個 Pattern 而不是一個正式的框架)，目的是在解決所謂的MVC在大型商業網站所存在的問題，把沒有條理跟亂七八糟的架構做一個流程規範的定義。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="React" scheme="http://blackie1019.github.io/tags/React/"/>
    
      <category term="FLUX" scheme="http://blackie1019.github.io/tags/FLUX/"/>
    
  </entry>
  
  <entry>
    <title>function expression(函式陳述式) VS declaration (函式運算式)</title>
    <link href="http://blackie1019.github.io/2015/04/09/javascript-function-expression-vs-declaration/"/>
    <id>http://blackie1019.github.io/2015/04/09/javascript-function-expression-vs-declaration/</id>
    <published>2015-04-09T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>先前寫過一篇<a href="http://www.dotblogs.com.tw/blackie1019/archive/2014/01/14/139926.aspx" target="_blank" rel="external">[Javascript]Call method(呼叫函式)</a>關於函數宣告,這邊進階一下做一個比較。</p>
<a id="more"></a>
<p>在開始前, 先來回憶一下如何自定一個JS函數</p>
<h2 id="How-to-create-JS-custom-function"><a href="#How-to-create-JS-custom-function" class="headerlink" title="How to create JS custom function"></a>How to create JS custom function</h2><h3 id="第一種-declaration-函式運算式"><a href="#第一種-declaration-函式運算式" class="headerlink" title="第一種 - declaration (函式運算式)"></a>第一種 - declaration (函式運算式)</h3><pre><code>function callTest(){
    console.log(123);
}

callTest();
</code></pre><h3 id="第二種-function-expression-函式陳述式"><a href="#第二種-function-expression-函式陳述式" class="headerlink" title="第二種 - function expression(函式陳述式)"></a>第二種 - function expression(函式陳述式)</h3><pre><code>var callTest=function(){
    console.log(123);
}

callTest();
</code></pre><p>大致上常見的有上面兩種, 其中第二種的變形使用很多變化，下面歸納兩點差異讓大家分辨</p>
<h2 id="What’s-different"><a href="#What’s-different" class="headerlink" title="What’s different"></a>What’s different</h2><ul>
<li><p>1</p>
<p>  function declaration (函式運算式)最大差異就是呼叫自定函式時可在function前，如剛剛的第一種我們可以改成下面的樣子依舊可以正常執行</p>
<pre><code>callTest();

function callTest(){
    console.log(123);
}
</code></pre><p>  但如果改用function expression(函式陳述式)成下面這樣就會發現出現問題(變數未宣告)</p>
<pre><code>callTest();

var callTest=function(){
    console.log(123);
}
</code></pre></li>
</ul>
<ul>
<li><p>2</p>
<p>  而在定義上，declaration (函式運算式)只要被定義過後就無法從記憶體中刪除並回收，而function expression(函式陳述式)則是正常的跟著變數生命週期運作, 所以可能定義完後則直接被回收或是跟著變數的參考被移除時就結束等待GC回收,如下就是直接被回收與變數被回收的範例</p>
<ul>
<li><p>declaration (函式運算式)直接被回收</p>
<pre><code>（function(val){
    console.log(val);
 })(123);
</code></pre></li>
<li><p>function expression(函式陳述式)變數被回收</p>
<pre><code>var callTest=function(){
    console.log(123);
}

callTest();
callTest=null;
callTest();
</code></pre></li>
</ul>
</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完定義跟比較後應該很明確的可以知道以後什麼情況要用function expression與declaration了，不要再誤用或以為都一樣摟！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前寫過一篇&lt;a href=&quot;http://www.dotblogs.com.tw/blackie1019/archive/2014/01/14/139926.aspx&quot;&gt;[Javascript]Call method(呼叫函式)&lt;/a&gt;關於函數宣告,這邊進階一下做一個比較。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="Basic JS" scheme="http://blackie1019.github.io/tags/Basic-JS/"/>
    
  </entry>
  
  <entry>
    <title>Angular FullStack developer with Yeoman</title>
    <link href="http://blackie1019.github.io/2015/03/27/angular-fullstack-developer-with-yeoman/"/>
    <id>http://blackie1019.github.io/2015/03/27/angular-fullstack-developer-with-yeoman/</id>
    <published>2015-03-27T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.659Z</updated>
    
    <content type="html"><![CDATA[<p>這系列文章會用Yeoman的angular-fullstack來做介紹。</p>
<a id="more"></a>
<p>開發環境是Mac+sublimeText</p>
<p>因為是MEAN架構主要會用到以下幾項</p>
<ul>
<li>MongoDB</li>
<li>Express</li>
<li>Angular</li>
<li>NodeJS</li>
<li>Grunt</li>
<li>Bower</li>
</ul>
<p>額外會用到的有之後會依序介紹。接下來讓我們從實際來上手一次，如果想先知道結果會長怎樣可以先去<a href="http://fullstack-demo.herokuapp.com/" target="_blank" rel="external">Demo</a>這邊瞧瞧。</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul>
<li>先安裝好NodeJs(with npm)</li>
<li><p>安裝 yeoman</p>
<pre><code>npm install -g yo
</code></pre></li>
<li><p>安裝 generator(<a href="https://github.com/DaftMonk/generator-angular-fullstack" target="_blank" rel="external">angular-fullstack</a>)</p>
<pre><code>npm install -g generator-angular-fullstack
</code></pre></li>
<li><p>建立一個資料夾然後進入該資料夾的路徑內</p>
<pre><code>mkdir my-new-project &amp;&amp; cd $_
</code></pre></li>
<li><p>使用yeoman建立新專案</p>
<pre><code>yo angular-fullstack [app-name]
</code></pre></li>
</ul>
<p>建立的過程需要一點時間而且他會幫你更新相依性套件，這邊要稍微注意一下權限，有必要的話記得把npm globle安裝路徑的權限設定為可讀</p>
<ul>
<li><p>這邊我們沒有要在本機建立MongoDB，所以我們使用<a href="https://mongolab.com/databases/webapp" target="_blank" rel="external">MongoLab</a>來幫我們建置，請在註冊好帳號後新增一個Database跟新增一個Users來讓他連線</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/001.png" alt="001"></p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/002.png" alt="002"></p>
</li>
</ul>
<h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><p>建立完後我們先來看一下整個專案架構</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/01.png" alt="01"></p>
<p>有玩過一下上面的Demo那你大概會知道我們產生的這個樣品會有兩個跟DB有關的功能</p>
<ul>
<li>註冊/登入 user</li>
<li>新增/移除 thing</li>
</ul>
<p>所以你可以在api資料夾下面找到thing與user資料夾，裡面就是用Mongoose幫你建立的資料存取</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/03.png" alt="03"></p>
<p>而我們現在就要把這個範例的連線換到我們剛剛自己註冊的MongoLab上面，這邊你會需要修改一下config\environment資料夾裡面的一些連線設定，MongoLab的uri連線格式如下：</p>
<pre><code>mongodb://&lt;dbuser&gt;:&lt;password&gt;@&lt;yourdsnumber&gt;.mongolab.com:&lt;yourdbport&gt;/&lt;databasename&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/04.png" alt="04"></p>
<p>以上設定完成後你就可以透過下面指令在run起你的網站</p>
<pre><code>grunt server
</code></pre><p>此時你看到成功建立後就可以在瀏覽器輸入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a> 來看看你的網站</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/angular-fullstack/01/05.png" alt="05"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這系列文章會用Yeoman的angular-fullstack來做介紹。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="AngularJS" scheme="http://blackie1019.github.io/tags/AngularJS/"/>
    
      <category term="NodeJS" scheme="http://blackie1019.github.io/tags/NodeJS/"/>
    
      <category term="mongoDB" scheme="http://blackie1019.github.io/tags/mongoDB/"/>
    
      <category term="MAN" scheme="http://blackie1019.github.io/tags/MAN/"/>
    
      <category term="Yeoman" scheme="http://blackie1019.github.io/tags/Yeoman/"/>
    
  </entry>
  
  <entry>
    <title>javascript Floating-Point calculation</title>
    <link href="http://blackie1019.github.io/2015/02/27/javascript-floating-point-calculation/"/>
    <id>http://blackie1019.github.io/2015/02/27/javascript-floating-point-calculation/</id>
    <published>2015-02-27T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子在幫同事改一段以前的程式的時候發現Javascript在做Float數值的運算時有bug，會導致簡單的計算出問題，當下去找了一下資料有幾個處理方式整理給大家。</p>
<a id="more"></a>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>在開始前我們直接看下面的範例就知道問題在哪邊</p>
<p><a class="jsbin-embed" href="http://jsbin.com/joqutu/1/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>這邊三個簡單的計算，你可以發現前面兩個都正確，第三個結果就怪了。<br>小學的99乘法表告訴我們99是81，但這個結果的尾數竟然不是1….就知道見鬼了</p>
<p>為什麼Javascript的浮點數計算會有這樣的差異呢？</p>
<p>因為電腦沒辦法正確的顯示0.1,0.2,0.3這樣的浮點數(因為數值都是0101的組成)，所以透過0101組成浮點數時就產生了誤差。我們看到的0.1其實是已經經過進位後的結果(原先可能是0.1000000000000001這樣的值)，所以當我們做運算後就會產生更大的誤差。</p>
<p>對於浮點數的基本組成與相關問題可以參考<a href="http://floating-point-gui.de/" target="_blank" rel="external">這篇文章</a>，解釋得非常詳細。</p>
<p>這邊幫大家在Google大神的協助下找了幾張圖來參考。</p>
<p>首先一個簡單的浮點數可以分為兩部分：</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Float_mantissa_exponent.png/200px-Float_mantissa_exponent.png" alt="basic"></p>
<p>而透過二進位表示法(IEEE 754)來存放時則如下：</p>
<p><img src="http://lidia-js.kis.p.lodz.pl/ITCS/images/iee.png" alt=""></p>
<p>實際的運算邏輯flow大致可以參考下圖</p>
<p><img src="http://fourier.eng.hmc.edu/e85_old/lectures/figures/flp_addsub_block.gif" alt="flow"></p>
<h2 id="Solution-without-plugin"><a href="#Solution-without-plugin" class="headerlink" title="Solution without plugin"></a>Solution without plugin</h2><p>簡單來講我們可以用Number.prototype.toFixed()這個數值型別的function來幫我們確認要計算到多精準的小數位</p>
<p>開始前我們先參考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" target="_blank" rel="external">MDN</a>給我們的說明</p>
<h3 id="Method-of-Number"><a href="#Method-of-Number" class="headerlink" title="Method of Number"></a>Method of Number</h3><p>Implemented in JavaScript 1.5</p>
<p>ECMAScript Edition ECMAScript 3rd Edition</p>
<h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>number.toFixed( [digits] )</p>
<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p>digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.</p>
<h3 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h3><p>A string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation.</p>
<h3 id="Throws"><a href="#Throws" class="headerlink" title="Throws"></a>Throws</h3><p>RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well. TypeError If this method is invoked on an object that is not a Number.</p>
<p>如上面的說明，由於他是ECMAScript的內建語法所以我們不需要特別用什麼套件，只要確任瀏覽器支援就可以了(目前全部瀏覽器都支援)</p>
<p>我們將剛剛的一開始的三個範例改寫如下</p>
<p><a class="jsbin-embed" href="http://jsbin.com/recati/2/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>如此一來我們就可以正確地顯示浮點數運算過後的值了。</p>
<p>從解法我們發現如果用 <em>number.toFixed( [digits] ))</em> 這樣的解法需要先知道到底結果是小數點第幾位，但實務上我們有很多情況會不知道該數值到底第幾位.所以可能還要把多算出來的0給處理掉，如下：</p>
<p><a class="jsbin-embed" href="http://jsbin.com/jetizu/1/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<h2 id="Solution-using-Math-js"><a href="#Solution-using-Math-js" class="headerlink" title="Solution using Math.js"></a>Solution using Math.js</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20150227/logo.png" alt="logo"></p>
<p>這邊介紹一個方便的javascript plugin來幫大家解決數學計算的問題</p>
<p>使用上很簡單，只要記得加上math.js到你的頁面上即可，沒有其他library dependency。</p>
<p>下面就快速的把先前的範例用Math.js呈現給大家看</p>
<p><a class="jsbin-embed" href="http://jsbin.com/tagili/2/embed?html,js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>這邊可以看到透過Math.js我們就可以很簡單地取到精准度為小數點後10位的結果也不會有多餘的0，是不是很方便呢！</p>
<p>其實Math.js還有很多很酷的功能，他也支援Nodejs與其他框架使用，大家趕快把它列入專案必裝的套件吧。</p>
<p><a href="http://mathjs.org/" target="_blank" rel="external">Math.js</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>老實說學生時代只有印象中聽過浮點數計算透過二進位儲存有誤差，但我沒想到學問真的很大….也沒想到出社會還會看到這類型問題，也很感謝有遇到這樣的問題讓自已能夠在多收穫一些知識。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子在幫同事改一段以前的程式的時候發現Javascript在做Float數值的運算時有bug，會導致簡單的計算出問題，當下去找了一下資料有幾個處理方式整理給大家。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="Basic JS" scheme="http://blackie1019.github.io/tags/Basic-JS/"/>
    
  </entry>
  
  <entry>
    <title>Load testing with Visual Studio</title>
    <link href="http://blackie1019.github.io/2014/12/30/how-to-make-load-testing-with-visual-studio/"/>
    <id>http://blackie1019.github.io/2014/12/30/how-to-make-load-testing-with-visual-studio/</id>
    <published>2014-12-30T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>這邊分享一下給大家手把手(step by step)介紹一下如何建置Load Testing的專案，內容主要是我之前在公司對QA們做的training material，以英文為主，這邊如果有更好的內容會再把相關內容更新補齊上去。</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/0.jpg" alt="0"></p>
<h2 id="About-Load-Testing"><a href="#About-Load-Testing" class="headerlink" title="About Load Testing"></a>About Load Testing</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/1.png" alt="1"></p>
<h3 id="Performance-testing"><a href="#Performance-testing" class="headerlink" title="Performance testing"></a>Performance testing</h3><p>效能測試（Performance testing），效能測試的目標不是要找缺陷（bug），而是要消除瓶頸和替未來的回歸測試（regression tests）建立一個底線，執行效能測試的進行是在一個謹慎控制的量測和分析流程內，理想上軟體是在夠穩定的情況下進行測試，因此測試的過程可以很順利的進行。定義期望組對有意義的效能測試而言是必要的。</p>
<ul>
<li>Concurrent user<ul>
<li>在線的使用者或HTTP連線的期望負荷</li>
</ul>
</li>
<li>Response time<ul>
<li>允許的回應時間</li>
</ul>
</li>
</ul>
<h3 id="Stress-testing"><a href="#Stress-testing" class="headerlink" title="Stress testing"></a>Stress testing</h3><p>壓力測試（Stress testing）,藉由超出系統資源或拿走系統資源（有時被稱為「負面測試」（negative testing））的情況下測試以嘗試中斷系統，主要的目的在確保系統失效和正常地回復。</p>
<p>效能測試需要一個受控制的環境和重覆量測，壓力測試則隨興地引發混亂和不可預測，如：</p>
<ul>
<li>倍數的單位數目(Base Amount)的在線的使用者/HTTP連線數量</li>
<li>隨機地關閉和重啟網路上連接到伺服器的交換機/路由器的埠（例如透過SNMP命令）</li>
<li>關閉資料庫再開啟</li>
<li>在系統執行時重建RAID陣列</li>
<li>執行消耗網頁/資料庫伺服器資源（CPU、記憶體、磁碟、網路）的程序並確保程式可以正常執行</li>
</ul>
<h3 id="Load-testing"><a href="#Load-testing" class="headerlink" title="Load testing"></a>Load testing</h3><p>負載測試(Load testing)是效能測試與調校的一部份，在這個前題下，這意味藉由自動工具不斷地增加負載到系統，對網頁程式而言，負載被定義成在線使用者或HTTP連線。</p>
<p>定義成提供系統所能執行最大工作量下運作測試的流程，負載測試通常被稱為「容量測試」、或「壽命（longevity）/耐力（endurance）測試」。</p>
<p>負載測試的目標:</p>
<ul>
<li>揭露粗略測試的缺陷，如：記憶體控制的缺陷、記憶體洩露（leaks）、緩衝區溢位（buffer overflows）等</li>
<li>當效能測試時確保應用程式滿足效能建立的底線，這個是藉由執行回歸測試完成以確保應用程式的特定最大負載。</li>
</ul>
<h3 id="Test-Controller-and-Test-Agent"><a href="#Test-Controller-and-Test-Agent" class="headerlink" title="Test Controller and Test Agent"></a>Test Controller and Test Agent</h3><p>在Load Testing實際執行當中，你會需要透過VS去建立一個 Load Testing Solution，接著將這Solution透過Test Controller來執行，而Test Controller會去控制它底下的 Test Agent ，分配對應的主機實際去跑你所安排的腳本。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/2.jpg" alt="2"></p>
<h2 id="Create-Visual-Studio-Load-Testing-Solution"><a href="#Create-Visual-Studio-Load-Testing-Solution" class="headerlink" title="Create Visual Studio Load Testing Solution"></a>Create Visual Studio Load Testing Solution</h2><p>整個流程可以分為下列幾個步驟:</p>
<ol>
<li>Install Visual Studio 2012(need install SQL Server 2008 Express or higher)</li>
<li>Create Web Performance and Load Test solution</li>
<li>Modify and complete Web Performance Test<ul>
<li>Record action by browser</li>
<li>Remove unnecessary request item</li>
<li>Add necessary Validation Rule</li>
<li>Add Data Source and bind data to input</li>
<li>Add Context Parameters to binding URL</li>
<li>Configure response time goal, think time and other setting on each request item</li>
</ul>
</li>
<li>Added Load Test to project and added existing Web Performance Test<ul>
<li>Added New Load Test to project</li>
<li>Set Test Mix, Browser Mix, Network Mix</li>
<li>Set Load Pattern</li>
<li>Configure Run Settings</li>
</ul>
</li>
<li>Added Counter(optional)</li>
</ol>
<p>接下來一步步帶大家開始建立第一個Load Testing Solution</p>
<h3 id="Create-Web-Performance-and-Load-Test-solution"><a href="#Create-Web-Performance-and-Load-Test-solution" class="headerlink" title="Create Web Performance and Load Test solution"></a>Create Web Performance and Load Test solution</h3><p>開啟VS後選擇File&gt;New&gt;Project&gt;Web Performance and Load Test Project，建立一個新的Load Testing Solution</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/3.png" alt="3"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/4.png" alt="4"></p>
<h3 id="Add-Web-Performance-Testing"><a href="#Add-Web-Performance-Testing" class="headerlink" title="Add Web Performance Testing"></a>Add Web Performance Testing</h3><p>建立 Web Performance Testing的方法分為錄製操作行為(record action)與手動撰寫程式兩種方式，但都是透過WebRequest 這個類別來取得每一步的結果與驗證是否完成，進而達成整個Web Performance Test的建立</p>
<h4 id="Create-by-Wizard-record-action"><a href="#Create-by-Wizard-record-action" class="headerlink" title="Create by Wizard(record action)"></a>Create by Wizard(record action)</h4><p>透過錄製的方式我們可以在不用直接撰寫程式碼的過程當中建立起一系列的操作步驟，而每個步驟我們都可以去儲存Request的回傳結果或是透過一個CSV,DB塞入特定或亂數的Paramaters給Request。當然，我們也可以加上驗證標準來強化定義流程的每一步成功與失敗的準則是什麼(超過三秒沒回應或是沒有給予特定的回傳內容)</p>
<ul>
<li><p>step-1</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/5.png" alt="5"></p>
</li>
<li><p>step-2</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/6.png" alt="6"></p>
</li>
<li><p>step-3</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/7.png" alt="7"></p>
</li>
<li><p>step-4</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/8.png" alt="8"></p>
</li>
<li><p>step-5</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/9.png" alt="9"></p>
</li>
<li><p>step-6</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/10.png" alt="10"></p>
</li>
<li><p>step-7</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/11.png" alt="11"></p>
</li>
</ul>
<h4 id="Create-by-Code"><a href="#Create-by-Code" class="headerlink" title="Create by Code"></a>Create by Code</h4><p>如果我們需要每一步都做到很彈性或是大型的測試腳本，通常我們都會捨棄錄製改用直接撰寫每一個WebRequest的內容來達到更多的彈性需求。</p>
<p><strong><em>*這邊要稍微注意一下，我們可以將錄製的.webtest檔案產生CodeBase的測試腳本(.cs)，但沒辦法將任一個.cs檔案轉回.webtest。</em></strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/12.png" alt="12"></p>
<h3 id="Add-Load-Testing"><a href="#Add-Load-Testing" class="headerlink" title="Add Load Testing"></a>Add Load Testing</h3><p>接著我們開始準備我們剛剛建立測試的主要檔案(.loadtest)。每一個.loadtest檔案可以在設定包含多個.webtest(或.cs)做為要執行Load Testing時候的腳本。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/13.png" alt="13"></p>
<h4 id="Configure-Scenario-setting"><a href="#Configure-Scenario-setting" class="headerlink" title="Configure Scenario setting"></a>Configure Scenario setting</h4><p>Once you create .loadtest file, it will added default scenario and you can add more with UI(right click to add).<a href="http://msdn.microsoft.com/en-us/library/ff406966.aspx" target="_blank" rel="external">MSDN:Load Test Scenario Properties</a></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/14.png" alt="14"></p>
<ul>
<li><p><strong>STEP-1:</strong></p>
<ul>
<li>Think times are used to simulate human behavior that causes people to wait between interactions with a Web site.</li>
<li>The think profile is a setting that applies to a scenario in a load test. The setting determines whether the think times that are saved in the individual Web performance tests are used during the load test.</li>
<li><p>If you want to use think times in some Web performance tests but not in others, you must place them in different scenarios.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/15.png" alt="15"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997697.aspx" target="_blank" rel="external">MSDN:Editing Think Times to Simulate Website Human Interaction Delays in Load Tests Scenarios</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-2:</strong></p>
<ul>
<li><p>The load pattern properties specify how the simulated user load is adjusted during a load test. Visual Studio Ultimate provides three built-in load patterns: constant, step, and goal-based.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/16.png" alt="16"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997551.aspx" target="_blank" rel="external">MSDN:Editing Load Patterns to Model Virtual User Activities</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-3:</strong></p>
<ul>
<li><p>Specifies the test mix model that is used for the load test.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/17.png" alt="17"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997561.aspx" target="_blank" rel="external">MSDN:Editing the Test Mix to Specify Which Web Browsers Types in a Load Test Scenario</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997826.aspx" target="_blank" rel="external">MSDN:Editing Text Mix. Models to Specify the Probability of a Virtual User Running a Test</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-4:</strong></p>
<ul>
<li><p>Specifies the network mix for the load test. You can specify which network types to include and their load distribution.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/18.png" alt="18"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997557.aspx" target="_blank" rel="external">MSDN:Specifying Virtual Network Types in a Load Test Scenario</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-5:</strong></p>
<ul>
<li><p>Specifies the Web browser mix for the load test. You can specify different Web browser types and their load distribution.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/19.png" alt="19"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997561.aspx" target="_blank" rel="external">MSDN:Editing the Test Mix to Specify Which Web Browsers Types in a Load Test Scenario</a></p>
</li>
</ul>
</li>
</ul>
<h4 id="Configuration-Run-setting"><a href="#Configuration-Run-setting" class="headerlink" title="Configuration Run setting"></a>Configuration Run setting</h4><p>Open results of recently run tests</p>
<ul>
<li>From the VIEW menu&gt;Windows &gt; Test Results&gt; Select Run list&gt;choose the test run you want to open or choose Manage test runs to browse for a test from the Test Runs window.</li>
<li><em>(Optional)</em> In the Result list, right-click a test and choose View Results to see more -    information about that particular test.</li>
<li><em>(Optional)</em> To view test result details, including any data and diagnostic adapter attachments, choose Run Details in the toolbar.</li>
<li><em>(Optional)</em> If you have Office excel 2010 or later, you can generate with excel add-in(<a href="http://msdn.microsoft.com/en-us/library/dd997707.aspx" target="_blank" rel="external">guide</a>)</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/20.png" alt="20"></p>
<h3 id="Open-Load-Testing-Report"><a href="#Open-Load-Testing-Report" class="headerlink" title="Open Load Testing Report"></a>Open Load Testing Report</h3><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/21.png" alt="21"></p>
<h2 id="Tips-for-setting"><a href="#Tips-for-setting" class="headerlink" title="Tips for setting"></a>Tips for setting</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/22.jpg" alt="22j"></p>
<h3 id="Tip-1-–-How-to-set-User-Load-with-gradually-increased"><a href="#Tip-1-–-How-to-set-User-Load-with-gradually-increased" class="headerlink" title="Tip 1 – How to set User Load with gradually increased"></a>Tip 1 – How to set User Load with gradually increased</h3><ul>
<li>Set it on .loadtest &gt; Load Pattern</li>
<li><p>For example, to see how your server or servers perform as the user load increasing to 2,000 users, you might run a 10-hour load test using a step load pattern with the following properties:</p>
<ul>
<li>Initial User Count: 100</li>
<li>Maximum User Count: 2000</li>
<li>Step Duration (seconds): 1800</li>
<li>Step Ramp Time (seconds): 20</li>
<li>Step User Count: 100</li>
<li><p>These settings have the load test running for 30 minutes (1800 seconds) at user loads of 100, 200, 300, up to 2,000 users.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/ff423845.aspx" target="_blank" rel="external">How to: Specify the Step Ramp Time Property for a Step Load Pattern</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="Tip-2-–-How-to-binding-data-with-CSV-DB-or-constant"><a href="#Tip-2-–-How-to-binding-data-with-CSV-DB-or-constant" class="headerlink" title="Tip 2 – How to binding data with CSV, DB or constant"></a>Tip 2 – How to binding data with CSV, DB or constant</h3><ul>
<li>Using double curly brackets to binding data to your content<ul>
<li>CSV or DB<ul>
<li>Add data source and select data type</li>
<li>Select “properties”</li>
<li>Set the property to the correct data source field, value is like
			{{DataSource1.Filename#csv.ColumnTitle}}
		</li>
</ul>
</li>
<li>Confirm the property binding</li>
<li>Constant<ul>
<li>Using Content Text directly<br><a href="https://msdn.microsoft.com/en-us/library/bb385833%28v%3Dvs.100%29.aspx" target="_blank" rel="external">MSDN: Walkthrough: Adding Data Binding to a Web Performance Test (CSV File)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Tip-3-–-How-to-pass-response-data-to-next-request"><a href="#Tip-3-–-How-to-pass-response-data-to-next-request" class="headerlink" title="Tip 3 – How to pass response data to next request"></a>Tip 3 – How to pass response data to next request</h3><ul>
<li>Using Context parameters to store data and binding it to next.</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/22.png" alt="22p"></p>
<h3 id="Tip-4-–-How-to-make-binding-data-amd-pick-up-with-random"><a href="#Tip-4-–-How-to-make-binding-data-amd-pick-up-with-random" class="headerlink" title="Tip 4 – How to make binding data amd pick up with random"></a>Tip 4 – How to make binding data amd pick up with random</h3><ul>
<li>If your source have grant data and you want pick up is random,  you can set it on data source directly.</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/23.png" alt="23"></p>
<h3 id="Tips-5-–-Binding-Data-Source-with-CSV-file-but-execute-with-Error"><a href="#Tips-5-–-Binding-Data-Source-with-CSV-file-but-execute-with-Error" class="headerlink" title="Tips 5 – Binding Data Source with CSV file but execute with Error"></a>Tips 5 – Binding Data Source with CSV file but execute with Error</h3><ul>
<li>If your Data Source binding is setting correct by execute show with can found existing Context Parameters, it might Visual Studio known bug with binding data.</li>
<li>Solution is update your .csv file with another title to make binding with correct encoding.</li>
<li>You can confirm encoding is correct by generate code on .webtest file.</li>
</ul>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/24.png" alt="24"></p>
<h2 id="One-more-thing-about-Load-Testing"><a href="#One-more-thing-about-Load-Testing" class="headerlink" title="One more thing about Load Testing"></a>One more thing about Load Testing</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/25.jpg" alt="25"></p>
<h3 id="Cowork-with-Test-Controller-and-Test-Agent"><a href="#Cowork-with-Test-Controller-and-Test-Agent" class="headerlink" title="Cowork with Test Controller and Test Agent"></a>Cowork with Test Controller and Test Agent</h3><p>一開始我們有稍微提到Test Controller 與 Test Agent 的關係，現在我們進一步的來看看實際上Test Controller怎麼去控制Test Agent來完成Load Testing.</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/26.png" alt="26"></p>
<p>從上圖你可以看到其實Test Controller就是指派它底下的每一個Test Agent去Run Tests然後將資料取得回來放置Test controller這邊收集。</p>
<p>如果想要自己動手做，需要詳細的環境建置教學可以參考保哥的<a href="http://blog.miniasp.com/post/2011/03/13/Visual-Studio-Agent-2010-Load-and-Stress-Testing-Installation-Guide.aspx" target="_blank" rel="external">使用 Visual Studio 2010 Ultimate 及 Agent 進行負載壓力測試</a></p>
<h3 id="Remote-Controller-to-doing-Load-Testing"><a href="#Remote-Controller-to-doing-Load-Testing" class="headerlink" title="Remote Controller to doing Load Testing"></a>Remote Controller to doing Load Testing</h3><p>實務上，在做Load Testing的時候通常我們都會針對類似實際運行架構(production environment)進行測試，以確保測試出來的數值是符合真實情況的，所以通常我們的Load Testing Controller 與 Test Agent我們會獨立建立一個Test Rig來分隔實際需要測試的環境。而我們可透過遠端(remote)或直接到Load Testing Controller那台執行我們的腳本。</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/27.png" alt="27"></p>
<h3 id="Load-Testing-in-the-Cloud-Windows-Azure"><a href="#Load-Testing-in-the-Cloud-Windows-Azure" class="headerlink" title="Load Testing in the Cloud (Windows Azure)"></a>Load Testing in the Cloud (Windows Azure)</h3><p>通常一台Test Agent我們格別放在一台虛擬或實體的主機(server)上，而每台Test Agent因為硬體環境的不同，我們會讓他發送250-1000的測試量，假設你今天需要做一個同時在線人數2000人的測試，每一台你預估可以發送500人，那你會需要四台Test Agent。</p>
<p>以上面的例子來看如果想要做Load Testing但沒有這麼多台主機建立Test Controller and Test Agent也沒關係，你可以直接使用Windows Azure來建立，而且using on-demand, 你隨時可以開啟或提用你的這些主機，透過最符合CP值的方式建立需要花費昂貴費用才能建立的環境。</p>
<h4 id="Graphic"><a href="#Graphic" class="headerlink" title="Graphic"></a>Graphic</h4><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/28.png" alt="28"></p>
<h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/29.jpg" alt="29"></p>
<h4 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h4><p>如果對Load Testing有興趣想要實際上手玩玩的話建議來這邊實作一下歐，這個Lab連Sample site都會給你所以不用擔心沒有網站可以測試啦!</p>
<ol>
<li>Download <a href="http://code.msdn.microsoft.com/Getting-started-with-17a52e95" target="_blank" rel="external">sample</a>.</li>
<li>From the Solution Explorer, open SampleWebTest.webtest</li>
<li>Select the URL listed in SampleWebTest.webtest file.</li>
<li>Go to the properties list and update the property labelled ‘Url’ to your app’s/website’s URL.<br>5.From the team explorer, please connect to your Visual Studio Online account(<a href="https://app.vssps.visualstudio.com/profile/account?account=true&amp;context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MSwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjIsImF1IjpudWxsLCJjdiI6MTcyMTkyNDg0MiwiZnMiOjAsInN1IjowLCJlciI6MX01" target="_blank" rel="external">Register here</a>).</li>
<li>Open the SampleLoadTest.loadtest file. From the ‘Load Test’ menu, select ‘Run’ -&gt; ‘Selected Test’</li>
<li>The Load test from the cloud will now start and show you graphs of how your application is performing during the load test.</li>
</ol>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141230/30.png" alt="30"></p>
<p>搭配上面的Lab，這邊額外推薦大家使用<a href="http://azure.microsoft.com/zh-tw/services/visual-studio-online/" target="_blank" rel="external">visual-studio-online</a><br>，優點如下摟:</p>
<ul>
<li>5 FREE Basic user licenses</li>
<li>FREE work item tracking for all users</li>
<li>FREE 60 minutes/month of build</li>
<li>FREE 15K virtual user minutes/month of load testing</li>
<li>PREVIEW application monitoring and analytics</li>
</ul>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>執行Load Testing前注意，除了每次都要記得做初始化(IIS reset, System clean等，避免被其他變因影響)，因為這樣的壓力測試其實就是對系統做一次類似來說DDOS的攻擊，所以如果待測網站有類似阻擋DDOS攻擊的防火牆或是WAF，千萬要記得關掉以免影響測試結果。</p>
<p>另外，測試的結果跟你本身錄製的測試腳本有絕大的關係，通常測試結果太過樂觀或悲觀有很大的可能是你根本就搞錯你的測試腳本了，所以測試腳本非常重要。</p>
<p>個人這邊要額外提到一個重點Load Testing本身應該要先建立在有可相信的Web Performance Test，因為這樣才可以先定義什麼叫測試成功與失敗，各衡量指標才會有實際的判別方式。</p>
<p>而初期的測試應該要盡量的單一面向且明確的去定義你所希望測試的項目，例如:我想測試一下我的網站能不能成功上線，這是一個非常籠統且沒有人知道妳想要什麼的一個測試目標。</p>
<p>如果我們將內容換成:我想測試一下我的網站在1000個concurrent user同時使用的情況下，是否正常，這好想比上一個好多了，因為我們說出了一個明確的成功指標 “1000人”，但其實我們還是不知道要測什麼行為。</p>
<p>如果我們再將內容做些更改:我想測試一下我的網站在1000個concurrent user同時登入且使用A功能的情況下能否達成全部三秒內回應且沒有任何Exception的發生，這樣我們就會更明確地去組成一個簡單的Web Performance Test。</p>
<p>記住，Load Testing可由多個Web Performance Test組成，所以不用一個包山包海的Test，猜開成多個透過設定不同的混和或序列執行模式可以更加有彈性的建立符合實際情況的Load Testing，如此才能真實的反應你所想要知道的訊息。</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://www.prudentman.idv.tw/2011/01/performance-vs-load-vs-stress-testing.html" target="_blank" rel="external">效能/負載/壓力測試的分別（Performance vs. load vs. stress testing）</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/dd293551.aspx" target="_blank" rel="external">Setting Up Test Machines to Run Tests or Collect Data</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms404662.aspx" target="_blank" rel="external">How to: Save and Open Web Performance and Load Test Results in Visual Studio</a></li>
<li><a href="http://www.visualstudio.com/en-us/get-started/load-test-your-app-vs" target="_blank" rel="external">Load testing in the cloud</a></li>
<li><a href="http://www.visualstudio.com/en-us/get-started/load-test-your-app-vs" target="_blank" rel="external">Configure your project to run load tests in the cloud</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這邊分享一下給大家手把手(step by step)介紹一下如何建置Load Testing的專案，內容主要是我之前在公司對QA們做的training material，以英文為主，這邊如果有更好的內容會再把相關內容更新補齊上去。&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://blackie1019.github.io/categories/Testing/"/>
    
    
      <category term="Visual Studio" scheme="http://blackie1019.github.io/tags/Visual-Studio/"/>
    
      <category term="Load Testing" scheme="http://blackie1019.github.io/tags/Load-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Mou Introduction</title>
    <link href="http://blackie1019.github.io/2014/11/13/mou-introduction-markdown-write-on-mac/"/>
    <id>http://blackie1019.github.io/2014/11/13/mou-introduction-markdown-write-on-mac/</id>
    <published>2014-11-13T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>在Mac 環境寫MarkDown的好物</p>
<a id="more"></a>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/mou_logo.png" alt="Logo"></p>
<p><a href="http://github.com/blackie1019/Mou-MarkdownCSS-Dotblog" target="_blank" rel="external">Mou-MarkdownCSS-Dotblog</a>下載</p>
<h2 id="Mou介紹"><a href="#Mou介紹" class="headerlink" title="Mou介紹"></a>Mou介紹</h2><p>-這套Markdown editor 在<a href="http://markdown.tw/" target="_blank" rel="external">Markdown.tw</a>就有推薦下載，這套軟體的開發者是對岸的高手-羅晨，對他有興趣可以看<a href="http://www.inside.com.tw/2013/07/19/mou-creator-chen-luo-interview" target="_blank" rel="external">inside這篇專訪</a></p>
<p>下載後打開app就會先看他的使用介紹，左邊寫右邊preview</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/1.png" alt="1"></p>
<p>他也提供了將寫好的文檔轉換成HTML格式或PDF輸出的功能，而且他HTML的CSS本身就支援Responsive Design，算是很貼心(可惜dotblog好像沒有支援的樣板，只能自己寫custom css，真希望能提供RWD樣板選擇一下)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/8.png" alt="8"></p>
<p>因為作者是華人所以他也做了中文常常會呈現的橫板的樣式(選單上選View-&gt;Vertical Writing)的功能，可以呈現下面的結果</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/9.png" alt="9"></p>
<p>這邊介紹一下如何更改呈現的樣式,並且將Markdownpad的樣式拿過來Mou用，在上面選單選擇Mou-&gt;preferences-&gt;CSS，這邊可更換呈現風格(預設四種)，而當你按下edit時就會到你樣式的目錄，這邊可以發現其實也是四份CSS而已</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/3.png" alt="3"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/5.png" alt="5"></p>
<p>有看過C大文章的人就知道windows也有一款Markdown的編輯器叫做Markdownpad，這邊可以把Markdownpad輸出的CSS放到Mou，來讓兩邊編輯器呈現較一致的畫面，使用上我們就把從Markdownpad輸出的CSS作修改後放到剛剛的樣式目錄就可以了(Markdownpad的CSS在開頭有載點)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/6.png" alt="6"></p>
<h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><hr>
<p>Mou真的蠻好用的而且用免費根本佛心～！</p>
<p>會分享這篇文章是因為前陣子為看到dotblog上有篇C大所寫的<a href="http://www.dotblogs.com.tw/clark/archive/2013/08/25/115495.aspx" target="_blank" rel="external">[Other] 使用Markdown格式編寫點部落文章</a> 讓我發現原來Windows 也有相同的軟體了，而且也是可以把產生出來文件轉成網頁在dotblog上面呈現，這對於我來說實在很吸引人，後來才想到我應該可以把兩邊的CSS整合成成兩個版本互相使用，也可以讓Mou的套版順利呈現到dotblog.</p>
<p>先前我在Markdownpad上面使用或是將產生的HTML作檢視都會遇到一個問題就是對於code這個tag的support有些問題(斷字跟換行好像呈現上有些錯誤)<br>所以我最後的解法就是先透過quote的方式下面在接上code區塊的寫法，但結果很醜..而Mou就沒有這樣的問題，兩者的比較如下圖(上面是Mou，下面是Markdownpad的CSS，兩篇是不同文章)</p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/7.png" alt="比較圖"></p>
<p>因為上述的原因現在我的blog也是將Mou的CSS套在我的dotblog上面，加上個人覺得Mou的CSS比較偏向github的風格所以作了更換，如果想把MarkdownPad的CSS給Mou呈現或是想把Mou上面的Github2(2底色白色,1是灰色)這個樣式用在dotblog上的話可以直接從這邊<a href="http://github.com/blackie1019/Mou-MarkdownCSS-Dotblog" target="_blank" rel="external">Mou-MarkdownCSS-Dotblog</a>下載</p>
<h2 id="Github1-vs-Markdownpad"><a href="#Github1-vs-Markdownpad" class="headerlink" title="Github1 vs Markdownpad"></a>Github1 vs Markdownpad</h2><p>這邊提供Markdownpad的css放到Mou的Github1(Mou預設)一些比較截圖(每組圖上面都是Mou下面都是Markdownpad)</p>
<h3 id="比較一"><a href="#比較一" class="headerlink" title="比較一"></a>比較一</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_1.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_1.png" alt="Markdownpad-1"></p>
<h3 id="比較二"><a href="#比較二" class="headerlink" title="比較二"></a>比較二</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_2.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_2.png" alt="Markdownpad-1"></p>
<h3 id="比較三"><a href="#比較三" class="headerlink" title="比較三"></a>比較三</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_3.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_3.png" alt="Markdownpad-1"></p>
<h3 id="比較四"><a href="#比較四" class="headerlink" title="比較四"></a>比較四</h3><p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MouGithub_4.png" alt="Mou-1"></p>
<p><img src="http://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20130831/MakeDownPad_4.png" alt="Markdownpad-1"></p>
<p>工欲善其事，必先利其器，讓我們一起學好Markdown吧～！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Mac 環境寫MarkDown的好物&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="MarkDown" scheme="http://blackie1019.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Coding Dojo, Kata, Wasa, and Randori</title>
    <link href="http://blackie1019.github.io/2014/11/13/coding-dojo-kata-wasa-and-randori/"/>
    <id>http://blackie1019.github.io/2014/11/13/coding-dojo-kata-wasa-and-randori/</id>
    <published>2014-11-13T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>最近很紅的幾個名詞，而且看活動蠻好玩的，了解的過程順便整理一下筆記</p>
<a id="more"></a>
<h2 id="Coding-Dojo"><a href="#Coding-Dojo" class="headerlink" title="Coding Dojo"></a>Coding Dojo</h2><p>這是指一個學習的過程或方法，招集一群人有目地的在安全的環境一起學習技術或探索問題，而這過程著重在如何一起學習與解決問題，也會從中加入一些其他的開發方式，例如Pair coding、TDD、Design pattern等來當作主軸，讓大家在過程中都有個主題的方向去學習，既使犯錯了也是很好的教材。</p>
<p>以下稍微解說一下方式與角色：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/02.png" alt="02"></p>
<ul>
<li><p>Driver：主要負責寫Code的人，完成即可重回Spectators去準備下一輪挑選</p>
</li>
<li><p>Navigator：負責協除寫Code的人完成並擔任下一個Driver</p>
</li>
<li><p>Spectators：輪流上去成為Navigator的代選者</p>
</li>
</ul>
<p>以上的腳色透過一次固定的時間(約10-15分鐘)的方式輪替角色並從中獲得練習</p>
<p>通常會搭配幾個Rule:</p>
<ul>
<li>Pair Programming</li>
</ul>
<p>學習如何兩個人共同合作寫Code(此時Driver一組有兩個人)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/03.jpg" alt="03"></p>
<ul>
<li>TDD</li>
</ul>
<p>依照TDD的方式些撰寫測試案例再來完成功能進而改善code的品質</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/04.gif" alt="04"></p>
<ul>
<li>Step by Step</li>
</ul>
<p>以能滿足Test的方式一步步完成</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/05.PNG" alt="05"></p>
<ul>
<li>Call Help</li>
</ul>
<p>如果真的遇到問題絕對不要害怕向Navigator提出求救</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/06.JPG" alt="06"></p>
<h2 id="Code-Kata"><a href="#Code-Kata" class="headerlink" title="Code Kata"></a>Code Kata</h2><p>這名詞也指的是招式(套路)，通常在學武功的時候都會有幾招固定招式，如下</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/08.JPG" alt="08"></p>
<p>相同的概念放到Software development裡面其實就是給一些已知的問題讓你練習，如</p>
<p><a href="http://codekata.com/kata/kata01-supermarket-pricing/" target="_blank" rel="external">kata01-supermarket-pricing</a></p>
<p>這樣的既有問題該如何去寫出程式來解決問題。而在實際的開發世界裡面大多數剛踏進這個產業的人往往缺乏相關經驗甚至沒有開發經驗，而Kata就是一個讓他們培養解決問題的經驗最好的練習方式。</p>
<p>而流程上他分為三個部分，類似紅綠燈的：紅、黃、綠</p>
<ul>
<li><p>紅:測試失敗</p>
</li>
<li><p>黃:可以改善功能已達到需求</p>
</li>
<li><p>綠:測試成功</p>
</li>
</ul>
<p>由撰寫第一個測試失敗的Test Case 開始改進，然後實作通過測試(綠燈)後遇到需求變更或Refactoring評估如何改善(黃燈)，然後再繼續實作直到又通過綠燈換下一個</p>
<h2 id="Wasa"><a href="#Wasa" class="headerlink" title="Wasa"></a>Wasa</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/10.JPG" alt="10"></p>
<p>一個寫測試，另外一個人寫程式通過測試，但經過一段時間後兩者調換身分，以此練習TDD與pair programming的開發方式與默契.</p>
<h2 id="Randori"><a href="#Randori" class="headerlink" title="Randori"></a>Randori</h2><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20141114/xpug-coding-dojo-katayahtzee-in-ocp-way-4-728.jpg" alt="Randori"></p>
<ul>
<li><p>Coder：就是1，負責寫Code的人</p>
</li>
<li><p>Copilot：大部分是3，代表其他人，但下一個準備上台的人視為Coder Pair Programming的Partner，也就是2</p>
</li>
</ul>
<p>把題目跟開發者寫的東西投影出來，然後當Coder在台上寫的時候Copilot則在下面討論，然後依序提出與改進，然後依樣輪流上來改寫，改寫時要通過前面那個人所寫的Test Case 確保寫出來的Code符合預期，所以這是TDD與Kata 很好的一個練習實作方式(實際上也常使用Pair Programming的方式上台寫作)。</p>
<p>流程上類似：第一個看到需求後先寫下了Test Case然後讓第二個補上功能，再讓第二個寫Test Case，第三個上來寫功能這樣的循環</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><p><a href="http://www.slideshare.net/AgileCommunity/agile-tour-2014-dojo-with-c-sharp-pdf" target="_blank" rel="external">Agile tour 2014 - Coding Dojo with C# and TDD</a></p>
</li>
<li><p><a href="http://www.danielteng.com/2011/03/15/coding-doj/" target="_blank" rel="external">代码道场 Coding Dojo</a></p>
</li>
<li><p><a href="http://codekata.com/" target="_blank" rel="external">codekata</a></p>
</li>
<li><p><a href="http://agilepainrelief.com/notesfromatooluser/2008/10/tdd-randori-session.html#.VGTwKZCUccs" target="_blank" rel="external">TDD RANDORI SESSION</a></p>
</li>
<li><p><a href="http://www.slideshare.net/giordano/xpug-coding-dojo-katayahtzee-in-ocp-way" target="_blank" rel="external">XpUg Coding Dojo: KataYahtzee in Ocp way</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近很紅的幾個名詞，而且看活動蠻好玩的，了解的過程順便整理一下筆記&lt;/p&gt;
    
    </summary>
    
      <category term="Development&amp;Coding" scheme="http://blackie1019.github.io/categories/Development-Coding/"/>
    
    
      <category term="Scrum" scheme="http://blackie1019.github.io/tags/Scrum/"/>
    
      <category term="Agile" scheme="http://blackie1019.github.io/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>D3.JS:Intro</title>
    <link href="http://blackie1019.github.io/2014/08/26/d3js-intro/"/>
    <id>http://blackie1019.github.io/2014/08/26/d3js-intro/</id>
    <published>2014-08-26T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://d3js.org/" target="_blank" rel="external">D3.js</a>是一個JavaScript library，是 Data-Driven Documents只要有資料就可以產生文件，透過本身資料的儲存方式來轉換成圖像的方式呈現，提供不同的視角來檢視你的資料，並從中強化各種視覺呈現的效果與互動．D3.js 可僅透過JavaScript, HTML, SVG and CSS就可以達到圖像化的資料呈現並且可跨瀏覽器支援．</p>
<a id="more"></a>
<h2 id="What-is-D3-js"><a href="#What-is-D3-js" class="headerlink" title="What is D3.js?"></a>What is D3.js?</h2><p>現在我們就直接看一個<a href="http://zbryikt.github.io/visualize/dorling/" target="_blank" rel="external">Live Demo</a> 感受一下魅力吧!</p>
<p>另外推薦一個台灣人以台灣地圖與資料來呈現空間與數據關係的<a href="https://blog.safaribooksonline.com/2014/02/11/d3-js-maps/" target="_blank" rel="external">範例</a></p>
<h2 id="Why-need-it"><a href="#Why-need-it" class="headerlink" title="Why need it?"></a>Why need it?</h2><p>為什麼我們會需要D3.js這樣圖像化地library勒？當我們處於一個大資料的時代，想要直接閱讀資料從中找出資訊是很不容易的事情，這是後我們可以透過圖像化的方式讓我們用看的就能感覺出他的重要性或差異，我們從下面這個範例來解說一下</p>
<h2 id="Setup-and-Demo"><a href="#Setup-and-Demo" class="headerlink" title="Setup and Demo"></a>Setup and Demo</h2><p>看完一串說明後，就讓我們來hand on一下吧</p>
<p>安裝上只要先include D3.js的js檔案</p>
<pre><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre><p>接著就來個簡單的Select吧</p>
<p><a class="jsbin-embed" href="http://jsbin.com/vokaz/3/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>就這樣透過select我們輕鬆地幫p元素換了顏色</p>
<p>剩下的我們就明天再繼續吧</p>
<p>Day 1 end</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://d3js.org/&quot;&gt;D3.js&lt;/a&gt;是一個JavaScript library，是 Data-Driven Documents只要有資料就可以產生文件，透過本身資料的儲存方式來轉換成圖像的方式呈現，提供不同的視角來檢視你的資料，並從中強化各種視覺呈現的效果與互動．D3.js 可僅透過JavaScript, HTML, SVG and CSS就可以達到圖像化的資料呈現並且可跨瀏覽器支援．&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="D3js" scheme="http://blackie1019.github.io/tags/D3js/"/>
    
  </entry>
  
  <entry>
    <title>D3.JS:Data-Driven Documents</title>
    <link href="http://blackie1019.github.io/2014/08/25/d3js-data-driven-documents/"/>
    <id>http://blackie1019.github.io/2014/08/25/d3js-data-driven-documents/</id>
    <published>2014-08-25T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/mbostock/d3/wiki" target="_blank" rel="external">D3.JS:Data-Driven Documents</a>，是本人近期很感興趣的一個js 套件，它提供了一些基於文件操作方式的js函式，讓文件的資料呈現可以透過更能讓瀏覽者理解與互動的方式來使用，大大的提升了可讀性與使用率。</p>
<a id="more"></a>
<p>在動手前我們先來知道一下D3到底做了什麼，這邊節錄底部大大書裡的一段話</p>
<blockquote>
<p>Fundamentally, D3 is an elegant piece of software that facilitates generation and manipulation of web documents with data. It does this by:</p>
<ul>
<li>Loading data into the browser’s memory</li>
<li>Binding data to elements within the document, creating new elements as needed</li>
<li>Transforming those elements by interpreting each element’s bound datum and setting its visual properties accordingly</li>
<li>Transitioning elements between states in response to user input</li>
</ul>
</blockquote>
<p>這邊來看幾個showcase與demo吧</p>
<ul>
<li><a href="http://www.youtube.com/watch?v=1_LDH1T1D1Y" target="_blank" rel="external">D3.js Line Chart</a></li>
<li><a href="http://www.youtube.com/watch?v=qYEHt_ykDR0" target="_blank" rel="external">Leap Motion D3.js Demo</a></li>
<li><a href="http://www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html?_r=0" target="_blank" rel="external">At the National Conventions, the Words They Used</a></li>
<li><a href="http://mbostock.github.io/d3/talk/20111018/treemap.html" target="_blank" rel="external">treemap</a></li>
<li><a href="http://bl.ocks.org/mbostock/4183330" target="_blank" rel="external">World Tour</a></li>
<li><a href="http://bost.ocks.org/mike/hive/" target="_blank" rel="external">Hive Plots</a></li>
</ul>
<p>如果想看了解更多，請知道還有什麼更酷的實例<a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank" rel="external">請看</a>，想了解更深請看<a href="http://dl.acm.org/citation.cfm?id=2068631" target="_blank" rel="external">ACM期刊</a></p>
<h2 id="Hands-on-with-D3js"><a href="#Hands-on-with-D3js" class="headerlink" title="Hands on with D3js"></a>Hands on with D3js</h2><p>接著我們來動手玩玩D3js吧,先到<a href="https://github.com/mbostock/d3/wiki" target="_blank" rel="external">官方Github</a>下載最新的code,使用上很簡單只要加入下面這段即可</p>
<pre><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre><p>這邊我們簡單先做出一個表格再來跟大家說明</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>會寫這篇其實跟以前在學時期玩過一陣子splunk有關，基本上splunk是一個收集記錄(log)或是任何資料(data)，經過處理與計算後以圖像或表單的方式來讓使用者更能看出一些現象的趨勢與探討出一些指標做出預測。Acer使用splunk做出了SOC的安全預測中心的一套偵測系統，而e-Travel(歐洲前十大網路旅行社)也透過splunkf去將它自有的巨量資料即時分析與搜尋的功能除了減少人工作業的時間與人力外，也降低了營運的成本。</p>
<p>而splunk這套系統除了本身索引建置與查詢極具戰力之外，早期splunk最引人樂道的是他將資料轉換成更容易了解的互動式視覺資料，這讓使用者在從巨量(big data)中更能發現出所期望預測的結果或是一些因素，當我們都在ㄧ昧的要求做到更快速的查詢與建立更完善的資料的同時，是否能透過其他方式來找出更值錢的且更能讓看的人了解的資料是更加重要的。</p>
<p>對於D3有興趣的人可以參考下面的讀物，是中文的書籍以及他線上免費閱讀的原文版本(作者真的很佛心)</p>
<ul>
<li><a href="http://www.tenlong.com.tw/items/9862769858?item_id=887625" target="_blank" rel="external">網頁互動式資料視覺化：使用 D3 (Interactive Data Visualization for the Web)</a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000345/index.html" target="_blank" rel="external">線上閱讀(英文版)</a></li>
</ul>
<p>另外附上TonyQ大大的介紹與說明:</p>
<ul>
<li><a href="http://www.youtube.com/watch?v=7nnZOIXIZ3k" target="_blank" rel="external">d3.js介紹</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/mbostock/d3/wiki&quot;&gt;D3.JS:Data-Driven Documents&lt;/a&gt;，是本人近期很感興趣的一個js 套件，它提供了一些基於文件操作方式的js函式，讓文件的資料呈現可以透過更能讓瀏覽者理解與互動的方式來使用，大大的提升了可讀性與使用率。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="D3js" scheme="http://blackie1019.github.io/tags/D3js/"/>
    
  </entry>
  
  <entry>
    <title>Emmet LiveStyle hands on Lab</title>
    <link href="http://blackie1019.github.io/2014/08/02/emmet-livestyle-hands-on-lab/"/>
    <id>http://blackie1019.github.io/2014/08/02/emmet-livestyle-hands-on-lab/</id>
    <published>2014-08-02T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>想必大部分人都知道Emmet是一套在SublimeText上Toolkit，而今天要介紹的是旗下的另外一套超方便的Emmet LiveStyle工具,讓你再透過瀏覽器修改檢查時就完成開發項目的調整，而這也是前端開發必學項目之一。</p>
<a id="more"></a>
<h2 id="Emmet-and-Emmet-LiveStyle"><a href="#Emmet-and-Emmet-LiveStyle" class="headerlink" title="Emmet and Emmet LiveStyle"></a>Emmet and Emmet LiveStyle</h2><p>Emmet是一個網業開發的Toolkit，前身叫做Zen Coding，可以快速的幫你建立Html與CSS文件，還不清楚或想了解更多的人可以先到<a href="http://docs.emmet.io/" target="_blank" rel="external">Emmet官網</a>看介紹影片。</p>
<p>而Emmet LiveStyle則是另外一套完全不同的工具，可以在Chrome上面讓你的Browser與Text Editor(當然預設是指SublimeText瞜)協同工作，目前瀏覽器的部分支援Chrome與Safari，編輯器則只有SublimeText。</p>
<p>快速介紹Emmet LiveStyle的特色</p>
<ul>
<li>不用儲存實際檔案</li>
<li>修改不用刷新頁面</li>
<li>Browser與Editor的雙向協同工作</li>
<li>跨平台</li>
<li>創新的CSS patching</li>
<li>安裝與使用方便，完全不用修改工作流程(只有簡化)</li>
</ul>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol>
<li>下載<a href="http://www.sublimetext.com/" target="_blank" rel="external">SublimeText</a></li>
<li>安裝<a href="https://sublime.wbond.net/installation" target="_blank" rel="external">Package Control</a></li>
<li><p>在SublimeText中使用Package Control安裝LiveStyle</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/1.png" alt="1"></p>
<p> 看到下面的說明代表安裝完成瞜</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/2.png" alt="2">.</p>
</li>
<li><p>接著打開Chrome安裝<a href="https://chrome.google.com/webstore/detail/emmet-livestyle/diebikgmpmeppiilkaijjbdgciafajmg?hl=zh-TW" target="_blank" rel="external">LiveStyle plugin</a></p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/3.png" alt="3"></p>
</li>
<li><p>然後打開Chrome的開發者工具可以看到多一個LiveStyle的選項選擇開啟功能就可以來玩耍瞜</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/4.png" alt="4"></p>
</li>
</ol>
<h2 id="Hands-on"><a href="#Hands-on" class="headerlink" title="Hands on"></a>Hands on</h2><ol>
<li>打開另一個網頁</li>
<li>開啟Chorme developer tool 勾選Enable LiveStyle for current page</li>
<li><p>這邊會顯示這一個網頁有多少公司是獨立的檔案可以被修改，這邊我們需要把他Mapping到我們SublimeText上面去</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/5.png" alt="5"></p>
</li>
<li><p>這時候如果我們在SublimeText開一份新文件就會發生原本沒有任何可以mapping的下拉選項出現了一個剛剛新開的檔案瞜</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/6.png" alt="6"></p>
</li>
<li><p>接著我們也來讓網頁選轉一下吧</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20140803/demo.gif" alt="7"></p>
</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>有這套神奇之後以往麻煩的前端也面修改要一直切換Browser與編輯器的過程可以跟他說掰掰瞜，而SublimeText支援前端的能力有多強小弟就不多贅言，大家還是趕快來動手玩玩吧!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想必大部分人都知道Emmet是一套在SublimeText上Toolkit，而今天要介紹的是旗下的另外一套超方便的Emmet LiveStyle工具,讓你再透過瀏覽器修改檢查時就完成開發項目的調整，而這也是前端開發必學項目之一。&lt;/p&gt;
    
    </summary>
    
      <category term="Development&amp;Coding" scheme="http://blackie1019.github.io/categories/Development-Coding/"/>
    
    
      <category term="Emmet" scheme="http://blackie1019.github.io/tags/Emmet/"/>
    
      <category term="SublimeText" scheme="http://blackie1019.github.io/tags/SublimeText/"/>
    
  </entry>
  
  <entry>
    <title>Swift與iOS APP開發 - 介紹與開發環境安裝</title>
    <link href="http://blackie1019.github.io/2014/07/22/swift-hand-by-hand-day-01/"/>
    <id>http://blackie1019.github.io/2014/07/22/swift-hand-by-hand-day-01/</id>
    <published>2014-07-22T16:29:45.000Z</published>
    <updated>2016-08-22T13:47:23.663Z</updated>
    
    <content type="html"><![CDATA[<p>這篇主要在介紹Swift與iOS的開發環境安裝</p>
<a id="more"></a>
<h2 id="Swift介紹"><a href="#Swift介紹" class="headerlink" title="Swift介紹"></a>Swift介紹</h2><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><p><em> 首先要先確定你有apple developer開發帳號(還沒繳年費的記得快繳錢瞜, 呵呵) </em></p>
<ol>
<li>前往 <a href="https://developer.apple.com/devcenter/ios/index.action" target="_blank" rel="external">官方下載</a></li>
<li><p>登入Developer會員帳號後最上面選擇 iOS 8 Beta</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_01.png" alt="01"></p>
</li>
<li><p>拉到下面選擇安裝 Xcode 6 beta</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_02.png" alt="02"></p>
</li>
<li><p>下載完dmg檔案後直接雙點安裝然後拖進application資料夾中存放</p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_03.png" alt="03"></p>
<p> <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/Swift/01/swift_01_04.png" alt="04"></p>
</li>
<li><p>按下⌘+R或是上方的執行按鈕執行。可以看到中間區塊的右下角出現 Hello World!字樣。</p>
</li>
<li><p>這樣就完成了我們第一天的學習</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇主要在介紹Swift與iOS的開發環境安裝&lt;/p&gt;
    
    </summary>
    
      <category term="Mobile" scheme="http://blackie1019.github.io/categories/Mobile/"/>
    
    
      <category term="iOS" scheme="http://blackie1019.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://blackie1019.github.io/tags/Swift/"/>
    
  </entry>
  
</feed>
